[{"title":"Hello World","url":"/2021/04/25/hello-world/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","tags":["测试"]},{"title":"test_my_site","url":"/2021/04/25/test-my-site/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4>","tags":["test"]},{"title":"Vue.js - Day1","url":"/2021/05/02/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day1\"><a href=\"#Vue-js-Day1\" class=\"headerlink\" title=\"Vue.js - Day1\"></a>Vue.js - Day1</h1><h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>\n<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>\n</li>\n<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n</li>\n<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>\n</li>\n<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n</li>\n</ul>\n<h2 id=\"为什么要学习流行框架\"><a href=\"#为什么要学习流行框架\" class=\"headerlink\" title=\"为什么要学习流行框架\"></a>为什么要学习流行框架</h2><ul>\n<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；</li>\n</ul>\n<ul>\n<li>企业中，使用框架，能够提高开发的效率；</li>\n</ul>\n<ul>\n<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>\n<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>\n</ul>\n<ul>\n<li>增强自己就业时候的竞争力</li>\n</ul>\n<ul>\n<li>人无我有，人有我优</li>\n<li>你平时不忙的时候，都在干嘛？</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</li>\n</ul>\n<ul>\n<li>node 中的 express；</li>\n</ul>\n<ul>\n<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</li>\n</ul>\n<ul>\n<li><ol>\n<li>从Jquery 切换到 Zepto</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从 EJS 切换到 art-template</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\"><a href=\"#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\" class=\"headerlink\" title=\"Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>\n<li><p>MVC 是后端的分层开发概念；</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>\n</li>\n<li><p>为什么有了MVC还要有MVVM</p>\n</li>\n</ul>\n<h2 id=\"Vue-js-基本代码-和-MVVM-之间的对应关系\"><a href=\"#Vue-js-基本代码-和-MVVM-之间的对应关系\" class=\"headerlink\" title=\"Vue.js 基本代码 和 MVVM 之间的对应关系\"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><p><img src=\"https://user-images.githubusercontent.com/28568478/116802575-5b22cd80-ab46-11eb-8f55-8b75473b6d4a.png\" alt=\"01 MVC和MVVM的关系图解\"></p>\n<h2 id=\"Vue之-基本的代码结构和插值表达式、v-cloak\"><a href=\"#Vue之-基本的代码结构和插值表达式、v-cloak\" class=\"headerlink\" title=\"Vue之 - 基本的代码结构和插值表达式、v-cloak\"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id=\"Vue指令之v-text和v-html\"><a href=\"#Vue指令之v-text和v-html\" class=\"headerlink\" title=\"Vue指令之v-text和v-html\"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id=\"Vue指令之v-bind的三种用法\"><a href=\"#Vue指令之v-bind的三种用法\" class=\"headerlink\" title=\"Vue指令之v-bind的三种用法\"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>\n<li><p>直接使用指令<code>v-bind</code></p>\n</li>\n<li><p>使用简化指令<code>:</code></p>\n</li>\n<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;!-- &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        &#x2F;* 默认加入v-cloak的元素 隐藏 *&#x2F;</span><br><span class=\"line\">        [v-cloak] &#123;</span><br><span class=\"line\">            display: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 使用v-cloak能够解决插值表达式闪烁的问题 --&gt;</span><br><span class=\"line\">        &lt;p v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">        &lt;!-- 默认v-text是没有闪烁问题的</span><br><span class=\"line\">            v-text 会覆盖元素中原本的内容，但是插值表达式 只会替换自己的这个占位符 不会吧扎鞥个元素内容清空</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;h4 v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- v-html会解析html格式字符串 --&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;msg2&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div v-text&#x3D;&quot;msg2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div v-html&#x3D;&quot;msg2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- v-bind 是vue中提供用于绑定属性的指令 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; title&#x3D;&quot;123&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; title&#x3D;&quot;mytitle&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle+&#39;123&#39;&quot;&gt;</span><br><span class=\"line\">         &lt;!-- 简化写 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;mytitle+&#39;456&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- vue中 提供了v-on 事件绑定机制 --&gt;</span><br><span class=\"line\">         &lt;!-- 这样写会报错 未定义alert方法 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;mytitle+&#39; v-on&#39;&quot; v-on:click&#x3D;&quot;alert(&#39;报警&#39;)&quot;&gt;</span><br><span class=\"line\">         &lt;!-- 貌似v-bind:title不生效 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; v-on:click&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; v-on:mouseover&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\">         &lt;!-- v-on缩写 用@代替 v-on:--&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; @mouseover&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- vue.js放在这里时 如果网速过慢 会导致 &#123;&#123;msg&#125;&#125; 展现在页面</span><br><span class=\"line\">        需要加v-cloak 设置样式为none 这样在网速慢的时候加载出来不会出现&#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">        而是当msg数据返回时才会展示信息</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">            el: &quot;#app&quot;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                msg:123,</span><br><span class=\"line\">                msg2:&#39;&lt;h1&gt;哈哈 我是一个大大的H1&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">                mytitle:&quot;这是一个自己定义的title&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123; &#x2F;&#x2F; 这个methods 属性中国定义了当前vue实例所有可用的方法</span><br><span class=\"line\">                show: function () &#123;</span><br><span class=\"line\">                    alert(&quot;报警&quot;)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vue指令之v-on和跑马灯效果\"><a href=\"#Vue指令之v-on和跑马灯效果\" class=\"headerlink\" title=\"Vue指令之v-on和跑马灯效果\"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id=\"跑马灯效果\"><a href=\"#跑马灯效果\" class=\"headerlink\" title=\"跑马灯效果\"></a>跑马灯效果</h3><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       info: &#39;猥琐发育，别浪~！&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">       intervalId: null</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       go() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 如果当前有定时器在运行，则直接return</span><br><span class=\"line\"></span><br><span class=\"line\">         if (this.intervalId !&#x3D; null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 开始定时器</span><br><span class=\"line\"></span><br><span class=\"line\">         this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">       stop() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         clearInterval(this.intervalId);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue指令之v-on的缩写和事件修饰符\"><a href=\"#Vue指令之v-on的缩写和事件修饰符\" class=\"headerlink\" title=\"Vue指令之v-on的缩写和事件修饰符\"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h3><ul>\n<li><p>.stop       阻止冒泡</p>\n</li>\n<li><p>.prevent    阻止默认事件</p>\n</li>\n<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>\n</li>\n<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>\n</li>\n<li><p>.once       事件只触发一次</p>\n</li>\n</ul>\n<h2 id=\"Vue指令之v-model和双向数据绑定\"><a href=\"#Vue指令之v-model和双向数据绑定\" class=\"headerlink\" title=\"Vue指令之v-model和双向数据绑定\"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id=\"简易计算器案例\"><a href=\"#简易计算器案例\" class=\"headerlink\" title=\"简易计算器案例\"></a>简易计算器案例</h2><ol>\n<li>HTML 代码结构</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;select v-model&#x3D;&quot;opt&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       n1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       n2: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       result: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       opt: &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       getResult() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         switch (this.opt) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;0&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) + parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;1&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) - parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;2&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) * parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;3&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"在Vue中使用样式\"><a href=\"#在Vue中使用样式\" class=\"headerlink\" title=\"在Vue中使用样式\"></a>在Vue中使用样式</h2><h3 id=\"使用class样式\"><a href=\"#使用class样式\" class=\"headerlink\" title=\"使用class样式\"></a>使用class样式</h3><ol>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>数组中使用三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h3><ol>\n<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>\n</li>\n</ol>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</li>\n</ol>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class=\"line\">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Vue指令之v-for和key属性\"><a href=\"#Vue指令之v-for和key属性\" class=\"headerlink\" title=\"Vue指令之v-for和key属性\"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol>\n<li>迭代数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代对象中的属性</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>迭代数字</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>\n</blockquote>\n<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>\n<h2 id=\"Vue指令之v-if和v-show\"><a href=\"#Vue指令之v-if和v-show\" class=\"headerlink\" title=\"Vue指令之v-if和v-show\"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote>\n<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>\n</blockquote>\n<h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"http://www.cnblogs.com/kidney/p/6052935.html\">Vue.js双向绑定的实现原理</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day2","url":"/2021/05/02/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day2\"><a href=\"#Vue-js-Day2\" class=\"headerlink\" title=\"Vue.js - Day2\"></a>Vue.js - Day2</h1><h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"vue实例的生命周期\"><a href=\"#vue实例的生命周期\" class=\"headerlink\" title=\"vue实例的生命周期\"></a><a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">vue实例的生命周期</a></h2><ul>\n<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\">生命周期钩子</a>：就是生命周期事件的别名而已；</li>\n<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>\n<li>主要的生命周期函数分类：</li>\n</ul>\n<ul>\n<li>创建期间的生命周期函数：<ul>\n<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>\n<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>\n<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>\n<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>\n</ul>\n</li>\n<li>运行期间的生命周期函数：<ul>\n<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>\n<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>\n</ul>\n</li>\n<li>销毁期间的生命周期函数：<ul>\n<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br><img src=\"https://user-images.githubusercontent.com/28568478/116815239-3b63c780-ab8f-11eb-9453-11e40b354c4e.png\" alt=\"lifecycle\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-resource-实现-get-post-jsonp请求\"><a href=\"#vue-resource-实现-get-post-jsonp请求\" class=\"headerlink\" title=\"vue-resource 实现 get, post, jsonp请求\"></a><a href=\"https://github.com/pagekit/vue-resource\">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>\n<ol>\n<li>之前的学习中，如何发起数据请求？</li>\n<li>常见的数据请求类型？  get  post jsonp</li>\n<li>测试的URL请求资源地址：</li>\n</ol>\n<ul>\n<li>get请求地址： <a href=\"http://vue.studyit.io/api/getlunbo\">http://vue.studyit.io/api/getlunbo</a></li>\n<li>post请求地址：<a href=\"http://vue.studyit.io/api/post\">http://vue.studyit.io/api/post</a></li>\n<li>jsonp请求地址：<a href=\"http://vue.studyit.io/api/jsonp\">http://vue.studyit.io/api/jsonp</a></li>\n</ul>\n<ol start=\"4\">\n<li>JSONP的实现原理</li>\n</ol>\n<ul>\n<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>\n<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>\n<li>具体实现过程：<ul>\n<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>\n<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>\n<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>\n<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>\n</ul>\n</li>\n<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入解析 URL 地址的核心模块</span><br><span class=\"line\">const urlModule &#x3D; require(&#39;url&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">const server &#x3D; http.createServer();</span><br><span class=\"line\">&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求</span><br><span class=\"line\">server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const url &#x3D; req.url;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 解析客户端请求的URL地址</span><br><span class=\"line\">  var info &#x3D; urlModule.parse(url, true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据</span><br><span class=\"line\">  if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取客户端指定的回调函数的名称</span><br><span class=\"line\">    var cbName &#x3D; info.query.callback;</span><br><span class=\"line\">    &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象</span><br><span class=\"line\">    var data &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;zs&#39;,</span><br><span class=\"line\">      age: 22,</span><br><span class=\"line\">      gender: &#39;男&#39;,</span><br><span class=\"line\">      hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class=\"line\">    var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;;</span><br><span class=\"line\">    &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class=\"line\">    res.end(result);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    res.end(&#39;404&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>vue-resource 的配置步骤：</li>\n</ol>\n<ul>\n<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>\n<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>\n</ul>\n<ol start=\"6\">\n<li>发送get请求：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getInfo() &#123; &#x2F;&#x2F; get 方式获取数据</span><br><span class=\"line\">  this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送post请求：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">postInfo() &#123;</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; post 方法接收三个参数：</span><br><span class=\"line\">  &#x2F;&#x2F; 参数1： 要请求的URL地址</span><br><span class=\"line\">  &#x2F;&#x2F; 参数2： 要发送的数据对象</span><br><span class=\"line\">  &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送JSONP请求获取数据：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;;</span><br><span class=\"line\">  this.$http.jsonp(url).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置本地数据库和数据接口API\"><a href=\"#配置本地数据库和数据接口API\" class=\"headerlink\" title=\"配置本地数据库和数据接口API\"></a>配置本地数据库和数据接口API</h2><ol>\n<li>先解压安装 <code>PHPStudy</code>;</li>\n<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>\n<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>\n<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>\n<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>\n<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>\n<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>\n</ol>\n<h2 id=\"品牌管理改造\"><a href=\"#品牌管理改造\" class=\"headerlink\" title=\"品牌管理改造\"></a>品牌管理改造</h2><h3 id=\"展示品牌列表\"><a href=\"#展示品牌列表\" class=\"headerlink\" title=\"展示品牌列表\"></a>展示品牌列表</h3><h3 id=\"添加品牌数据\"><a href=\"#添加品牌数据\" class=\"headerlink\" title=\"添加品牌数据\"></a>添加品牌数据</h3><h3 id=\"删除品牌数据\"><a href=\"#删除品牌数据\" class=\"headerlink\" title=\"删除品牌数据\"></a>删除品牌数据</h3><h2 id=\"Vue中的动画\"><a href=\"#Vue中的动画\" class=\"headerlink\" title=\"Vue中的动画\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>\n<h3 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h3><ol>\n<li>HTML结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class=\"line\">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class=\"line\">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>VM 实例：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isshow: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    myAnimate() &#123;</span><br><span class=\"line\">      this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义两组类样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter-active,</span><br><span class=\"line\">    .fade-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.2s ease;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter,</span><br><span class=\"line\">    .fade-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateX(100px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用第三方-CSS-动画库\"><a href=\"#使用第三方-CSS-动画库\" class=\"headerlink\" title=\"使用第三方 CSS 动画库\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D\">使用第三方 CSS 动画库</a></h3><ol>\n<li>导入动画类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 transition 及属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">\tenter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class=\"line\">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class=\"line\">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">  \t&lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h3><ol>\n<li>定义 transition 组件以及三个钩子函数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class=\"line\">    &lt;transition</span><br><span class=\"line\">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">    @enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class=\"line\">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义三个 methods 钩子方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class=\"line\">          el.offsetWidth;</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class=\"line\">          this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n<li>定义动画过渡时长和样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.show&#123;</span><br><span class=\"line\">      transition: all 0.4s ease;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1\">v-for 的列表过渡</a></h3><ol>\n<li>定义过渡样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .list-enter,</span><br><span class=\"line\">    .list-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateY(10px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .list-enter-active,</span><br><span class=\"line\">    .list-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.3s ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 VM中的结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    txt: &#39;&#39;,</span><br><span class=\"line\">    list: [1, 2, 3, 4]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      this.list.push(this.txt);</span><br><span class=\"line\">      this.txt &#x3D; &#39;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"列表的排序过渡\"><a href=\"#列表的排序过渡\" class=\"headerlink\" title=\"列表的排序过渡\"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>\n<ul>\n<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.v-move&#123;</span><br><span class=\"line\">  transition: all 0.8s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\">pagekit/vue-resource</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html\">navicat如何导入sql文件和导出sql文件</a></li>\n<li><a href=\"http://cubic-bezier.com/#.4,-0.3,1,.33\">贝塞尔在线生成器</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day3","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day4\"><a href=\"#Vue-js-Day4\" class=\"headerlink\" title=\"Vue.js - Day4\"></a>Vue.js - Day4</h1><h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"组件中data和props的区别\"><a href=\"#组件中data和props的区别\" class=\"headerlink\" title=\"组件中data和props的区别\"></a>组件中data和props的区别</h2><h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用tag属性指定router-link渲染的标签类型\"><a href=\"#使用tag属性指定router-link渲染的标签类型\" class=\"headerlink\" title=\"使用tag属性指定router-link渲染的标签类型\"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id=\"设置路由重定向\"><a href=\"#设置路由重定向\" class=\"headerlink\" title=\"设置路由重定向\"></a>设置路由重定向</h2><h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; |</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\">URL中的hash（井号）</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day3","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day3\"><a href=\"#Vue-js-Day3\" class=\"headerlink\" title=\"Vue.js - Day3\"></a>Vue.js - Day3</h1><h2 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>\n<ul>\n<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>\n<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id=\"全局组件定义的三种方式\"><a href=\"#全局组件定义的三种方式\" class=\"headerlink\" title=\"全局组件定义的三种方式\"></a>全局组件定义的三种方式</h3></li>\n</ul>\n<ol>\n<li>使用 Vue.extend 配合 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li>\n<li>直接使用 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;register&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>将模板字符串，定义到script标签种：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n同时，需要使用 Vue.component 来定义组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>\n</blockquote>\n<h3 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h3><ol>\n<li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;,</span><br><span class=\"line\">      data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          msg: &#39;大家好！&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">          alert(&#39;点击了登录按钮&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>\n</ol>\n<h3 id=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"><a href=\"#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>\n<li>通过计数器案例演示</li>\n</ol>\n<h3 id=\"使用components属性定义局部子组件\"><a href=\"#使用components属性定义局部子组件\" class=\"headerlink\" title=\"使用components属性定义局部子组件\"></a>使用<code>components</code>属性定义局部子组件</h3><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class=\"line\">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class=\"line\">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class=\"line\">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class=\"line\">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class=\"line\">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引用组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用flag标识符结合v-if和v-else切换组件\"><a href=\"#使用flag标识符结合v-if和v-else切换组件\" class=\"headerlink\" title=\"使用flag标识符结合v-if和v-else切换组件\"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>\n<li>页面结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class=\"line\">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class=\"line\">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Vue实例定义：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        flag: true</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-is属性来切换不同的子组件-并添加切换动画\"><a href=\"#使用-is属性来切换不同的子组件-并添加切换动画\" class=\"headerlink\" title=\"使用:is属性来切换不同的子组件,并添加切换动画\"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 登录组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;login&#39;, login);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 注册组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;register&#39;, register);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>添加切换样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .v-enter,</span><br><span class=\"line\">  .v-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .v-enter-active,</span><br><span class=\"line\">  .v-leave-active &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    transition: all 0.3s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; |</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\">URL中的hash（井号）</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]}]