[{"title":"Linux增加开机启动项","url":"/2021/05/07/Linux%20web/Linux%E5%A2%9E%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E9%A1%B9/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><ul>\n<li>vi /etc/rc.local</li>\n<li>按i键进入编辑模式，然后在最后一行加入需要开机启动的命令  例如:</li>\n<li>ssserver -c /etc/shadowsocks/config.json -d start  –log-file /etc/shadowsocks/ss.log –pid-file /etc/shadowsocks/ss.pid</li>\n</ul>\n","categories":["Linux web"],"tags":["开机"]},{"title":"apache 代理转发","url":"/2021/05/07/Linux%20web/apache%20%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"一、转发时需开启如下：\"><a href=\"#一、转发时需开启如下：\" class=\"headerlink\" title=\"一、转发时需开启如下：\"></a>一、转发时需开启如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo a2enmod proxy</span><br><span class=\"line\">sudo a2enmod proxy_http</span><br><span class=\"line\">sudo a2enmod proxy_ajp</span><br><span class=\"line\">sudo a2enmod proxy_balancer</span><br><span class=\"line\">sudo a2enmod proxy_connect</span><br><span class=\"line\">sudo a2enmod proxy_html</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://superuser.com/questions/1287647/apache2-not-starting-error-invalid-command-proxyrequests\">参考链接</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"二、相关代码：\"><a href=\"#二、相关代码：\" class=\"headerlink\" title=\"二、相关代码：\"></a>二、相关代码：</h2><h4 id=\"80端口转发其他多个项目端口\"><a href=\"#80端口转发其他多个项目端口\" class=\"headerlink\" title=\"80端口转发其他多个项目端口\"></a>80端口转发其他多个项目端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">        ServerAdmin webmaster@localhost</span><br><span class=\"line\">        DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;xunke</span><br><span class=\"line\">        ErrorLog &#x2F;etc&#x2F;apache2&#x2F;error.log</span><br><span class=\"line\">        CustomLog &#x2F;etc&#x2F;apache2&#x2F;access.log combined</span><br><span class=\"line\">        #ProxyPassMatch  &#x2F;xunke&#x2F;  http:&#x2F;&#x2F;localhost:8003&#x2F;   # 匹配带有xunke的url 不适用</span><br><span class=\"line\">        ProxyPass  &#x2F;xunke  http:&#x2F;&#x2F;localhost:8003&#x2F;</span><br><span class=\"line\">        ProxyPassReverse &#x2F;xunke  http:&#x2F;&#x2F;localhost:8003&#x2F;</span><br><span class=\"line\">&lt;&#x2F;VirtualHost&gt;</span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">        ServerAdmin webmaster@localhost</span><br><span class=\"line\">        DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;topmps</span><br><span class=\"line\">        ErrorLog &#x2F;etc&#x2F;apache2&#x2F;error.log</span><br><span class=\"line\">        CustomLog &#x2F;etc&#x2F;apache2&#x2F;access.log combined</span><br><span class=\"line\">        #ProxyPassMatch  &#x2F;topmps&#x2F;  http:&#x2F;&#x2F;localhost:8002&#x2F;</span><br><span class=\"line\">        ProxyPass  &#x2F;topmps&#x2F;  http:&#x2F;&#x2F;localhost:8002&#x2F;</span><br><span class=\"line\">        ProxyPassReverse  &#x2F;topmps&#x2F;  http:&#x2F;&#x2F;localhost:8002&#x2F;</span><br><span class=\"line\">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/xiaokui_wingfly/article/details/51481653\">参考链接1</a><br><a href=\"https://blog.csdn.net/u011277123/article/details/77165137\">参考链接2</a></p>\n<h4 id=\"apache-监听多个端口\"><a href=\"#apache-监听多个端口\" class=\"headerlink\" title=\"apache 监听多个端口\"></a>apache 监听多个端口</h4><ul>\n<li><p>目录：/etc/apache2/ports.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Listen 80</span><br><span class=\"line\">Listen 8003</span><br><span class=\"line\">Listen 8004</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;IfModule ssl_module&gt;</span><br><span class=\"line\">        Listen 443</span><br><span class=\"line\">&lt;&#x2F;IfModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;IfModule mod_gnutls.c&gt;</span><br><span class=\"line\">        Listen 443</span><br><span class=\"line\">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>目录：/etc/apache2/sites-available/000-default.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8003&gt;</span><br><span class=\"line\">        ServerAdmin webmaster@localhost</span><br><span class=\"line\">        DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;xunke</span><br><span class=\"line\">        ErrorLog &#x2F;etc&#x2F;apache2&#x2F;error.log</span><br><span class=\"line\">        CustomLog &#x2F;etc&#x2F;apache2&#x2F;access.log combined</span><br><span class=\"line\">&lt;&#x2F;VirtualHost&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:8004&gt;</span><br><span class=\"line\">        ServerAdmin webmaster@localhost</span><br><span class=\"line\">        DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;qibo</span><br><span class=\"line\">        ErrorLog &#x2F;etc&#x2F;apache2&#x2F;error.log</span><br><span class=\"line\">        CustomLog &#x2F;etc&#x2F;apache2&#x2F;access.log combined</span><br><span class=\"line\">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Linux web"],"tags":["apache"]},{"title":"nginx 只配置了一个域名，结果另一个域名也能访问","url":"/2021/05/07/Linux%20web/nginx%20%E5%8F%AA%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E4%B9%9F%E8%83%BD%E8%AE%BF%E9%97%AE/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>今天自己在部署业务的时候， 一个同事说他用另一个域名访问到了我这个域名下的网页, 看来我自己的Nginx的配置，感觉没什么问题！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">           listen 80;</span><br><span class=\"line\">           server_name www.hehe.com;</span><br><span class=\"line\">           root &#x2F;data1&#x2F;htdocs&#x2F;kaixuan.hehe.com&#x2F;;</span><br><span class=\"line\">           location ~ \\.php$ &#123;</span><br><span class=\"line\">                fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">                fastcgi_index  index.php;</span><br><span class=\"line\">                fastcgi_param  SCRIPT_FILENAME  $document_root&#x2F;$fastcgi_script_name;</span><br><span class=\"line\">                include        fastcgi_params;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           location &#x2F; &#123;</span><br><span class=\"line\">                 index index.html;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后来网上查了一下，发现如果当所有server的规则都不匹配时，nginx会采用第一条server配置，所以一般第一条server会使用阻止页面。这样的话，就需要在server上边再加一条server，加一条默认的阻挡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen  80 default;</span><br><span class=\"line\">    listen  [::]:80 default;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 403;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">           listen 80;</span><br><span class=\"line\">           server_name www.hehe.com;</span><br><span class=\"line\">           root &#x2F;data1&#x2F;htdocs&#x2F;kaixuan.hehe.com&#x2F;;</span><br><span class=\"line\">           location ~ \\.php$ &#123;</span><br><span class=\"line\">                fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">                fastcgi_index  index.php;</span><br><span class=\"line\">                fastcgi_param  SCRIPT_FILENAME  $document_root&#x2F;$fastcgi_script_name;</span><br><span class=\"line\">                include        fastcgi_params;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           location &#x2F; &#123;</span><br><span class=\"line\">                 index index.html;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Linux web"],"tags":["nginx"]},{"title":"supervisor安装、配置及常用命令","url":"/2021/05/07/Linux%20web/supervisor%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h1><p>在 web 应用部署到线上后，需要保证应用一直处于运行状态，在遇到程序异常、报错等情况，导致 web 应用终止时，需要保证程序可以立刻重启，继续提供服务。</p>\n<p>而Supervisor 就是解决这种问题的工具，可以提供程序崩溃后，重新把程序启动起来等功能。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><strong>简介</strong></h1><p>Supervisor 是一个用 Python 写的进程管理工具，可以很方便的用来在 UNIX-like 系统（不支持 Windows）下启动、重启（自动重启程序）、关闭进程（不仅仅是 Python 进程）。</p>\n<blockquote>\n<p>Supervisor is a client/server system that allows its users to control a number of processes on UNIX-like operating systems.</p>\n</blockquote>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><strong>安装</strong></h1><p>1、redhat/centos系统</p>\n<p>安装命令：yum install supervisor，通过这种方式安装后，自动设置为开机启动</p>\n<p>2、Ubuntu系统：</p>\n<p>安装命令：apt-get install supervisor，通过这种方式安装后，自动设置为开机启动</p>\n<p>3、pip命令（不推荐）</p>\n<p>通过 pip install supervisor 进行安装，但是需要手动启动，然后设置为开机启动。</p>\n<hr>\n<h1 id=\"Supervisor-配置\"><a href=\"#Supervisor-配置\" class=\"headerlink\" title=\"Supervisor 配置\"></a><strong>Supervisor 配置</strong></h1><p>Supervisor 是一个 C/S 模型的程序，supervisord 是 server 端，supervisorctl 是 client 端。</p>\n<p><strong>supervisord</strong></p>\n<p>下面介绍 supervisord 配置方法。supervisord 的配置文件默认位于 /etc/supervisord.conf，内容如下（;后面为注释）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[unix_http_server]</span><br><span class=\"line\">file&#x3D;&#x2F;tmp&#x2F;supervisor.sock ;UNIX socket 文件，supervisorctl 会使用</span><br><span class=\"line\">;chmod&#x3D;0700 ;socket文件的mode，默认是0700</span><br><span class=\"line\">;chown&#x3D;nobody:nogroup ;socket文件的owner，格式：uid:gid</span><br><span class=\"line\">;[inet_http_server] ;HTTP服务器，提供web管理界面</span><br><span class=\"line\">;port&#x3D;127.0.0.1:9001 ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class=\"line\">;username&#x3D;user ;登录管理后台的用户名</span><br><span class=\"line\">;password&#x3D;123 ;登录管理后台的密码</span><br><span class=\"line\">[supervisord]</span><br><span class=\"line\">logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log ;日志文件，默认是 $CWD&#x2F;supervisord.log</span><br><span class=\"line\">logfile_maxbytes&#x3D;50MB ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class=\"line\">logfile_backups&#x3D;10 ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class=\"line\">loglevel&#x3D;info ;日志级别，默认info，其它: debug,warn,trace</span><br><span class=\"line\">pidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid ;pid 文件</span><br><span class=\"line\">nodaemon&#x3D;false ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class=\"line\">minfds&#x3D;1024 ;可以打开的文件描述符的最小值，默认 1024</span><br><span class=\"line\">minprocs&#x3D;200 ;可以打开的进程数的最小值，默认 200</span><br><span class=\"line\">[supervisorctl]</span><br><span class=\"line\">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class=\"line\">;serverurl&#x3D;http:&#x2F;&#x2F;127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class=\"line\">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class=\"line\">[program:xx]</span><br><span class=\"line\">command&#x3D;&#x2F;opt&#x2F;apache-tomcat-8.0.35&#x2F;bin&#x2F;catalina.sh run ; 程序启动命令</span><br><span class=\"line\">autostart&#x3D;true ; 在supervisord启动的时候也自动启动</span><br><span class=\"line\">startsecs&#x3D;10 ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class=\"line\">autorestart&#x3D;true ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class=\"line\">startretries&#x3D;3 ; 启动失败自动重试次数，默认是3</span><br><span class=\"line\">user&#x3D;tomcat ; 用哪个用户启动进程，默认是root</span><br><span class=\"line\">priority&#x3D;999 ; 进程启动优先级，默认999，值小的优先启动</span><br><span class=\"line\">redirect_stderr&#x3D;true ; 把stderr重定向到stdout，默认false</span><br><span class=\"line\">stdout_logfile_maxbytes&#x3D;20MB ; stdout 日志文件大小，默认50MB</span><br><span class=\"line\">stdout_logfile_backups &#x3D; 20 ; stdout 日志文件备份数，默认是10</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile&#x3D;&#x2F;opt&#x2F;apache-tomcat-8.0.35&#x2F;logs&#x2F;catalina.out</span><br><span class=\"line\">stopasgroup&#x3D;false ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class=\"line\">killasgroup&#x3D;false ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class=\"line\">;包含其它配置文件</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files &#x3D; relative&#x2F;directory&#x2F;*.ini ;可以指定一个或多个以.ini结束的配置文件</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"配置管理进程\"><a href=\"#配置管理进程\" class=\"headerlink\" title=\"配置管理进程\"></a><strong>配置管理进程</strong></h1><p>进程管理配置参数，不建议全都写在supervisord.conf文件中，应该每个进程写一个配置文件放在include指定的目录下包含进supervisord.conf文件中。</p>\n<p>1&gt; 创建/etc/supervisor/config.d目录，用于存放进程管理的配置文件</p>\n<p>2&gt; 修改/etc/supervisor/supervisord.conf中的include参数，将/etc/supervisor/conf.d目录添加到include</p>\n<p>下面是配置Tomcat进程的一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:tomcat]</span><br><span class=\"line\">command&#x3D;&#x2F;opt&#x2F;apache-tomcat-8.0.35&#x2F;bin&#x2F;catalina.sh run</span><br><span class=\"line\">stdout_logfile&#x3D;&#x2F;opt&#x2F;apache-tomcat-8.0.35&#x2F;logs&#x2F;catalina.out</span><br><span class=\"line\">autostart&#x3D;true</span><br><span class=\"line\">autorestart&#x3D;true</span><br><span class=\"line\">startsecs&#x3D;5</span><br><span class=\"line\">priority&#x3D;1</span><br><span class=\"line\">stopasgroup&#x3D;true</span><br><span class=\"line\">killasgroup&#x3D;true</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"启动Supervisor服务\"><a href=\"#启动Supervisor服务\" class=\"headerlink\" title=\"启动Supervisor服务\"></a><strong>启动Supervisor服务</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Web管理界面\"><a href=\"#Web管理界面\" class=\"headerlink\" title=\"Web管理界面\"></a>Web管理界面</h1><p>出于安全考虑，默认配置是没有开启web管理界面，需要修改supervisord.conf配置文件打开http访权限，将下面的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">;[inet_http_server] ; inet (TCP) server disabled by default</span><br><span class=\"line\">;port&#x3D;127.0.0.1:9001 ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">;username&#x3D;user ; (default is no username (open server))</span><br><span class=\"line\">;password&#x3D;123 ; (default is no password (open server))</span><br></pre></td></tr></table></figure>\n\n<p>修改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[inet_http_server] ; inet (TCP) server disabled by default</span><br><span class=\"line\">port&#x3D;0.0.0.0:9001 ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">username&#x3D;user ; (default is no username (open server))</span><br><span class=\"line\">password&#x3D;123 ; (default is no password (open server))</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"注意：一定要重启supervisord服务配置才会生效\"><a href=\"#注意：一定要重启supervisord服务配置才会生效\" class=\"headerlink\" title=\"注意：一定要重启supervisord服务配置才会生效\"></a>注意：一定要重启supervisord服务配置才会生效</h1><p><img src=\"https://user-images.githubusercontent.com/28568478/117405693-98200300-af3e-11eb-9d60-ad2de6f7cf8f.png\" alt=\"image\"><br>重启后访问 ip:9001 (账号密码为user/123)</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117405729-a8d07900-af3e-11eb-9b65-92e32c697a91.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117405738-ad952d00-af3e-11eb-97bd-952990e6d59e.png\" alt=\"image\"></p>\n<hr>\n<h1 id=\"supervisorctl-操作\"><a href=\"#supervisorctl-操作\" class=\"headerlink\" title=\"supervisorctl 操作\"></a><strong>supervisorctl 操作</strong></h1><p>supervisorctl 是 supervisord 的命令行客户端工具，使用的配置和 supervisord 一样，这里就不再说了。下面，主要介绍 supervisorctl 操作的常用命令：</p>\n<p>输入命令 supervisorctl 进入 supervisorctl 的 shell 交互界面（还是纯命令行），就可以在下面输入命令了。：</p>\n<ul>\n<li>help # 查看帮助</li>\n<li>status # 查看程序状态</li>\n<li>stop program_name # 关闭 指定的程序</li>\n<li>start program_name # 启动 指定的程序</li>\n<li>restart program_name # 重启 指定的程序</li>\n<li>tail -f program_name # 查看 该程序的日志</li>\n<li>update # 重启配置文件修改过的程序（修改了配置，通过这个命令加载新的配置)</li>\n</ul>\n<p>也可以直接通过 shell 命令操作：</p>\n<ul>\n<li>supervisorctl status</li>\n<li>supervisorctl update</li>\n<li>…..</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117405782-bdad0c80-af3e-11eb-8c93-59c6b3998e66.png\" alt=\"image\"></p>\n<h1 id=\"配置详情\"><a href=\"#配置详情\" class=\"headerlink\" title=\"配置详情\"></a>配置详情</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[unix_http_server]</span><br><span class=\"line\">file&#x3D;&#x2F;tmp&#x2F;supervisor.sock   ; socket文件的路径，supervisorctl用XML_RPC和supervisord通信就是通过它进行</span><br><span class=\"line\">                              的。如果不设置的话，supervisorctl也就不能用了</span><br><span class=\"line\">                              不设置的话，默认为none。 非必须设置</span><br><span class=\"line\">;chmod&#x3D;0700                 ; 这个简单，就是修改上面的那个socket文件的权限为0700</span><br><span class=\"line\">                              不设置的话，默认为0700。 非必须设置</span><br><span class=\"line\">;chown&#x3D;nobody:nogroup       ; 这个一样，修改上面的那个socket文件的属组为user.group</span><br><span class=\"line\">                              不设置的话，默认为启动supervisord进程的用户及属组。非必须设置</span><br><span class=\"line\">;username&#x3D;user              ; 使用supervisorctl连接的时候，认证的用户</span><br><span class=\"line\">                               不设置的话，默认为不需要用户。 非必须设置</span><br><span class=\"line\">;password&#x3D;123               ; 和上面的用户名对应的密码，可以直接使用明码，也可以使用SHA加密</span><br><span class=\"line\">                              如：&#123;SHA&#125;82ab876d1387bfafe46cc1c8a2ef074eae50cb1d</span><br><span class=\"line\">                              默认不设置。。。非必须设置</span><br><span class=\"line\"></span><br><span class=\"line\">;[inet_http_server]         ; 侦听在TCP上的socket，Web Server和远程的supervisorctl都要用到他</span><br><span class=\"line\">                              不设置的话，默认为不开启。非必须设置</span><br><span class=\"line\">;port&#x3D;127.0.0.1:9001        ; 这个是侦听的IP和端口，侦听所有IP用 :9001或*:9001。</span><br><span class=\"line\">                              这个必须设置，只要上面的[inet_http_server]开启了，就必须设置它</span><br><span class=\"line\">;username&#x3D;user              ; 这个和上面的uinx_http_server一个样。非必须设置</span><br><span class=\"line\">;password&#x3D;123               ; 这个也一个样。非必须设置</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]                ;这个主要是定义supervisord这个服务端进程的一些参数的</span><br><span class=\"line\">                              这个必须设置，不设置，supervisor就不用干活了</span><br><span class=\"line\">logfile&#x3D;&#x2F;tmp&#x2F;supervisord.log ; 这个是supervisord这个主进程的日志路径，注意和子进程的日志不搭嘎。</span><br><span class=\"line\">                               默认路径$CWD&#x2F;supervisord.log，$CWD是当前目录。。非必须设置</span><br><span class=\"line\">logfile_maxbytes&#x3D;50MB        ; 这个是上面那个日志文件的最大的大小，当超过50M的时候，会生成一个新的日</span><br><span class=\"line\">                               志文件。当设置为0时，表示不限制文件大小</span><br><span class=\"line\">                               默认值是50M，非必须设置。</span><br><span class=\"line\">logfile_backups&#x3D;10           ; 日志文件保持的数量，supervisor在启动程序时，会自动创建10个buckup文件，用于log rotate</span><br><span class=\"line\">                               当设置为0时，表示不限制文件的数量。</span><br><span class=\"line\">                               默认情况下为10。。。非必须设置</span><br><span class=\"line\">loglevel&#x3D;info                ; 日志级别，有critical, error, warn, info, debug, trace, or blather等</span><br><span class=\"line\">                               默认为info。。。非必须设置项</span><br><span class=\"line\">pidfile&#x3D;&#x2F;tmp&#x2F;supervisord.pid ; supervisord的pid文件路径。</span><br><span class=\"line\">                               默认为$CWD&#x2F;supervisord.pid。。。非必须设置</span><br><span class=\"line\">nodaemon&#x3D;false               ; 如果是true，supervisord进程将在前台运行</span><br><span class=\"line\">                               默认为false，也就是后台以守护进程运行。。。非必须设置</span><br><span class=\"line\">minfds&#x3D;1024                  ; 这个是最少系统空闲的文件描述符，低于这个值supervisor将不会启动。</span><br><span class=\"line\">                               系统的文件描述符在这里设置cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max</span><br><span class=\"line\">                               默认情况下为1024。。。非必须设置</span><br><span class=\"line\">minprocs&#x3D;200                 ; 最小可用的进程描述符，低于这个值supervisor也将不会正常启动。</span><br><span class=\"line\">                              ulimit  -u这个命令，可以查看linux下面用户的最大进程数</span><br><span class=\"line\">                              默认为200。。。非必须设置</span><br><span class=\"line\">;umask&#x3D;022                   ; 进程创建文件的掩码</span><br><span class=\"line\">                               默认为022。。非必须设置项</span><br><span class=\"line\">;user&#x3D;chrism                 ; 这个参数可以设置一个非root用户，当我们以root用户启动supervisord之后。</span><br><span class=\"line\">                               我这里面设置的这个用户，也可以对supervisord进行管理</span><br><span class=\"line\">                               默认情况是不设置。。。非必须设置项</span><br><span class=\"line\">;identifier&#x3D;supervisor       ; 这个参数是supervisord的标识符，主要是给XML_RPC用的。当你有多个</span><br><span class=\"line\">                               supervisor的时候，而且想调用XML_RPC统一管理，就需要为每个</span><br><span class=\"line\">                               supervisor设置不同的标识符了</span><br><span class=\"line\">                               默认是supervisord。。。非必需设置</span><br><span class=\"line\">;directory&#x3D;&#x2F;tmp              ; 这个参数是当supervisord作为守护进程运行的时候，设置这个参数的话，启动</span><br><span class=\"line\">                               supervisord进程之前，会先切换到这个目录</span><br><span class=\"line\">                               默认不设置。。。非必须设置</span><br><span class=\"line\">;nocleanup&#x3D;true              ; 这个参数当为false的时候，会在supervisord进程启动的时候，把以前子进程</span><br><span class=\"line\">                               产生的日志文件(路径为AUTO的情况下)清除掉。有时候咱们想要看历史日志，当</span><br><span class=\"line\">                               然不想日志被清除了。所以可以设置为true</span><br><span class=\"line\">                               默认是false，有调试需求的同学可以设置为true。。。非必须设置</span><br><span class=\"line\">;childlogdir&#x3D;&#x2F;tmp            ; 当子进程日志路径为AUTO的时候，子进程日志文件的存放路径。</span><br><span class=\"line\">                               默认路径是这个东西，执行下面的这个命令看看就OK了，处理的东西就默认路径</span><br><span class=\"line\">                               python -c &quot;import tempfile;print tempfile.gettempdir()&quot;</span><br><span class=\"line\">                               非必须设置</span><br><span class=\"line\">;environment&#x3D;KEY&#x3D;&quot;value&quot;     ; 这个是用来设置环境变量的，supervisord在linux中启动默认继承了linux的</span><br><span class=\"line\">                               环境变量，在这里可以设置supervisord进程特有的其他环境变量。</span><br><span class=\"line\">                               supervisord启动子进程时，子进程会拷贝父进程的内存空间内容。 所以设置的</span><br><span class=\"line\">                               这些环境变量也会被子进程继承。</span><br><span class=\"line\">                               小例子：environment&#x3D;name&#x3D;&quot;haha&quot;,age&#x3D;&quot;hehe&quot;</span><br><span class=\"line\">                               默认为不设置。。。非必须设置</span><br><span class=\"line\">;strip_ansi&#x3D;false            ; 这个选项如果设置为true，会清除子进程日志中的所有ANSI 序列。什么是ANSI</span><br><span class=\"line\">                               序列呢？就是我们的\\n,\\t这些东西。</span><br><span class=\"line\">                               默认为false。。。非必须设置</span><br><span class=\"line\"></span><br><span class=\"line\">; the below section must remain in the config file for RPC</span><br><span class=\"line\">; (supervisorctl&#x2F;web interface) to work, additional interfaces may be</span><br><span class=\"line\">; added by defining them in separate rpcinterface: sections</span><br><span class=\"line\">[rpcinterface:supervisor]    ;这个选项是给XML_RPC用的，当然你如果想使用supervisord或者web server 这</span><br><span class=\"line\">                              个选项必须要开启的</span><br><span class=\"line\">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]              ;这个主要是针对supervisorctl的一些配置</span><br><span class=\"line\">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket</span><br><span class=\"line\">                                        路径，注意这个是和前面的[unix_http_server]对应的</span><br><span class=\"line\">                                        默认值就是unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock。。非必须设置</span><br><span class=\"line\">;serverurl&#x3D;http:&#x2F;&#x2F;127.0.0.1:9001 ; 这个是supervisorctl远程连接supervisord的时候，用到的TCP socket路径</span><br><span class=\"line\">                                   注意这个和前面的[inet_http_server]对应</span><br><span class=\"line\">                                   默认就是http:&#x2F;&#x2F;127.0.0.1:9001。。。非必须项</span><br><span class=\"line\"></span><br><span class=\"line\">;username&#x3D;chris              ; 用户名</span><br><span class=\"line\">                               默认空。。非必须设置</span><br><span class=\"line\">;password&#x3D;123                ; 密码</span><br><span class=\"line\">                              默认空。。非必须设置</span><br><span class=\"line\">;prompt&#x3D;mysupervisor         ; 输入用户名密码时候的提示符</span><br><span class=\"line\">                               默认supervisor。。非必须设置</span><br><span class=\"line\">;history_file&#x3D;~&#x2F;.sc_history  ; 这个参数和shell中的history类似，我们可以用上下键来查找前面执行过的命令</span><br><span class=\"line\">                               默认是no file的。。所以我们想要有这种功能，必须指定一个文件。。。非</span><br><span class=\"line\">                               必须设置</span><br><span class=\"line\"></span><br><span class=\"line\">; The below sample program section shows all possible program subsection values,</span><br><span class=\"line\">; create one or more &#39;real&#39; program: sections to be able to control them under</span><br><span class=\"line\">; supervisor.</span><br><span class=\"line\"></span><br><span class=\"line\">;[program:theprogramname]      ;这个就是咱们要管理的子进程了，&quot;:&quot;后面的是名字，最好别乱写和实际进程</span><br><span class=\"line\">                                有点关联最好。这样的program我们可以设置一个或多个，一个program就是</span><br><span class=\"line\">                                要被管理的一个进程</span><br><span class=\"line\">;command&#x3D;&#x2F;bin&#x2F;cat              ; 这个就是我们的要启动进程的命令路径了，可以带参数</span><br><span class=\"line\">                                例子：&#x2F;home&#x2F;test.py -a &#39;hehe&#39;</span><br><span class=\"line\">                                有一点需要注意的是，我们的command只能是那种在终端运行的进程，不能是</span><br><span class=\"line\">                                守护进程。这个想想也知道了，比如说command&#x3D;service httpd start。</span><br><span class=\"line\">                                httpd这个进程被linux的service管理了，我们的supervisor再去启动这个命令</span><br><span class=\"line\">                                这已经不是严格意义的子进程了。</span><br><span class=\"line\">                                这个是个必须设置的项</span><br><span class=\"line\">;process_name&#x3D;%(program_name)s ; 这个是进程名，如果我们下面的numprocs参数为1的话，就不用管这个参数</span><br><span class=\"line\">                                 了，它默认值%(program_name)s也就是上面的那个program冒号后面的名字，</span><br><span class=\"line\">                                 但是如果numprocs为多个的话，那就不能这么干了。想想也知道，不可能每个</span><br><span class=\"line\">                                 进程都用同一个进程名吧。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;numprocs&#x3D;1                    ; 启动进程的数目。当不为1时，就是进程池的概念，注意process_name的设置</span><br><span class=\"line\">                                 默认为1    。。非必须设置</span><br><span class=\"line\">;directory&#x3D;&#x2F;tmp                ; 进程运行前，会前切换到这个目录</span><br><span class=\"line\">                                 默认不设置。。。非必须设置</span><br><span class=\"line\">;umask&#x3D;022                     ; 进程掩码，默认none，非必须</span><br><span class=\"line\">;priority&#x3D;999                  ; 子进程启动关闭优先级，优先级低的，最先启动，关闭的时候最后关闭</span><br><span class=\"line\">                                 默认值为999 。。非必须设置</span><br><span class=\"line\">;autostart&#x3D;true                ; 如果是true的话，子进程将在supervisord启动后被自动启动</span><br><span class=\"line\">                                 默认就是true   。。非必须设置</span><br><span class=\"line\">;autorestart&#x3D;unexpected        ; 这个是设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected</span><br><span class=\"line\">                                 和true。如果为false的时候，无论什么情况下，都不会被重新启动，</span><br><span class=\"line\">                                 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退</span><br><span class=\"line\">                                 出码的时候，才会被自动重启。当为true的时候，只要子进程挂掉，将会被无</span><br><span class=\"line\">                                 条件的重启</span><br><span class=\"line\">;startsecs&#x3D;1                   ; 这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启</span><br><span class=\"line\">                                 动成功了</span><br><span class=\"line\">                                 默认值为1 。。非必须设置</span><br><span class=\"line\">;startretries&#x3D;3                ; 当进程启动失败后，最大尝试启动的次数。。当超过3次后，supervisor将把</span><br><span class=\"line\">                                 此进程的状态置为FAIL</span><br><span class=\"line\">                                 默认值为3 。。非必须设置</span><br><span class=\"line\">;exitcodes&#x3D;0,2                 ; 注意和上面的的autorestart&#x3D;unexpected对应。。exitcodes里面的定义的</span><br><span class=\"line\">                                 退出码是expected的。</span><br><span class=\"line\">;stopsignal&#x3D;QUIT               ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号</span><br><span class=\"line\">                                  默认为TERM 。。当用设定的信号去干掉进程，退出码会被认为是expected</span><br><span class=\"line\">                                  非必须设置</span><br><span class=\"line\">;stopwaitsecs&#x3D;10               ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息</span><br><span class=\"line\">                                 给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该</span><br><span class=\"line\">                                 子进程发送一个强制kill的信号。</span><br><span class=\"line\">                                 默认为10秒。。非必须设置</span><br><span class=\"line\">;stopasgroup&#x3D;false             ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有</span><br><span class=\"line\">                                 子进程。那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程</span><br><span class=\"line\">                                 有可能会变成孤儿进程。所以咱们可以设置可个选项，把整个该子进程的</span><br><span class=\"line\">                                 整个进程组都干掉。 设置为true的话，一般killasgroup也会被设置为true。</span><br><span class=\"line\">                                 需要注意的是，该选项发送的是stop信号</span><br><span class=\"line\">                                 默认为false。。非必须设置。。</span><br><span class=\"line\">;killasgroup&#x3D;false             ; 这个和上面的stopasgroup类似，不过发送的是kill信号</span><br><span class=\"line\">;user&#x3D;chrism                   ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来</span><br><span class=\"line\">                                 管理该program</span><br><span class=\"line\">                                 默认不设置。。。非必须设置项</span><br><span class=\"line\">;redirect_stderr&#x3D;true          ; 如果为true，则stderr的日志会被写入stdout日志文件中</span><br><span class=\"line\">                                 默认为false，非必须设置</span><br><span class=\"line\">;stdout_logfile&#x3D;&#x2F;a&#x2F;path        ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项。</span><br><span class=\"line\">                                 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方</span><br><span class=\"line\">                                 生成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被</span><br><span class=\"line\">                                 清空。当 redirect_stderr&#x3D;true的时候，sterr也会写进这个日志文件</span><br><span class=\"line\">;stdout_logfile_maxbytes&#x3D;1MB   ; 日志文件最大大小，和[supervisord]中定义的一样。默认为50</span><br><span class=\"line\">;stdout_logfile_backups&#x3D;10     ; 和[supervisord]定义的一样。默认10</span><br><span class=\"line\">;stdout_capture_maxbytes&#x3D;1MB   ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout</span><br><span class=\"line\">                                 发送信息，而supervisor可以根据信息，发送相应的event。</span><br><span class=\"line\">                                 默认为0，为0的时候表达关闭管道。。。非必须项</span><br><span class=\"line\">;stdout_events_enabled&#x3D;false   ; 当设置为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将</span><br><span class=\"line\">                                 触发supervisord发送PROCESS_LOG_STDOUT类型的event</span><br><span class=\"line\">                                 默认为false。。。非必须设置</span><br><span class=\"line\">;stderr_logfile&#x3D;&#x2F;a&#x2F;path        ; 这个东西是设置stderr写的日志路径，当redirect_stderr&#x3D;true。这个就不用</span><br><span class=\"line\">                                 设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中</span><br><span class=\"line\">                                 默认为AUTO，也就是随便找个地存，supervisord重启被清空。。非必须设置</span><br><span class=\"line\">;stderr_logfile_maxbytes&#x3D;1MB   ; 这个出现好几次了，就不重复了</span><br><span class=\"line\">;stderr_logfile_backups&#x3D;10     ; 这个也是</span><br><span class=\"line\">;stderr_capture_maxbytes&#x3D;1MB   ; 这个一样，和stdout_capture一样。 默认为0，关闭状态</span><br><span class=\"line\">;stderr_events_enabled&#x3D;false   ; 这个也是一样，默认为false</span><br><span class=\"line\">;environment&#x3D;A&#x3D;&quot;1&quot;,B&#x3D;&quot;2&quot;       ; 这个是该子进程的环境变量，和别的子进程是不共享的</span><br><span class=\"line\">;serverurl&#x3D;AUTO                ;</span><br><span class=\"line\"></span><br><span class=\"line\">; The below sample eventlistener section shows all possible</span><br><span class=\"line\">; eventlistener subsection values, create one or more &#39;real&#39;</span><br><span class=\"line\">; eventlistener: sections to be able to handle event notifications</span><br><span class=\"line\">; sent by supervisor.</span><br><span class=\"line\"></span><br><span class=\"line\">;[eventlistener:theeventlistenername] ;这个东西其实和program的地位是一样的，也是suopervisor启动的子进</span><br><span class=\"line\">                                       程，不过它干的活是订阅supervisord发送的event。他的名字就叫</span><br><span class=\"line\">                                       listener了。我们可以在listener里面做一系列处理，比如报警等等</span><br><span class=\"line\">                                       楼主这两天干的活，就是弄的这玩意</span><br><span class=\"line\">;command&#x3D;&#x2F;bin&#x2F;eventlistener    ; 这个和上面的program一样，表示listener的可执行文件的路径</span><br><span class=\"line\">;process_name&#x3D;%(program_name)s ; 这个也一样，进程名，当下面的numprocs为多个的时候，才需要。否则默认就</span><br><span class=\"line\">                                 OK了</span><br><span class=\"line\">;numprocs&#x3D;1                    ; 相同的listener启动的个数</span><br><span class=\"line\">;events&#x3D;EVENT                  ; event事件的类型，也就是说，只有写在这个地方的事件类型。才会被发送</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;buffer_size&#x3D;10                ; 这个是event队列缓存大小，单位不太清楚，楼主猜测应该是个吧。当buffer</span><br><span class=\"line\">                                 超过10的时候，最旧的event将会被清除，并把新的event放进去。</span><br><span class=\"line\">                                 默认值为10。。非必须选项</span><br><span class=\"line\">;directory&#x3D;&#x2F;tmp                ; 进程执行前，会切换到这个目录下执行</span><br><span class=\"line\">                                 默认为不切换。。。非必须</span><br><span class=\"line\">;umask&#x3D;022                     ; 淹没，默认为none，不说了</span><br><span class=\"line\">;priority&#x3D;-1                   ; 启动优先级，默认-1，也不扯了</span><br><span class=\"line\">;autostart&#x3D;true                ; 是否随supervisord启动一起启动，默认true</span><br><span class=\"line\">;autorestart&#x3D;unexpected        ; 是否自动重启，和program一个样，分true,false,unexpected等，注意</span><br><span class=\"line\">                                  unexpected和exitcodes的关系</span><br><span class=\"line\">;startsecs&#x3D;1                   ; 也是一样，进程启动后跑了几秒钟，才被认定为成功启动，默认1</span><br><span class=\"line\">;startretries&#x3D;3                ; 失败最大尝试次数，默认3</span><br><span class=\"line\">;exitcodes&#x3D;0,2                 ; 期望或者说预料中的进程退出码，</span><br><span class=\"line\">;stopsignal&#x3D;QUIT               ; 干掉进程的信号，默认为TERM，比如设置为QUIT，那么如果QUIT来干这个进程</span><br><span class=\"line\">                                 那么会被认为是正常维护，退出码也被认为是expected中的</span><br><span class=\"line\">;stopwaitsecs&#x3D;10               ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class=\"line\">;stopasgroup&#x3D;false             ; send stop signal to the UNIX process group (default false)</span><br><span class=\"line\">;killasgroup&#x3D;false             ; SIGKILL the UNIX process group (def false)</span><br><span class=\"line\">;user&#x3D;chrism                   ;设置普通用户，可以用来管理该listener进程。</span><br><span class=\"line\">                                默认为空。。非必须设置</span><br><span class=\"line\">;redirect_stderr&#x3D;true          ; 为true的话，stderr的log会并入stdout的log里面</span><br><span class=\"line\">                                默认为false。。。非必须设置</span><br><span class=\"line\">;stdout_logfile&#x3D;&#x2F;a&#x2F;path        ; 这个不说了，好几遍了</span><br><span class=\"line\">;stdout_logfile_maxbytes&#x3D;1MB   ; 这个也是</span><br><span class=\"line\">;stdout_logfile_backups&#x3D;10     ; 这个也是</span><br><span class=\"line\">;stdout_events_enabled&#x3D;false   ; 这个其实是错的，listener是不能发送event</span><br><span class=\"line\">;stderr_logfile&#x3D;&#x2F;a&#x2F;path        ; 这个也是</span><br><span class=\"line\">;stderr_logfile_maxbytes&#x3D;1MB   ; 这个也是</span><br><span class=\"line\">;stderr_logfile_backups        ; 这个不说了</span><br><span class=\"line\">;stderr_events_enabled&#x3D;false   ; 这个也是错的，listener不能发送event</span><br><span class=\"line\">;environment&#x3D;A&#x3D;&quot;1&quot;,B&#x3D;&quot;2&quot;       ; 这个是该子进程的环境变量</span><br><span class=\"line\">                                 默认为空。。。非必须设置</span><br><span class=\"line\">;serverurl&#x3D;AUTO                ; override serverurl computation (childutils)</span><br><span class=\"line\"></span><br><span class=\"line\">; The below sample group section shows all possible group values,</span><br><span class=\"line\">; create one or more &#39;real&#39; group: sections to create &quot;heterogeneous&quot;</span><br><span class=\"line\">; process groups.</span><br><span class=\"line\"></span><br><span class=\"line\">;[group:thegroupname]  ;这个东西就是给programs分组，划分到组里面的program。我们就不用一个一个去操作了</span><br><span class=\"line\">                         我们可以对组名进行统一的操作。 注意：program被划分到组里面之后，就相当于原来</span><br><span class=\"line\">                         的配置从supervisor的配置文件里消失了。。。supervisor只会对组进行管理，而不再</span><br><span class=\"line\">                         会对组里面的单个program进行管理了</span><br><span class=\"line\">;programs&#x3D;progname1,progname2  ; 组成员，用逗号分开</span><br><span class=\"line\">                                 这个是个必须的设置项</span><br><span class=\"line\">;priority&#x3D;999                  ; 优先级，相对于组和组之间说的</span><br><span class=\"line\">                                 默认999。。非必须选项</span><br><span class=\"line\"></span><br><span class=\"line\">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class=\"line\">; setting can list multiple files (separated by whitespace or</span><br><span class=\"line\">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class=\"line\">; interpreted as relative to this file.  Included files *cannot*</span><br><span class=\"line\">; include files themselves.</span><br><span class=\"line\"></span><br><span class=\"line\">;[include]                         ;这个东西挺有用的，当我们要管理的进程很多的时候，写在一个文件里面</span><br><span class=\"line\">                                    就有点大了。我们可以把配置信息写到多个文件中，然后include过来</span><br><span class=\"line\">;files &#x3D; relative&#x2F;directory&#x2F;*.ini</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">OK,上面提到的非必须设置项，一般来说，都是有默认值的，可以根据自己的需要去设置。。。如果不设置的，supervisor也能用起来</span><br><span class=\"line\"></span><br><span class=\"line\">这一篇先总结到这里了，下一篇搞搞event和xml_rpc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.toutiao.com/a6714650171180843524/?tt_from=weixin&utm_campaign=client_share&wxshare_count=1&timestamp=1563958876&app=news_article&utm_source=weixin&utm_medium=toutiao_android&req_id=201907241701150100230730859727DA2&group_id=6714650171180843524\">原文链接</a></p>\n","categories":["Linux web"],"tags":["supervisor"]},{"title":"nohup详解 Python不挂断运行后台程序","url":"/2021/05/07/Linux%20web/nohup%20%E8%AF%A6%E8%A7%A3%20Python%E4%B8%8D%E6%8C%82%E6%96%AD%E8%BF%90%E8%A1%8C%E5%90%8E%E5%8F%B0%E7%A8%8B%E5%BA%8F/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"nohup-详解\"><a href=\"#nohup-详解\" class=\"headerlink\" title=\"nohup 详解\"></a>nohup 详解</h1><h2 id=\"nohup\"><a href=\"#nohup\" class=\"headerlink\" title=\"nohup\"></a>nohup</h2><p>nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。</p>\n<p>nohup 是 no hang up 的缩写，就是不挂断的意思。</p>\n<p>nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p>\n<p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>1. nohup command &gt; myout.file 2&gt;&amp;1 &amp;   </p>\n<p>在上面的例子中，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p>\n<p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p>\n<p>2. 0 22 * * * /usr/bin/python /home/pu/download_pdf/download_dfcf_pdf_to_oss.py &gt; /home/pu/download_pdf/download_dfcf_pdf_to_oss.log 2&gt;&amp;1</p>\n<p>这是放在crontab中的定时任务，晚上22点时候怕这个任务，启动这个python的脚本，并把日志写在download_dfcf_pdf_to_oss.log文件中</p>\n<h2 id=\"nohup和-amp-的区别\"><a href=\"#nohup和-amp-的区别\" class=\"headerlink\" title=\"nohup和&amp;的区别\"></a>nohup和&amp;的区别</h2><p>&amp; ： 指在后台运行</p>\n<p>nohup ： 不挂断的运行，注意并没有后台运行的功能，，就是指，用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&amp;才是后台运行</p>\n<hr>\n<p>&amp;是指在后台运行，但当用户推出(挂起)的时候，命令自动也跟着退出</p>\n<p>那么，我们可以巧妙的吧他们结合起来用就是<br>nohup COMMAND &amp;<br>这样就能使命令永久的在后台执行</p>\n<p>例如：</p>\n<p>1. sh test.sh &amp;  <br>将sh test.sh任务放到后台 ，即使关闭xshell退出当前session依然继续运行，但<strong>标准输出和标准错误信息会丢失（缺少的日志的输出）</strong></p>\n<p>将sh test.sh任务放到后台 ，关闭xshell，对应的任务也跟着停止。<br>2. nohup sh test.sh  <br>将sh test.sh任务放到后台，关闭标准输入，<strong>终端不再能够接收任何输入（标准输入）</strong>，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。<br>3. nohup sh test.sh  &amp; <br>将sh test.sh任务放到后台，但是依然可以使用标准输入，<strong>终端能够接收任何输入</strong>，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/u011095110/article/details/78666833\">https://blog.csdn.net/u011095110/article/details/78666833</a></p>\n<p><a href=\"https://baike.baidu.com/item/nohup/5683841\">https://baike.baidu.com/item/nohup/5683841</a></p>\n<p><a href=\"https://www.cnblogs.com/jinxiao-pu/p/9131057.html\">原文链接</a></p>\n","categories":["Linux web"],"tags":["nohup"]},{"title":"批量关闭linux进程","url":"/2021/05/07/Linux%20web/%E6%89%B9%E9%87%8F%E5%85%B3%E9%97%ADlinux%E8%BF%9B%E7%A8%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"批量关闭linux进程\"><a href=\"#批量关闭linux进程\" class=\"headerlink\" title=\"批量关闭linux进程\"></a>批量关闭linux进程</h1><p>你是否经常遇到需要批量杀死很多进程的情况？而你是否还在一个一个的<code>kill</code>。</p>\n<p>接下来我教你一个小秘诀吧。</p>\n<p>1、首先我们查看当前的进程列表。</p>\n<p>我们以查看<code>nginx</code>进程为例，通过<code>ps -ef</code>显示当前机器运行的所有进程，再通过<code>grep nginx</code>过滤出包含<code>nginx</code>字符串的进程。完成命令为<code>ps -ef|grep nginx</code>。<br><img src=\"https://user-images.githubusercontent.com/28568478/117406501-ba665080-af3f-11eb-8030-bf89ef6e6b26.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n<p>2、获取进程ID<br>采用<code>awk</code>工具提取进程ID。<code>awk</code>是一种很棒的语言，适合文本处理和报表生成。在这里我们通过<code>awk</code>处理第一步中得到的进程列表，提取进程ID。完成命令为<code>ps -ef|grep nginx|awk &#39;&#123;print $2&#125;&#39;</code><br><img src=\"https://user-images.githubusercontent.com/28568478/117406514-bf2b0480-af3f-11eb-86ae-0c8dfd059eaf.png\" alt=\"image\"></p>\n<p>3、批量kill<br><code>xargs</code> 是一条 Unix 和类 Unix 操作系统的常用命令；它的作用是将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。接下来将使用<code>xargs</code>把第二步中得到的进程ID列表传递给<code>kill</code>命令。完成命令为<code>ps -ef|grep nginx|awk &#39;&#123;print $2&#125;&#39;|xargs kill -9</code>。<br><img src=\"https://user-images.githubusercontent.com/28568478/117406622-e4b80e00-af3f-11eb-980b-64844240af0b.png\" alt=\"image\"></p>\n<p>OK。大功告成，现在可以批量\b<code>kill</code>进程了。</p>\n","categories":["Linux web"],"tags":["进程"]},{"title":"查找日志","url":"/2021/05/07/Linux%20web/%E6%9F%A5%E6%89%BE%E6%97%A5%E5%BF%97/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function latest_log()&#123;</span><br><span class=\"line\">    for i in $(ls -th $1); do</span><br><span class=\"line\">        if [[ -f $1$i ]]; then</span><br><span class=\"line\">            log&#x3D;$i</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    done</span><br><span class=\"line\">    echo $log</span><br><span class=\"line\">    tail -f $1$log</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Linux web"],"tags":["shell","日志"]},{"title":"证书的生成","url":"/2021/05/07/Linux%20web/%E8%AF%81%E4%B9%A6%E7%9A%84%E7%94%9F%E6%88%90/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>我们通过-in参数指定传入的文件名称,而-out文件指定输出的文件名称,而-nodes参数表示不对私钥进行加密</p>\n<h3 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h3><p>生成cert:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -clcerts -nokeys -out cert.pem  -in  cert.p12</span><br></pre></td></tr></table></figure>\n<p>生成key:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -nocerts -out key.pem  -in  key.p12</span><br></pre></td></tr></table></figure>\n\n<p>取消设置key时的密码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsa -in  key.pem  -out key.unencrypted.pem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法2（常用方法）：\"><a href=\"#方法2（常用方法）：\" class=\"headerlink\" title=\"方法2（常用方法）：\"></a>方法2（常用方法）：</h3><p>默认没有密码生成cert:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in   证书.p12    -nokeys  -out   cert.pem  -nodes</span><br></pre></td></tr></table></figure>\n<p>生成key:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl pkcs12   -in  证书.p12   -nocerts -out key.pem   -nodes</span><br></pre></td></tr></table></figure>\n<p>注意：解压证书时万不可设置密码</p>\n<p>在终端测试证书是否可正常使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl   s_client  -connect   gateway.push.apple.com:2195  -cert  cert.pem -key   key.pem</span><br></pre></td></tr></table></figure>\n","categories":["Linux web"],"tags":["证书"]},{"title":"Docker volume 挂载时文件或文件夹不存在","url":"/2021/06/11/docker/Docker%20volume%20%E6%8C%82%E8%BD%BD%E6%97%B6%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8D%E5%AD%98%E5%9C%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、背景介绍\"><a href=\"#一、背景介绍\" class=\"headerlink\" title=\"一、背景介绍\"></a>一、背景介绍</h3><p>docker volume 可以使我们在启动docker容器时，动态的挂载一些文件（如配置文件）, 以覆盖镜像中原有的文件，但是，挂载一个主机上尚不存在的文件夹或者文件到容器中会怎样呢？LZ在工作中就遇到了这样的问题，故自己实践了一下，记录实验结果如下：</p>\n<h3 id=\"二、文件夹挂载\"><a href=\"#二、文件夹挂载\" class=\"headerlink\" title=\"二、文件夹挂载\"></a>二、文件夹挂载</h3><p>docker在文件夹挂载上的行为是统一的，具体表现为：</p>\n<ul>\n<li>若文件夹不存在，则先创建出文件夹（若为多层文件夹，则递归创建）</li>\n<li>用host上的文件夹内容覆盖container中的文件夹内容</li>\n</ul>\n<p><code>docker run -v /path-to-folder/A:/path-to-folder/B test-image</code></p>\n<h4 id=\"详细说明如下：\"><a href=\"#详细说明如下：\" class=\"headerlink\" title=\"详细说明如下：\"></a>详细说明如下：</h4><span id=\"more\"></span>\n<h5 id=\"1、host上文件夹存在，且非空\"><a href=\"#1、host上文件夹存在，且非空\" class=\"headerlink\" title=\"1、host上文件夹存在，且非空\"></a>1、host上文件夹存在，且非空</h5><table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">存在的非空文件夹A</td>\n<td align=\"left\">不存在的文件夹B</td>\n<td align=\"left\">先在contanier中创建文件夹B，再将A文件夹中的所有文件copy到B中</td>\n</tr>\n<tr>\n<td align=\"left\">存在的非空文件夹A</td>\n<td align=\"left\">存在的非空文件夹B</td>\n<td align=\"left\">先将container中文件夹B的原有内容清空，再将A中文件copy到B中</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>无论container中的文件夹B是否存在， A都会完全覆盖B的内容</p>\n</blockquote>\n<h5 id=\"2、host上文件夹存在，但为空\"><a href=\"#2、host上文件夹存在，但为空\" class=\"headerlink\" title=\"2、host上文件夹存在，但为空\"></a>2、host上文件夹存在，但为空</h5><table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">存在的空文件夹A</td>\n<td align=\"left\">存在的非空文件夹B</td>\n<td align=\"left\">container中文件夹B的内容被清空</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>container中对应的文件夹内容被清空</p>\n</blockquote>\n<h5 id=\"3、host上文件夹不存在\"><a href=\"#3、host上文件夹不存在\" class=\"headerlink\" title=\"3、host上文件夹不存在\"></a>3、host上文件夹不存在</h5><table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">不存在的文件夹A</td>\n<td align=\"left\">存在的非空文件夹B</td>\n<td align=\"left\">在host上创建文件夹A，container中文件夹B的内容被清空</td>\n</tr>\n<tr>\n<td align=\"left\">不存在的文件夹A/B/C</td>\n<td align=\"left\">存在的非空文件夹B</td>\n<td align=\"left\">在host上创建文件夹A/B/C，container中文件夹B的内容被清空</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>container中对应的文件夹内容被清空</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><pre><code>host上文件夹一定会覆盖container中文件夹：\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">文件夹不存在/文件夹存在但为空</td>\n<td align=\"left\">文件夹不存在/存在但为空/存在且不为空</td>\n<td align=\"left\">container中文件被覆盖（清空）</td>\n</tr>\n<tr>\n<td align=\"left\">文件夹存在且不为空</td>\n<td align=\"left\">文件夹不存在/存在但为空/存在且不为空</td>\n<td align=\"left\">container中文件夹内容被覆盖（原内容清空， 覆盖为host上文件夹内容）</td>\n</tr>\n</tbody></table>\n<h3 id=\"三、文件挂载\"><a href=\"#三、文件挂载\" class=\"headerlink\" title=\"三、文件挂载\"></a>三、文件挂载</h3><p>文件挂载与文件夹挂载最大的不同点在于：</p>\n<ul>\n<li>docker 禁止用主机上不存在的文件挂载到container中已经存在的文件</li>\n<li>文件挂载不会对同一文件夹下的其他文件产生任何影响</li>\n</ul>\n<p>除此之外， 其覆盖行为与文件夹挂载一致，即：</p>\n<ul>\n<li>用host上的文件的内容覆盖container中的文件的内容</li>\n</ul>\n<p><code>docker run -v /path-to-folder/non-existent-config.js:/path-to-folder/config.js test-image # forbidden</code></p>\n<h5 id=\"详细说明如下：-1\"><a href=\"#详细说明如下：-1\" class=\"headerlink\" title=\"详细说明如下：\"></a>详细说明如下：</h5><h5 id=\"1、host上文件不存在\"><a href=\"#1、host上文件不存在\" class=\"headerlink\" title=\"1、host上文件不存在\"></a>1、host上文件不存在</h5><table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">不存在的文件configA.js</td>\n<td align=\"left\">已经存在的文件congfigB.js</td>\n<td align=\"left\">报错，Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type. 同时会在host上生成两个空目录 configA.js 和 configB.js, 但是container无法启动</td>\n</tr>\n</tbody></table>\n<h5 id=\"2、host上文件存在\"><a href=\"#2、host上文件存在\" class=\"headerlink\" title=\"2、host上文件存在\"></a>2、host上文件存在</h5><table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">存在的文件configA.js</td>\n<td align=\"left\">存在的文件congfigB.js</td>\n<td align=\"left\">container中文件名configB.js保持不变,但是文件内容被congfigA.js的内容覆盖了</td>\n</tr>\n<tr>\n<td align=\"left\">存在的文件configA.js</td>\n<td align=\"left\">不存在的文件congfigB.js</td>\n<td align=\"left\">container中新建一个文件configB.js，其内容为configA.js的文件内容， configB.js所在文件下的所有其他文件维持不变</td>\n</tr>\n</tbody></table>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结:\"></a>总结:</h3><pre><code>host上文件一定会覆盖container中文件夹\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host</th>\n<th align=\"left\">container</th>\n<th align=\"left\">mount result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">不存在的文件</td>\n<td align=\"left\">已经存在的文件</td>\n<td align=\"left\">禁止行为</td>\n</tr>\n<tr>\n<td align=\"left\">存在的文件</td>\n<td align=\"left\">不存在的文件/已经存在的文件</td>\n<td align=\"left\">新增/覆盖 （若目录不存在则会创建目录）</td>\n</tr>\n</tbody></table>\n<h3 id=\"四、结论\"><a href=\"#四、结论\" class=\"headerlink\" title=\"四、结论:\"></a>四、结论:</h3><h3 id=\"文件夹挂载\"><a href=\"#文件夹挂载\" class=\"headerlink\" title=\"文件夹挂载\"></a>文件夹挂载</h3><ul>\n<li>允许不存在的文件夹或者存在的空文件夹挂载进container, container中对应的文件夹将被清空</li>\n<li>非空文件夹挂载进container将会覆盖container中原有文件夹<h3 id=\"文件挂载\"><a href=\"#文件挂载\" class=\"headerlink\" title=\"文件挂载\"></a>文件挂载</h3></li>\n<li>禁止将不存在的文件挂载进container中已经存在的文件上</li>\n<li>存在的文件挂载进container中将会覆盖container中对应的文件， 若文件不存在则新建<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3></li>\n<li>从上面的分析可知，文件夹挂载以整个文件夹为单位进行文件覆盖，故可在需要将大量文件挂载进container时使用，另外，如果挂载一个空文件夹或者不存在的文件夹，一般是做逆向使用： 即容器启动后，可能会在容器内挂载点的文件夹下生成一些文件（如日志），此时，在对应的host上的文件夹内就能直接看到。</li>\n<li>文件挂载由于只会覆盖单个文件而不会影响container中同一文件夹下的其他文件，常常被用来挂载配置文件，以在运行时，动态的修改默认配置。</li>\n</ul>\n<p>参考：<br><a href=\"https://blog.csdn.net/viafcccy/article/details/115514431\">docker-compose:数据卷volumes挂载规则</a><br><a href=\"https://blog.csdn.net/weixin_33953249/article/details/88759709\">Docker volume 挂载时文件或文件夹不存在</a></p>\n","categories":["docker"],"tags":["docker","volumes"]},{"title":"aws 安装docker","url":"/2021/05/07/docker/aws%20%E5%AE%89%E8%A3%85docker/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>1、<a href=\"https://docs.aws.amazon.com/zh_cn/AmazonECS/latest/developerguide/docker-basics.html\">aws官方教程</a></p>\n<p>2、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum update -y</span><br></pre></td></tr></table></figure>\n<p>发现报错<br><img src=\"https://user-images.githubusercontent.com/28568478/117409227-8a20b100-af43-11eb-977b-29b69dc8895e.png\" alt=\"image\"></p>\n<p>安装提示进行解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --disable docker-ce-stable</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>3、安装官方文档进行安装docker 启动docker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum update -y</span><br><span class=\"line\"></span><br><span class=\"line\">sudo amazon-linux-extras install docker</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;bin&#x2F;systemctl start docker.service</span><br><span class=\"line\"># 原本使用命令 sudo service docker start   实际提示  Redirecting to &#x2F;bin&#x2F;systemctl start docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">sudo usermod -a -G docker ec2-user 或者 sudo gpasswd -a $&#123;USER&#125; docker  都可以</span><br><span class=\"line\"></span><br><span class=\"line\"># 然后退出服务器重新登录服务器</span><br><span class=\"line\"></span><br><span class=\"line\">docker info # 发现docker安装完成</span><br></pre></td></tr></table></figure>\n\n\n<p>4、 docker-compose 安装<br><a href=\"https://github.com/docker/compose\">docker-compose github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.22.0&#x2F;docker-compose-$(uname -s)-$(uname -m) -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装最新版本</span><br><span class=\"line\">sudo curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;latest&#x2F;download&#x2F;docker-compose-$(uname -s)-$(uname -m) -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改权限</span><br><span class=\"line\">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"># 验证是否安装成功</span><br><span class=\"line\">docker-compose version</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意-：\"><a href=\"#注意-：\" class=\"headerlink\" title=\"注意 ：\"></a>注意 ：</h4><pre><code>      如果不退出服务器再次登录  docker info 会报错无权限\n</code></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5818745-630d6164d4278a6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<h3 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h3><p><a href=\"https://gist.github.com/npearce/6f3c7826c7499587f00957fee62f8ee9\">https://gist.github.com/npearce/6f3c7826c7499587f00957fee62f8ee9</a></p>\n","categories":["docker"],"tags":["docker","aws"]},{"title":"docker 命令","url":"/2021/05/07/docker/docker%20%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"一、关于镜像\"><a href=\"#一、关于镜像\" class=\"headerlink\" title=\"一、关于镜像\"></a>一、关于镜像</h1><h3 id=\"1、删除所有镜像\"><a href=\"#1、删除所有镜像\" class=\"headerlink\" title=\"1、删除所有镜像\"></a>1、删除所有镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi &#96;docker images -q&#96;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、按条件删除镜像\"><a href=\"#2、按条件删除镜像\" class=\"headerlink\" title=\"2、按条件删除镜像\"></a>2、按条件删除镜像</h3><ul>\n<li>没有打标签<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi &#96;docker images -q | awk &#39;&#x2F;^&lt;none&gt;&#x2F; &#123; print $3 &#125;&#39;&#96;</span><br></pre></td></tr></table></figure></li>\n<li>镜像名包含关键字<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi --force &#96;docker images | grep doss-api | awk &#39;&#123;print $3&#125;&#39;&#96;    &#x2F;&#x2F;其中doss-api为关键字</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、关于容器\"><a href=\"#二、关于容器\" class=\"headerlink\" title=\"二、关于容器\"></a>二、关于容器</h1></li>\n</ul>\n<h3 id=\"1、查看运行容器\"><a href=\"#1、查看运行容器\" class=\"headerlink\" title=\"1、查看运行容器\"></a>1、查看运行容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、查看所有容器-和-列出所有容器ID\"><a href=\"#2、查看所有容器-和-列出所有容器ID\" class=\"headerlink\" title=\"2、查看所有容器 和 列出所有容器ID\"></a>2、查看所有容器 和 列出所有容器ID</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看所有容器</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有容器ID</span><br><span class=\"line\">docker ps -aq</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、进入容器\"><a href=\"#3、进入容器\" class=\"headerlink\" title=\"3、进入容器\"></a>3、进入容器</h3><ul>\n<li>其中字符串为容器ID:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it d27bd3008ad9 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、停用全部运行中的容器\"><a href=\"#4、停用全部运行中的容器\" class=\"headerlink\" title=\"4、停用全部运行中的容器:\"></a>4、停用全部运行中的容器:</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、删除全部容器：\"><a href=\"#5、删除全部容器：\" class=\"headerlink\" title=\"5、删除全部容器：\"></a>5、删除全部容器：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、一条命令实现停用并删除容器：\"><a href=\"#6、一条命令实现停用并删除容器：\" class=\"headerlink\" title=\"6、一条命令实现停用并删除容器：\"></a>6、一条命令实现停用并删除容器：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、其他命令\"><a href=\"#三、其他命令\" class=\"headerlink\" title=\"三、其他命令\"></a>三、其他命令</h1><p>具体详见参考文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看 docker 占用的资源</span><br><span class=\"line\">在进行资源清理之前我们有必要搞清楚 docker 都占用了哪些系统的资源。这需要综合使用不同的命令来完成。</span><br><span class=\"line\">docker container ls：默认只列出正在运行的容器，-a 选项会列出包括停止的所有容器。</span><br><span class=\"line\">docker image ls：列出镜像信息，-a 选项会列出 intermediate 镜像(就是其它镜像依赖的层)。</span><br><span class=\"line\">docker volume ls：列出数据卷。</span><br><span class=\"line\">docker network ls：列出 network。</span><br><span class=\"line\">docker info：显示系统级别的信息，比如容器和镜像的数量等。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Docker 提供了方便的 docker system prune 命令来删除那些已停止的容器、dangling 镜像、未被容器引用的 network 和构建过程中的 cache：</span><br><span class=\"line\">docker system prune</span><br><span class=\"line\">安全起见，这个命令默认不会删除那些未被任何容器引用的数据卷，如果需要同时删除这些数据卷，你需要显式的指定 --volumns 参数。比如你可能想要执行下面的命令：</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker system prune --all --force --volumes</span><br><span class=\"line\">这次不仅会删除数据卷，而且连确认的过程都没有了！注意，使用 --all 参数后会删除所有未被引用的镜像而不仅仅是 dangling 镜像。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>参考：<a href=\"https://www.cnblogs.com/sparkdev/p/9177283.html\">https://www.cnblogs.com/sparkdev/p/9177283.html</a></p>\n","categories":["docker"],"tags":["docker 命令"]},{"title":"docker-compose 配置参数详解","url":"/2021/08/16/docker/docker-compose%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"Compose和Docker兼容性：\"><a href=\"#Compose和Docker兼容性：\" class=\"headerlink\" title=\"Compose和Docker兼容性：\"></a>Compose和Docker兼容性：</h3><pre><code>Compose 文件格式有3个版本,分别为1, 2.x 和 3.x\n目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本\n</code></pre>\n<span id=\"more\"></span>\n<h3 id=\"常用参数：\"><a href=\"#常用参数：\" class=\"headerlink\" title=\"常用参数：\"></a>常用参数：</h3><pre><code>version           # 指定 compose 文件的版本\nservices          # 定义所有的 service 信息, services 下面的第一级别的 key 既是一个 service 的名称\n\n    build                 # 指定包含构建上下文的路径, 或作为一个对象，该对象具有 context 和指定的 dockerfile 文件以及 args 参数值\n        context               # context: 指定 Dockerfile 文件所在的路径\n        dockerfile            # dockerfile: 指定 context 指定的目录下面的 Dockerfile 的名称(默认为 Dockerfile)\n        args                  # args: Dockerfile 在 build 过程中需要的参数 (等同于 docker container build --build-arg 的作用)\n        cache_from            # v3.2中新增的参数, 指定缓存的镜像列表 (等同于 docker container build --cache_from 的作用)\n        labels                # v3.3中新增的参数, 设置镜像的元数据 (等同于 docker container build --labels 的作用)\n        shm_size              # v3.5中新增的参数, 设置容器 /dev/shm 分区的大小 (等同于 docker container build --shm-size 的作用)\n\n    command               # 覆盖容器启动后默认执行的命令, 支持 shell 格式和 [] 格式\n\n    configs               # 不知道怎么用\n\n    cgroup_parent         # 不知道怎么用\n\n    container_name        # 指定容器的名称 (等同于 docker run --name 的作用)\n\n    credential_spec       # 不知道怎么用\n\n    deploy                # v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm\n        endpoint_mode         # v3.3 版本中新增的功能, 指定服务暴露的方式\n            vip                   # Docker 为该服务分配了一个虚拟 IP(VIP), 作为客户端的访问服务的地址\n            dnsrr                 # DNS轮询, Docker 为该服务设置 DNS 条目, 使得服务名称的 DNS 查询返回一个 IP 地址列表, 客户端直接访问其中的一个地址\n        labels                # 指定服务的标签，这些标签仅在服务上设置\n        mode                  # 指定 deploy 的模式\n            global                # 每个集群节点都只有一个容器\n            replicated            # 用户可以指定集群中容器的数量(默认)\n        placement             # 不知道怎么用\n        replicas              # deploy 的 mode 为 replicated 时, 指定容器副本的数量\n        resources             # 资源限制\n            limits                # 设置容器的资源限制\n                cpus: &quot;0.5&quot;           # 设置该容器最多只能使用 50% 的 CPU\n                memory: 50M           # 设置该容器最多只能使用 50M 的内存空间\n            reservations          # 设置为容器预留的系统资源(随时可用)\n                cpus: &quot;0.2&quot;           # 为该容器保留 20% 的 CPU\n                memory: 20M           # 为该容器保留 20M 的内存空间\n        restart_policy        # 定义容器重启策略, 用于代替 restart 参数\n            condition             # 定义容器重启策略(接受三个参数)\n                none                  # 不尝试重启\n                on-failure            # 只有当容器内部应用程序出现问题才会重启\n                any                   # 无论如何都会尝试重启(默认)\n            delay                 # 尝试重启的间隔时间(默认为 0s)\n            max_attempts          # 尝试重启次数(默认一直尝试重启)\n            window                # 检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s)\n        update_config         # 用于配置滚动更新配置\n            parallelism           # 一次性更新的容器数量\n            delay                 # 更新一组容器之间的间隔时间\n            failure_action        # 定义更新失败的策略\n                continue              # 继续更新\n                rollback              # 回滚更新\n                pause                 # 暂停更新(默认)\n            monitor               # 每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0)\n            max_failure_ratio     # 回滚期间容忍的失败率(默认值为0)\n            order                 # v3.4 版本中新增的参数, 回滚期间的操作顺序\n                stop-first            #旧任务在启动新任务之前停止(默认)\n                start-first           #首先启动新任务, 并且正在运行的任务暂时重叠\n        rollback_config       # v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略\n            parallelism           # 一次回滚的容器数, 如果设置为0, 则所有容器同时回滚\n            delay                 # 每个组回滚之间的时间间隔(默认为0)\n            failure_action        # 定义回滚失败的策略\n                continue              # 继续回滚\n                pause                 # 暂停回滚\n            monitor               # 每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0)\n            max_failure_ratio     # 回滚期间容忍的失败率(默认值0)\n            order                 # 回滚期间的操作顺序\n                stop-first            # 旧任务在启动新任务之前停止(默认)\n                start-first           # 首先启动新任务, 并且正在运行的任务暂时重叠\n\n        注意：\n            支持 docker-compose up 和 docker-compose run 但不支持 docker stack deploy 的子选项\n            security_opt  container_name  devices  tmpfs  stop_signal  links    cgroup_parent\n            network_mode  external_links  restart  build  userns_mode  sysctls\n\n    devices               # 指定设备映射列表 (等同于 docker run --device 的作用)\n\n    depends_on            # 定义容器启动顺序 (此选项解决了容器之间的依赖关系， 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项)\n        示例：\n            docker-compose up 以依赖顺序启动服务，下面例子中 redis 和 db 服务在 web 启动前启动\n            默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系\n            version: &#39;3&#39;\n            services:\n                web:\n                    build: .\n                    depends_on:\n                        - db\n                        - redis\n                redis:\n                    image: redis\n                db:\n                    image: postgres\n\n    dns                   # 设置 DNS 地址(等同于 docker run --dns 的作用)\n\n    dns_search            # 设置 DNS 搜索域(等同于 docker run --dns-search 的作用)\n\n    tmpfs                 # v2 版本以上, 挂载目录到容器中, 作为容器的临时文件系统(等同于 docker run --tmpfs 的作用, 在使用 swarm 部署时将忽略该选项)\n\n    entrypoint            # 覆盖容器的默认 entrypoint 指令 (等同于 docker run --entrypoint 的作用)\n\n    env_file              # 从指定文件中读取变量设置为容器中的环境变量, 可以是单个值或者一个文件列表, 如果多个文件中的变量重名则后面的变量覆盖前面的变量, environment 的值覆盖 env_file 的值\n        文件格式：\n            RACK_ENV=development\n\n    environment           # 设置环境变量， environment 的值可以覆盖 env_file 的值 (等同于 docker run --env 的作用)\n\n    expose                # 暴露端口, 但是不能和宿主机建立映射关系, 类似于 Dockerfile 的 EXPOSE 指令\n\n    external_links        # 连接不在 docker-compose.yml 中定义的容器或者不在 compose 管理的容器(docker run 启动的容器, 在 v3 版本中使用 swarm 部署时将忽略该选项)\n\n    extra_hosts           # 添加 host 记录到容器中的 /etc/hosts 中 (等同于 docker run --add-host 的作用)\n\n    healthcheck           # v2.1 以上版本, 定义容器健康状态检查, 类似于 Dockerfile 的 HEALTHCHECK 指令\n        test                  # 检查容器检查状态的命令, 该选项必须是一个字符串或者列表, 第一项必须是 NONE, CMD 或 CMD-SHELL, 如果其是一个字符串则相当于 CMD-SHELL 加该字符串\n            NONE                  # 禁用容器的健康状态检测\n            CMD                   # test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;]\n            CMD-SHELL             # test: [&quot;CMD-SHELL&quot;, &quot;curl -f http://localhost || exit 1&quot;] 或者　test: curl -f https://localhost || exit 1\n        interval: 1m30s       # 每次检查之间的间隔时间\n        timeout: 10s          # 运行命令的超时时间\n        retries: 3            # 重试次数\n        start_period: 40s     # v3.4 以上新增的选项, 定义容器启动时间间隔\n        disable: true         # true 或 false, 表示是否禁用健康状态检测和　test: NONE 相同\n\n    image                 # 指定 docker 镜像, 可以是远程仓库镜像、本地镜像\n\n    init                  # v3.7 中新增的参数, true 或 false 表示是否在容器中运行一个 init, 它接收信号并传递给进程\n\n    isolation             # 隔离容器技术, 在 Linux 中仅支持 default 值\n\n    labels                # 使用 Docker 标签将元数据添加到容器, 与 Dockerfile 中的 LABELS 类似\n\n    links                 # 链接到其它服务中的容器, 该选项是 docker 历史遗留的选项, 目前已被用户自定义网络名称空间取代, 最终有可能被废弃 (在使用 swarm 部署时将忽略该选项)\n\n    logging               # 设置容器日志服务\n        driver                # 指定日志记录驱动程序, 默认 json-file (等同于 docker run --log-driver 的作用)\n        options               # 指定日志的相关参数 (等同于 docker run --log-opt 的作用)\n            max-size              # 设置单个日志文件的大小, 当到达这个值后会进行日志滚动操作\n            max-file              # 日志文件保留的数量\n\n    network_mode          # 指定网络模式 (等同于 docker run --net 的作用, 在使用 swarm 部署时将忽略该选项)\n\n    networks              # 将容器加入指定网络 (等同于 docker network connect 的作用), networks 可以位于 compose 文件顶级键和 services 键的二级键\n        aliases               # 同一网络上的容器可以使用服务名称或别名连接到其中一个服务的容器\n        ipv4_address      # IP V4 格式\n        ipv6_address      # IP V6 格式\n\n        示例:\n            version: &#39;3.7&#39;\n            services:\n                test:\n                    image: nginx:1.14-alpine\n                    container_name: mynginx\n                    command: ifconfig\n                    networks:\n                        app_net:                                # 调用下面 networks 定义的 app_net 网络\n                        ipv4_address: 172.16.238.10\n            networks:\n                app_net:\n                    driver: bridge\n                    ipam:\n                        driver: default\n                        config:\n                            - subnet: 172.16.238.0/24\n\n    pid: &#39;host&#39;           # 共享宿主机的 进程空间(PID)\n\n    ports                 # 建立宿主机和容器之间的端口映射关系, ports 支持两种语法格式\n        SHORT 语法格式示例:\n            - &quot;3000&quot;                            # 暴露容器的 3000 端口, 宿主机的端口由 docker 随机映射一个没有被占用的端口\n            - &quot;3000-3005&quot;                       # 暴露容器的 3000 到 3005 端口, 宿主机的端口由 docker 随机映射没有被占用的端口\n            - &quot;8000:8000&quot;                       # 容器的 8000 端口和宿主机的 8000 端口建立映射关系\n            - &quot;9090-9091:8080-8081&quot;\n            - &quot;127.0.0.1:8001:8001&quot;             # 指定映射宿主机的指定地址的\n            - &quot;127.0.0.1:5000-5010:5000-5010&quot;\n            - &quot;6060:6060/udp&quot;                   # 指定协议\n\n        LONG 语法格式示例:(v3.2 新增的语法格式)\n            ports:\n                - target: 80                    # 容器端口\n                  published: 8080               # 宿主机端口\n                  protocol: tcp                 # 协议类型\n                  mode: host                    # host 在每个节点上发布主机端口,  ingress 对于群模式端口进行负载均衡\n\n    secrets               # 不知道怎么用\n\n    security_opt          # 为每个容器覆盖默认的标签 (在使用 swarm 部署时将忽略该选项)\n\n    stop_grace_period     # 指定在发送了 SIGTERM 信号之后, 容器等待多少秒之后退出(默认 10s)\n\n    stop_signal           # 指定停止容器发送的信号 (默认为 SIGTERM 相当于 kill PID; SIGKILL 相当于 kill -9 PID; 在使用 swarm 部署时将忽略该选项)\n\n    sysctls               # 设置容器中的内核参数 (在使用 swarm 部署时将忽略该选项)\n\n    ulimits               # 设置容器的 limit\n\n    userns_mode           # 如果Docker守护程序配置了用户名称空间, 则禁用此服务的用户名称空间 (在使用 swarm 部署时将忽略该选项)\n\n    volumes               # 定义容器和宿主机的卷映射关系, 其和 networks 一样可以位于 services 键的二级键和 compose 顶级键, 如果需要跨服务间使用则在顶级键定义, 在 services 中引用\n        SHORT 语法格式示例:\n            volumes:\n                - /var/lib/mysql                # 映射容器内的 /var/lib/mysql 到宿主机的一个随机目录中\n                - /opt/data:/var/lib/mysql      # 映射容器内的 /var/lib/mysql 到宿主机的 /opt/data\n                - ./cache:/tmp/cache            # 映射容器内的 /var/lib/mysql 到宿主机 compose 文件所在的位置\n                - ~/configs:/etc/configs/:ro    # 映射容器宿主机的目录到容器中去, 权限只读\n                - datavolume:/var/lib/mysql     # datavolume 为 volumes 顶级键定义的目录, 在此处直接调用\n\n        LONG 语法格式示例:(v3.2 新增的语法格式)\n            version: &quot;3.2&quot;\n            services:\n                web:\n                    image: nginx:alpine\n                    ports:\n                        - &quot;80:80&quot;\n                    volumes:\n                        - type: volume                  # mount 的类型, 必须是 bind、volume 或 tmpfs\n                            source: mydata              # 宿主机目录\n                            target: /data               # 容器目录\n                            volume:                     # 配置额外的选项, 其 key 必须和 type 的值相同\n                                nocopy: true                # volume 额外的选项, 在创建卷时禁用从容器复制数据\n                        - type: bind                    # volume 模式只指定容器路径即可, 宿主机路径随机生成; bind 需要指定容器和数据机的映射路径\n                            source: ./static\n                            target: /opt/app/static\n                            read_only: true             # 设置文件系统为只读文件系统\n            volumes:\n                mydata:                                 # 定义在 volume, 可在所有服务中调用\n\n    restart               # 定义容器重启策略(在使用 swarm 部署时将忽略该选项, 在 swarm 使用 restart_policy 代替 restart)\n        no                    # 禁止自动重启容器(默认)\n        always                # 无论如何容器都会重启\n        on-failure            # 当出现 on-failure 报错时, 容器重新启动\n\n    其他选项：\n        domainname, hostname, ipc, mac_address, privileged, read_only, shm_size, stdin_open, tty, user, working_dir\n        上面这些选项都只接受单个值和 docker run 的对应参数类似\n\n    对于值为时间的可接受的值：\n        2.5s\n        10s\n        1m30s\n        2h32m\n        5h34m56s\n        时间单位: us, ms, s, m， h\n    对于值为大小的可接受的值：\n        2b\n        1024kb\n        2048k\n        300m\n        1gb\n        单位: b, k, m, g 或者 kb, mb, gb\nnetworks          # 定义 networks 信息\n    driver                # 指定网络模式, 大多数情况下, 它 bridge 于单个主机和 overlay Swarm 上\n        bridge                # Docker 默认使用 bridge 连接单个主机上的网络\n        overlay               # overlay 驱动程序创建一个跨多个节点命名的网络\n        host                  # 共享主机网络名称空间(等同于 docker run --net=host)\n        none                  # 等同于 docker run --net=none\n    driver_opts           # v3.2以上版本, 传递给驱动程序的参数, 这些参数取决于驱动程序\n    attachable            # driver 为 overlay 时使用, 如果设置为 true 则除了服务之外，独立容器也可以附加到该网络; 如果独立容器连接到该网络，则它可以与其他 Docker 守护进程连接到的该网络的服务和独立容器进行通信\n    ipam                  # 自定义 IPAM 配置. 这是一个具有多个属性的对象, 每个属性都是可选的\n        driver                # IPAM 驱动程序, bridge 或者 default\n        config                # 配置项\n            subnet                # CIDR格式的子网，表示该网络的网段\n    external              # 外部网络, 如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误\n    name                  # v3.5 以上版本, 为此网络设置名称\n</code></pre>\n<p>文件格式示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">    redis:</span><br><span class=\"line\">    image: redis:alpine</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">        - &quot;6379&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">        - frontend</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">        replicas: 2</span><br><span class=\"line\">        update_config:</span><br><span class=\"line\">        parallelism: 2</span><br><span class=\"line\">        delay: 10s</span><br><span class=\"line\">        restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">    db:</span><br><span class=\"line\">    image: postgres:9.4</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">        - db-data:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">        - backend</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">        placement:</span><br><span class=\"line\">        constraints: [node.role &#x3D;&#x3D; manager]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"原文链接：http-blog-baidu120-cc-archives-2019-10-27-840-html\"><a href=\"#原文链接：http-blog-baidu120-cc-archives-2019-10-27-840-html\" class=\"headerlink\" title=\"原文链接：http://blog.baidu120.cc/archives/2019_10_27_840.html\"></a>原文链接：<a href=\"http://blog.baidu120.cc/archives/2019_10_27_840.html\">http://blog.baidu120.cc/archives/2019_10_27_840.html</a></h4>","categories":["docker"],"tags":["docker-compose","配置参数"]},{"title":"mac docker","url":"/2021/05/07/docker/mac%20docker/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew cask install docker</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117409037-4b8af680-af43-11eb-8584-074f05051f51.png\" alt=\"image\"></p>\n<p>在启动台点击Docker app, 在载入 Docker app 后，点击 Next，可能会询问你的 macOS 登陆密码，你输入即可。之后会弹出一个 Docker 运行的提示窗口，状态栏上也有有个小鲸鱼的图标<br>（<img src=\"https://user-images.githubusercontent.com/28568478/117409069-56de2200-af43-11eb-94bf-a3abda66bea4.png\" alt=\"image\">）。</p>\n<h3 id=\"Docker-app-启动命令\"><a href=\"#Docker-app-启动命令\" class=\"headerlink\" title=\"Docker app 启动命令\"></a>Docker app 启动命令</h3><p>安装完成后会自启动 如果没有启动  可以用这个命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:80 docker&#x2F;getting-started</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117409079-59d91280-af43-11eb-960b-0fcc22502921.png\" alt=\"image\"></p>\n","categories":["docker"],"tags":["docker","macOS"]},{"title":"docker的ulimit配置","url":"/2021/05/20/docker/docker%20ulimit%20%E9%85%8D%E7%BD%AE/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"突发报警\"><a href=\"#突发报警\" class=\"headerlink\" title=\"突发报警\"></a>突发报警</h3><p>半夜，业务服务器监控突然报警，报500，查看报警日志后发现是api中连接kafka报错了，查看kafka，发现docker容器在不断重启，报警内容是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ERROR Error while accepting connection (kafka.network.Acceptor)</span><br><span class=\"line\">java.io.IOException: No file descriptors available</span><br></pre></td></tr></table></figure>\n\n<p>发觉可能和 连接数 超过ulimit 限制</p>\n<p>查看服务器和容器和ulimit配置 ulimit -aH</p>\n<ul>\n<li>服务器参数<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">core file size          (blocks, -c) unlimited</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 30446</span><br><span class=\"line\">max locked memory       (kbytes, -l) unlimited</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 65535</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 10240</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) unlimited</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure></li>\n<li>容器参数<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">core file size          (blocks, -c) unlimited</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 30446</span><br><span class=\"line\">max locked memory       (kbytes, -l) unlimited</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 4096</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 10240</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) unlimited</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>发现服务器的open files， 是65535，按理说是够用的，  但是容器的open files是 4096，觉得问题应该是出在这里了，因为最近kafka对接了新的日志输入，导致了再某个时间点多项业务链接叠加，导致连接数过大</p>\n<p>因为用的是aws服务器，aws服务器自己对容器的ulimit有限制，<br>具体文档：<a href=\"https://docs.aws.amazon.com/zh_cn/AmazonECS/latest/APIReference/API_Ulimit.html\">https://docs.aws.amazon.com/zh_cn/AmazonECS/latest/APIReference/API_Ulimit.html</a></p>\n<blockquote>\n<p>The ulimit settings to pass to the container.</p>\n</blockquote>\n<blockquote>\n<p>Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is 1024 and hard limit is 4096.</p>\n</blockquote>\n<p>查看docker 的配置</p>\n<ul>\n<li>sudo vi /etc/sysconfig/docker<br>发现默认ulimit和文档中写的一样<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># The max number of open files for the daemon itself, and all</span><br><span class=\"line\"># running containers.  The default value of 1048576 mirrors the value</span><br><span class=\"line\"># used by the systemd service unit.</span><br><span class=\"line\">DAEMON_MAXFILES&#x3D;1048576</span><br><span class=\"line\"></span><br><span class=\"line\"># Additional startup options for the Docker daemon, for example:</span><br><span class=\"line\"># OPTIONS&#x3D;&quot;--ip-forward&#x3D;true --iptables&#x3D;true&quot;</span><br><span class=\"line\"># By default we limit the number of open files per container</span><br><span class=\"line\">OPTIONS&#x3D;&quot;--default-ulimit nofile&#x3D;1024:4096&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># How many seconds the sysvinit script waits for the pidfile to appear</span><br><span class=\"line\"># when starting the daemon.</span><br><span class=\"line\">DAEMON_PIDFILE_TIMEOUT&#x3D;10</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>那么找到问题的所在，需要对容器的ulimit 进行修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">OPTIONS&#x3D;&quot;--default-ulimit nofile&#x3D;65535:65535&quot;</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件后需要加载然后重启docker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>查看配置是否应用 systemctl status docker.service</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">● docker.service - Docker Application Container Engine</span><br><span class=\"line\">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2021-05-20 10:07:40 UTC; 45s ago</span><br><span class=\"line\">     Docs: https:&#x2F;&#x2F;docs.docker.com</span><br><span class=\"line\">  Process: 23357 ExecStartPre&#x3D;&#x2F;usr&#x2F;libexec&#x2F;docker&#x2F;docker-setup-runtimes.sh (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class=\"line\">  Process: 23345 ExecStartPre&#x3D;&#x2F;bin&#x2F;mkdir -p &#x2F;run&#x2F;docker (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class=\"line\"> Main PID: 23364 (dockerd)</span><br><span class=\"line\">    Tasks: 29</span><br><span class=\"line\">   Memory: 45.0M</span><br><span class=\"line\">   CGroup: &#x2F;system.slice&#x2F;docker.service</span><br><span class=\"line\">           ├─23364 &#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock --default-ulimit nofile&#x3D;65535:65535</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>确认成功！</p>\n<p><strong>这里是修改docker全局的配置，也可以只针对某个容器去修改，这样则需要在docker容器的配置文件中添加ulimits参数</strong></p>\n<h3 id=\"我踩的坑\"><a href=\"#我踩的坑\" class=\"headerlink\" title=\"我踩的坑\"></a>我踩的坑</h3><p>最开始认为是服务器的ulimt导致的，所以想将 65535 设置成 unlimited</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">open files (-n) 65535</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># sudo vi &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class=\"line\">*    soft    nofile          unlimited</span><br><span class=\"line\">*    hard    nofile          unlimited</span><br></pre></td></tr></table></figure>\n\n<p>结果发现，设置完成后  各种报错，sudo 无法使用,报警如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo: pam_open_session: Permission denied</span><br><span class=\"line\">sudo: policy plugin failed session</span><br></pre></td></tr></table></figure>\n<p>也无法登录服务器,报警如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</span><br></pre></td></tr></table></figure>\n\n<p>因为aws默认用户权限是ec2-user，不是root，什么也无法操作，没办法，只能重置服务器<br>aws 重置服务器的方法，重置后重新部署kafka服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">aws重置服务器的方法</span><br><span class=\"line\">实例-选择实例-操作-监控和故障排除-替换根卷</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：<br><a href=\"https://www.jianshu.com/p/627b29f2236f\">kafka集群连接不上问题解决过程</a><br><a href=\"https://www.jianshu.com/p/2556a1c5d45d\">docker daemon 配置文件</a><br><a href=\"https://blog.csdn.net/zimuKobby/article/details/97242965\">一次修改limits.conf 引发的血案</a></p>\n","categories":["docker"],"tags":["docker 配置","ulimit","容器"]},{"title":"/var/lib/docker/overlay2 占用很大，清理Docker占用的磁盘空间，迁移 /var/lib/docker 目录","url":"/2021/05/07/docker/%E6%B8%85%E7%90%86Docker%E5%8D%A0%E7%94%A8%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"0、-du-hs-var-lib-docker-命令查看磁盘使用情况。\"><a href=\"#0、-du-hs-var-lib-docker-命令查看磁盘使用情况。\" class=\"headerlink\" title=\"0、  du -hs /var/lib/docker/ 命令查看磁盘使用情况。\"></a>0、  du -hs /var/lib/docker/ 命令查看磁盘使用情况。</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">linlf@dacent:~$ sudo du -hs &#x2F;var&#x2F;lib&#x2F;docker&#x2F;</span><br><span class=\"line\">237G\t&#x2F;var&#x2F;lib&#x2F;docker&#x2F;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-docker-system-df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况\"><a href=\"#1-docker-system-df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况\" class=\"headerlink\" title=\"1 docker system df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况:\"></a>1 docker system df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况:</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">linlf@dacent:~$ docker system df</span><br><span class=\"line\">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class=\"line\">Images              7                   2                   122.2GB             79.07GB (64%)</span><br><span class=\"line\">Containers          2                   2                   61.96GB             0B (0%)</span><br><span class=\"line\">Local Volumes       0                   0                   0B                  0B</span><br><span class=\"line\">Build Cache         0                   0                   0B                  0B</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-docker-system-prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像-即无tag的镜像-。\"><a href=\"#2-docker-system-prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像-即无tag的镜像-。\" class=\"headerlink\" title=\"2 docker system prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)。\"></a>2 docker system prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)。</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">linlf@dacent:~$ docker system prune</span><br><span class=\"line\">WARNING! This will remove:</span><br><span class=\"line\">        - all stopped containers</span><br><span class=\"line\">        - all networks not used by at least one container</span><br><span class=\"line\">        - all dangling images</span><br><span class=\"line\">        - all build cache</span><br><span class=\"line\">Are you sure you want to continue? [y&#x2F;N] y</span><br><span class=\"line\">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-docker-system-prune-a命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了…所以使用之前一定要想清楚-。我没用过，因为会清理-没有开启的-Docker-镜像。\"><a href=\"#3-docker-system-prune-a命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了…所以使用之前一定要想清楚-。我没用过，因为会清理-没有开启的-Docker-镜像。\" class=\"headerlink\" title=\"3 docker system prune -a命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了…所以使用之前一定要想清楚.。我没用过，因为会清理 没有开启的  Docker 镜像。\"></a>3 docker system prune -a命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了…所以使用之前一定要想清楚.。我没用过，因为会清理 没有开启的  Docker 镜像。</h4><p> </p>\n<h4 id=\"4-迁移-var-lib-docker-目录。\"><a href=\"#4-迁移-var-lib-docker-目录。\" class=\"headerlink\" title=\"4 迁移 /var/lib/docker 目录。\"></a>4 迁移 /var/lib/docker 目录。</h4><ul>\n<li>4.1 停止docker服务。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop docker</span><br></pre></td></tr></table></figure></li>\n<li>4.2 创建新的docker目录，执行命令df -h,找一个大的磁盘。 我在 /home目录下面建了 /home/docker/lib目录，执行的命令是：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p &#x2F;home&#x2F;docker&#x2F;lib</span><br></pre></td></tr></table></figure></li>\n<li>4.3 迁移/var/lib/docker目录下面的文件到 /home/docker/lib：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -avz &#x2F;var&#x2F;lib&#x2F;docker &#x2F;home&#x2F;docker&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>4.4 配置 /etc/systemd/system/docker.service.d/devicemapper.conf。查看 devicemapper.conf 是否存在。如果不存在，就新建。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;</span><br><span class=\"line\">sudo vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;devicemapper.conf</span><br></pre></td></tr></table></figure></li>\n<li>4.5 然后在 devicemapper.conf 写入：（同步的时候把父文件夹一并同步过来，实际上的目录应在 /home/docker/lib/docker ）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart&#x3D;</span><br><span class=\"line\">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd  --graph&#x3D;&#x2F;home&#x2F;docker&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure></li>\n<li>4.6 重新加载 docker<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure></li>\n<li>4.7 为了确认一切顺利，运行<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># docker info</span><br></pre></td></tr></table></figure>\n命令检查Docker 的根目录.它将被更改为 /home/docker/lib/docker</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker Root Dir: &#x2F;home&#x2F;docker&#x2F;lib&#x2F;docker</span><br><span class=\"line\">Debug Mode (client): false</span><br><span class=\"line\">Debug Mode (server): false</span><br><span class=\"line\">Registry: https:&#x2F;&#x2F;index.docker.io&#x2F;v1&#x2F;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4.8 启动成功后，再确认之前的镜像还在：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">linlf@dacent:~$ docker images</span><br><span class=\"line\">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">AAA&#x2F;AAA               v2                  7331b8651bcc        27 hours ago        3.85GB</span><br><span class=\"line\">BBB&#x2F;BBB               v1                  da4a80dd8424        28 hours ago        3.47GB</span><br></pre></td></tr></table></figure></li>\n<li>4.9 确定容器没问题后删除/var/lib/docker/目录中的文件。</li>\n</ul>\n<p> </p>\n<p>参考链接：<br><a href=\"https://blog.csdn.net/qq_37674858/article/details/79976751\">https://blog.csdn.net/qq_37674858/article/details/79976751</a></p>\n<p><a href=\"https://blog.csdn.net/cmrsautomation/article/details/52857791\">https://blog.csdn.net/cmrsautomation/article/details/52857791</a></p>\n<p>原文链接：<a href=\"https://blog.csdn.net/weixin_32820767/article/details/81196250\">https://blog.csdn.net/weixin_32820767/article/details/81196250</a></p>\n","categories":["docker"],"tags":["docker","overlay2","清理"]},{"title":"Django的Model中不创建表格，并设为基类方法","url":"/2021/05/07/django/Django%E7%9A%84Model%E4%B8%AD%E4%B8%8D%E5%88%9B%E5%BB%BA%E8%A1%A8%E6%A0%BC%EF%BC%8C%E5%B9%B6%E8%AE%BE%E4%B8%BA%E5%9F%BA%E7%B1%BB%E6%96%B9%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class UserInfo(models.Model):</span><br><span class=\"line\">    &quot;&quot;&quot;用户表&quot;&quot;&quot;</span><br><span class=\"line\">    name &#x3D; models.CharField(verbose_name&#x3D;&#39;用户名&#39;, max_length&#x3D;32)</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        # 此类可以当做父类，被其他model继承。字段自动过度给，继承的model</span><br><span class=\"line\">        abstract &#x3D; True  # 【django以后做数据库迁移时， 不再为UserInfo类创建相关的表以及表结构了】</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># app01&#x2F;models.py</span><br><span class=\"line\">class UserInfo(RbacUserInfo):  # 继承上面那个userinfo</span><br><span class=\"line\">    &quot;&quot;&quot;用户表&quot;&quot;&quot;</span><br><span class=\"line\">    phone &#x3D; models.CharField(verbose_name&#x3D;&#39;联系方式&#39;, max_length&#x3D;32)</span><br><span class=\"line\">    depart &#x3D; models.ForeignKey(verbose_name&#x3D;&#39;部门&#39;, to&#x3D;&#39;Department&#39;, on_delete&#x3D;models.CASCADE)</span><br></pre></td></tr></table></figure>\n<p>首先介绍下django的模型有哪些属性：</p>\n<p>先看例子：</p>\n<p>Django 模型类的Meta是一个内部类，它用于定义一些Django模型类的行为特性。以下对此作一总结：</p>\n<p>abstract<br> 这个属性是定义当前的模型类是不是一个抽象类。所谓抽象类是不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。比如下面的代码中Human是一个抽象类，Employee是一个继承了Human的子类，那么在运行syncdb命令时，不会生成Human表，但是会生成一个Employee表，它包含了Human中继承来的字段，以后如果再添加一个Customer模型类，它可以同样继承Human的公共属性：<br> <span id=\"more\"></span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Human(models.Model):</span><br><span class=\"line\">    name&#x3D;models.CharField(max_length&#x3D;100)</span><br><span class=\"line\">    GENDER_CHOICE&#x3D;((u&#39;M&#39;,u&#39;Male&#39;),(u&#39;F&#39;,u&#39;Female&#39;),)</span><br><span class=\"line\">    gender&#x3D;models.CharField(max_length&#x3D;2,choices&#x3D;GENDER_CHOICE,null&#x3D;True)</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        abstract&#x3D;True</span><br><span class=\"line\">class Employee(Human):</span><br><span class=\"line\">    joint_date&#x3D;models.DateField()</span><br><span class=\"line\">class Customer(Human):</span><br><span class=\"line\">    first_name&#x3D;models.CharField(max_length&#x3D;100)</span><br><span class=\"line\">    birth_day&#x3D;models.DateField()</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码，执行python manage.py syncdb 后的输出结果入下，可以看出Human表并没有被创建:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python manage.py syncdb</span><br><span class=\"line\">Creating tables ...</span><br><span class=\"line\">Creating table myapp_employee</span><br><span class=\"line\">Creating table myapp_customer</span><br><span class=\"line\">Installing custom SQL ...</span><br><span class=\"line\">Installing indexes ...</span><br><span class=\"line\">No fixtures found.</span><br><span class=\"line\">•app_label</span><br></pre></td></tr></table></figure>\n\n<p>app_label这个选项只在一种情况下使用，就是你的模型类不在默认的应用程序包下的models.py文件中，这时候你需要指定你这个模型类是那个应用程序的。比如你在其他地方写了一个模型类，而这个模型类是属于myapp的，那么你这是需要指定为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">app_label&#x3D;&#39;myapp&#39;</span><br><span class=\"line\">•db_table</span><br></pre></td></tr></table></figure>\n<p>db_table是用于指定自定义数据库表名的。Django有一套默认的按照一定规则生成数据模型对应的数据库表名，如果你想使用自定义的表名，就通过这个属性指定，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">table_name&#x3D;&#39;my_owner_table&#39;</span><br><span class=\"line\">•db_tablespace</span><br></pre></td></tr></table></figure>\n<p>有些数据库有数据库表空间，比如Oracle。你可以通过db_tablespace来指定这个模型对应的数据库表放在哪个数据库表空间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">•get_latest_by</span><br></pre></td></tr></table></figure>\n<p>由于Django的管理方法中有个lastest()方法，就是得到最近一行记录。如果你的数据模型中有 DateField 或 DateTimeField 类型的字段，你可以通过这个选项来指定lastest()是按照哪个字段进行选取的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">•managed</span><br></pre></td></tr></table></figure>\n<p>由于Django会自动根据模型类生成映射的数据库表，如果你不希望Django这么做，可以把managed的值设置为False。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">•order_with_respect_to</span><br></pre></td></tr></table></figure>\n<p>这个选项一般用于多对多的关系中，它指向一个关联对象。就是说关联对象找到这个对象后它是经过排序的。指定这个属性后你会得到一个get_XXX_order()和set_XXX_order（）的方法,通过它们你可以设置或者回去排序的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">•ordering</span><br></pre></td></tr></table></figure>\n<p>这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的。比如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ordering&#x3D;[&#39;order_date&#39;] # 按订单升序排列</span><br><span class=\"line\">ordering&#x3D;[&#39;-order_date&#39;] # 按订单降序排列，-表示降序</span><br><span class=\"line\">ordering&#x3D;[&#39;?order_date&#39;] # 随机排序，？表示随机</span><br><span class=\"line\">•permissions</span><br><span class=\"line\">permissions主要是为了在Django Admin管理模块下使用的，如果你设置了这个属性可以让指定的方法权限描述更清晰可读。</span><br><span class=\"line\">•proxy</span><br><span class=\"line\">这是为了实现代理模型使用的，这里先不讲随后的文章介绍。</span><br><span class=\"line\">•unique_together</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">unique_together这个选项用于：当你需要通过两个字段保持唯一性时使用。比如假设你希望，一个Person的FirstName和LastName两者的组合必须是唯一的，那么需要这样设置：</span><br><span class=\"line\">unique_together &#x3D; ((&quot;first_name&quot;, &quot;last_name&quot;),)</span><br><span class=\"line\">•verbose_name</span><br><span class=\"line\">verbose_name的意思很简单，就是给你的模型类起一个更可读的名字：</span><br><span class=\"line\">verbose_name &#x3D; &quot;pizza&quot;</span><br><span class=\"line\">•verbose_name_plural</span><br><span class=\"line\">这个选项是指定，模型的复数形式是什么，比如：</span><br><span class=\"line\">verbose_name_plural &#x3D; &quot;stories&quot;</span><br><span class=\"line\">如果不指定Django会自动在模型名称后加一个’s’</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.class Register(models.Model):</span><br><span class=\"line\">2.    id &#x3D; models.IntegerField(primary_key &#x3D; True, db_column&#x3D;&quot;ID&quot;)</span><br><span class=\"line\">3.    mid &#x3D; models.IntegerField(db_column &#x3D; &quot;MID&quot;)</span><br><span class=\"line\">4.    name &#x3D; models.CharField(max_length &#x3D; 10 , db_column &#x3D; &quot;NAME&quot;)</span><br><span class=\"line\">5.    nickName &#x3D; models.CharField(max_length &#x3D; 100 ,db_column &#x3D; &quot;NICK_NAME&quot;)</span><br><span class=\"line\">6.    slo &#x3D; models.CharField(max_length &#x3D; 50, db_column &#x3D; &quot;SLOGAN&quot;)</span><br><span class=\"line\">7.    status &#x3D; models.SmallIntegerField(db_column &#x3D; &quot;STATUS&quot;)</span><br><span class=\"line\">8.    cnt &#x3D; models.IntegerField(db_column &#x3D; &quot;CNT&quot;)</span><br><span class=\"line\">9.    createdDate &#x3D; models.DateTimeField(db_column &#x3D; &quot;CREATED_DATE&quot;)</span><br><span class=\"line\">10.</span><br><span class=\"line\">11.    class Meta:</span><br><span class=\"line\">12.        db_table &#x3D; &quot;A111208FACTIONVOTETOP10_REGISTER&quot;</span><br><span class=\"line\">13.        managed &#x3D; False</span><br></pre></td></tr></table></figure>\n\n\n<p>原文：<a href=\"https://www.cnblogs.com/xuchunlin/p/5920545.html\">django模型中的抽象类（abstract）</a></p>\n","categories":["django"],"tags":["抽象类","abstract"]},{"title":"Go struct 类型的 map 结构体成员不能修改的问题","url":"/2021/05/07/golang/Go%20struct%20%E7%B1%BB%E5%9E%8B%E7%9A%84%20map%20%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>引入： 错误 Reports assignments directly to a struct field of a map</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117408509-a3752d80-af42-11eb-9267-d8146f2ff28b.png\" alt=\"image\"></p>\n<h3 id=\"1-问题的产生\"><a href=\"#1-问题的产生\" class=\"headerlink\" title=\"1. 问题的产生\"></a>1. 问题的产生</h3><p>这个问题在github上可以追溯到2012年提交的一个issue，链接为 <a href=\"https://github.com/golang/go/issues/3117\">https://github.com/golang/go/issues/3117</a> ；如上图，结构体作为map的元素时，不能够直接赋值给结构体的某个字段，也就是map中的struct中的字段不能够直接寻址。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"2-问题产生的原因\"><a href=\"#2-问题产生的原因\" class=\"headerlink\" title=\"2. 问题产生的原因\"></a>2. 问题产生的原因</h3><p>关于golang中map的这种古怪的特性有这样几个观点：</p>\n<p>1）map作为一个封装好的数据结构，由于它底层可能会由于数据扩张而进行迁移，所以拒绝直接寻址，避免产生野指针；</p>\n<p>2）map中的key在不存在的时候，赋值语句其实会进行新的k-v值的插入，所以拒绝直接寻址结构体内的字段，以防结构体不存在的时候可能造成的错误；</p>\n<p>3）这可能和map的并发不安全性相关</p>\n<ul>\n<li>x = y 这种赋值的方式，你必须知道 x的地址，然后才能把值 y 赋给 x。</li>\n<li>但 go 中的 map 的 value 本身是不可寻址的，因为 map 的扩容的时候，可能要做 key/val pair迁移</li>\n<li>value 本身地址是会改变的</li>\n<li>不支持寻址的话又怎么能赋值呢</li>\n</ul>\n<h3 id=\"3-问题的解决\"><a href=\"#3-问题的解决\" class=\"headerlink\" title=\"3. 问题的解决\"></a>3. 问题的解决</h3><p>1）迂回方式一：整体更新map的value部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type Person struct&#123;</span><br><span class=\"line\">\tname string</span><br><span class=\"line\">\tsex string</span><br><span class=\"line\">\tage int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">\tm :&#x3D; map[uint]Person&#123;</span><br><span class=\"line\">\t\t0 : Person&#123;&quot;张无忌&quot;, &quot;男&quot;, 18&#125;,</span><br><span class=\"line\">\t\t1 : Person&#123;&quot;周芷若&quot;, &quot;女&quot;, 17&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;m[0].age +&#x3D; 1</span><br><span class=\"line\">\t&#x2F;&#x2F;整体更新结构体</span><br><span class=\"line\">\ttemp :&#x3D; m[0]</span><br><span class=\"line\">\ttemp.age +&#x3D; 1</span><br><span class=\"line\">\tm[0] &#x3D; temp</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117408510-a3752d80-af42-11eb-8f10-e860eb41f4d0.png\" alt=\"image\"></p>\n<p>2） 迂回方式二：把map的value部分定义为对应类型的指针类型或是slice或是map时，这样是可以更新v的内部字段的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type Person struct&#123;</span><br><span class=\"line\">\tname string</span><br><span class=\"line\">\tsex string</span><br><span class=\"line\">\tage int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;定义map的value类型为指针类型</span><br><span class=\"line\">\tm :&#x3D; map[uint]*Person&#123;</span><br><span class=\"line\">\t\t0: &amp;Person&#123;&quot;张无忌&quot;, &quot;男&quot;, 18&#125;,</span><br><span class=\"line\">\t\t1: &amp;Person&#123;&quot;周芷若&quot;, &quot;女&quot;, 17&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm[0].age +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(*m[0])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117408536-aa03a500-af42-11eb-9737-32d0b54feb84.png\" alt=\"image\"></p>\n<p>原文链接：<a href=\"https://blog.csdn.net/zhngcho/article/details/82424962\">golang 结构体作为map的元素时，不能够直接赋值给结构体的某个字段</a></p>\n","categories":["golang"],"tags":["struct"]},{"title":"MAC brew update镜像源切换","url":"/2021/05/07/mac/MAC%20brew%20update%E9%95%9C%E5%83%8F%E6%BA%90%E5%88%87%E6%8D%A2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、查看当前Homebrew-镜像源\"><a href=\"#一、查看当前Homebrew-镜像源\" class=\"headerlink\" title=\"一、查看当前Homebrew 镜像源\"></a>一、查看当前Homebrew 镜像源</h3><ul>\n<li>方法1<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew config</span><br><span class=\"line\"># 查看现在镜像源</span><br><span class=\"line\"># ORIGIN:https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;brew.git 之前未操作过则会显示这个链接，也就是官方镜像源</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li>方法2<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># brew.git镜像源</span><br><span class=\"line\">git -C &quot;$(brew --repo)&quot; remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"># homebrew-core.git镜像源</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew&#x2F;core)&quot; remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"># homebrew-cask.git镜像源</span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew&#x2F;cask)&quot; remote -v</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"二、替换源\"><a href=\"#二、替换源\" class=\"headerlink\" title=\"二、替换源\"></a>二、替换源</h3><h5 id=\"国内镜像地址\"><a href=\"#国内镜像地址\" class=\"headerlink\" title=\"国内镜像地址\"></a>国内镜像地址</h5><ul>\n<li>  科大: <a href=\"https://link.zhihu.com/?target=https://links.jianshu.com/go?to=https%253A%252F%252Fmirrors.ustc.edu.cn\">https://mirrors.ustc.edu.cn</a></li>\n<li>  阿里: <a href=\"https://link.zhihu.com/?target=https://links.jianshu.com/go?to=https%253A%252F%252Fmirrors.aliyun.com%252Fhomebrew%252F\">https://mirrors.aliyun.com/homebrew/</a></li>\n</ul>\n<ul>\n<li>方法1<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 替换 brew.git</span><br><span class=\"line\">cd &quot;$(brew --repo)&quot;</span><br><span class=\"line\">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 homebrew-core.git</span><br><span class=\"line\">cd &quot;$(brew --repo)&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core&quot;</span><br><span class=\"line\">git remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-core.git</span><br></pre></td></tr></table></figure></li>\n<li>方法2<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git -C &quot;$(brew --repo)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;brew.git</span><br><span class=\"line\"></span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew&#x2F;core)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew&#x2F;cask)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-cask.git</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>方法3<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if [ $SHELL &#x3D; &quot;&#x2F;bin&#x2F;bash&quot; ] # 如果你的是bash</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &#39;export HOMEBREW_BOTTLE_DOMAIN&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-bottles&#x2F;&#39; &gt;&gt; ~&#x2F;.bash_profile</span><br><span class=\"line\">    source ~&#x2F;.bash_profile</span><br><span class=\"line\">elif [ $SHELL &#x3D; &quot;&#x2F;bin&#x2F;zsh&quot; ] # 如果用的shell 是zsh 的话</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &#39;export HOMEBREW_BOTTLE_DOMAIN&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-bottles&#x2F;&#39; &gt;&gt; ~&#x2F;.zshrc</span><br><span class=\"line\">    source ~&#x2F;.zshrc</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"三、查看是否替换成功\"><a href=\"#三、查看是否替换成功\" class=\"headerlink\" title=\"三、查看是否替换成功\"></a>三、查看是否替换成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew config</span><br><span class=\"line\">#查看更换后的镜像源(ORIGIN: https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;brew.git 说明更换成功)</span><br></pre></td></tr></table></figure>\n<p>如果替换成功后，进行brew update就可以了</p>\n<h3 id=\"四、恢复原有镜像源的方法\"><a href=\"#四、恢复原有镜像源的方法\" class=\"headerlink\" title=\"四、恢复原有镜像源的方法\"></a>四、恢复原有镜像源的方法</h3><ul>\n<li>如果需要恢复原有镜像源的话（国内镜像源突然不能用了或版本不够新）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git -C &quot;$(brew --repo)&quot; remote set-url origin https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;brew.git</span><br><span class=\"line\"></span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew&#x2F;core)&quot; remote set-url origin https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core.git</span><br><span class=\"line\"></span><br><span class=\"line\">git -C &quot;$(brew --repo homebrew&#x2F;cask)&quot; remote set-url origin https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-cask.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到 ~&#x2F;.bash_profile 或者 ~&#x2F;.zshrc 中的HOMEBREW_BOTTLE_DOMAIN 一行删除</span><br><span class=\"line\"></span><br><span class=\"line\">brew update</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>参考：</p>\n<ul>\n<li><p> <a href=\"https://www.cnblogs.com/demingblog/p/11436602.html\">mac brew update 卡着不动的问题</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/102760018\">Mac Homebrew 国内镜像源替换或重置（brew update 没反应）</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/StivenYang/p/12546605.html\">Mac安装Homebrew并更换国内镜像源</a></p>\n</li>\n</ul>\n","categories":["mac"],"tags":["macOS","镜像源"]},{"title":"mac rz sz 在服务器中上传下载文件","url":"/2021/05/07/mac/mac%20rz%20sz%20%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"mac-rz-sz-在服务器中上传下载文件\"><a href=\"#mac-rz-sz-在服务器中上传下载文件\" class=\"headerlink\" title=\"mac rz sz 在服务器中上传下载文件\"></a><a href=\"https://www.cnblogs.com/jellyabd/p/11388041.html\">mac rz sz 在服务器中上传下载文件</a></h1><p>主要参考：<a href=\"https://segmentfault.com/a/1190000012166969\">https://segmentfault.com/a/1190000012166969</a></p>\n<p>安装步骤参考：<a href=\"https://github.com/aikuyun/iterm2-zmodem\">https://github.com/aikuyun/iterm2-zmodem</a></p>\n<p><strong>安装步骤</strong></p>\n<p>1.安装支持rz和sz命令的lrzsz：brew install lrzsz</p>\n<blockquote>\n<p>等了挺长时间的。</p>\n</blockquote>\n<p>2.在本地/usr/local/bin/目录下保存iterm2-send-zmodem.sh 和iterm2-recv-zmodem.sh两个脚本</p>\n<p>iterm2-send-zmodem.sh</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!&#x2F;bin&#x2F;bash</span><br><span class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</span><br><span class=\"line\"># AppleScript from http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;4309087&#x2F;cancel-button-on-osascript-in-a-bash-script</span><br><span class=\"line\"># licensed under cc-wiki with attribution required</span><br><span class=\"line\"># Remainder of script public domain</span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e &#39;tell application &quot;iTerm2&quot; to version&#39; &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;&amp; NAME&#x3D;iTerm2 || NAME&#x3D;iTerm</span><br><span class=\"line\">if [[ $NAME &#x3D; &quot;iTerm&quot; ]]; then</span><br><span class=\"line\">    FILE&#x3D;&#96;osascript -e &#39;tell application &quot;iTerm&quot; to activate&#39; -e &#39;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#39; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;&#96;</span><br><span class=\"line\">else</span><br><span class=\"line\">    FILE&#x3D;&#96;osascript -e &#39;tell application &quot;iTerm2&quot; to activate&#39; -e &#39;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#39; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;&#96;</span><br><span class=\"line\">fi</span><br><span class=\"line\">if [[ $FILE &#x3D; &quot;&quot; ]]; then</span><br><span class=\"line\">    echo Cancelled.</span><br><span class=\"line\">    # Send ZModem cancel</span><br><span class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Cancelled transfer</span><br><span class=\"line\">else</span><br><span class=\"line\">    &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sz &quot;$FILE&quot; -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Received $FILE</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n\n<p>iterm2-recv-zmodem.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;bin&#x2F;bash</span><br><span class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</span><br><span class=\"line\"># AppleScript from http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;4309087&#x2F;cancel-button-on-osascript-in-a-bash-script</span><br><span class=\"line\"># licensed under cc-wiki with attribution required</span><br><span class=\"line\"># Remainder of script public domain</span><br><span class=\"line\"></span><br><span class=\"line\">osascript -e &#39;tell application &quot;iTerm2&quot; to version&#39; &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;&amp; NAME&#x3D;iTerm2 || NAME&#x3D;iTerm</span><br><span class=\"line\">if [[ $NAME &#x3D; &quot;iTerm&quot; ]]; then</span><br><span class=\"line\">    FILE&#x3D;&#96;osascript -e &#39;tell application &quot;iTerm&quot; to activate&#39; -e &#39;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#39; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;&#96;</span><br><span class=\"line\">else</span><br><span class=\"line\">    FILE&#x3D;&#96;osascript -e &#39;tell application &quot;iTerm2&quot; to activate&#39; -e &#39;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#39; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;&#96;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $FILE &#x3D; &quot;&quot; ]]; then</span><br><span class=\"line\">    echo Cancelled.</span><br><span class=\"line\">    # Send ZModem cancel</span><br><span class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Cancelled transfer</span><br><span class=\"line\">else</span><br><span class=\"line\">    cd &quot;$FILE&quot;</span><br><span class=\"line\">    &#x2F;usr&#x2F;local&#x2F;bin&#x2F;rz -E -e -b</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo</span><br><span class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>3.设置一下两个脚本的权限，一般 chmod 777 就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 777 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-*</span><br></pre></td></tr></table></figure>\n\n<p>4.设置Iterm2的Tirgger特性，profiles-&gt;default-&gt;editProfiles-&gt;Advanced中的Tirgger</p>\n<p>添加两条trigger，分别设置 Regular expression，Action，Parameters，Instant如下：</p>\n<p>1.第一条</p>\n<p>        Regular expression: **B0100</p>\n<p>        Action: Run Silent Coprocess</p>\n<p>        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</p>\n<p>2.第二条</p>\n<p>        Regular expression: **B00000000000000</p>\n<p>        Action: Run Silent Coprocess</p>\n<p>        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</p>\n<p><strong>需要注意的点：</strong></p>\n<h1 id=\"使用expect自动登录后，不能使用rz和sz命令问题\"><a href=\"#使用expect自动登录后，不能使用rz和sz命令问题\" class=\"headerlink\" title=\"使用expect自动登录后，不能使用rz和sz命令问题\"></a>使用expect自动登录后，不能使用rz和sz命令问题</h1><pre><code>脚本开头可以加入：export LC_CTYPE=en_US\n</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">对&#x2F;usr&#x2F;local&#x2F;bin的</span><br><span class=\"line\"> *   iterm2-recv-zmodem.sh</span><br><span class=\"line\"> *  iterm2-send-zmodem.sh</span><br><span class=\"line\">脚本添加权限</span><br></pre></td></tr></table></figure>\n\n<p>            chmod 777 iterm2-*</p>\n<ul>\n<li>  iterm2 的设置路径为：</li>\n</ul>\n<p>            点击 iTerm2 的设置界面 Perference-&gt; Profiles -&gt; Default -&gt; Advanced -&gt; Triggers 的 Edit 按钮</p>\n<ul>\n<li>  iterm2的triggers截图</li>\n</ul>\n<p>            1.第一行receive，只需要“**B0100”的内容，不要前面的那一串说明。</p>\n<p>            2.“**B0100”对应的是send</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117410212-b5f06680-af44-11eb-9282-2eb8dbea1b44.png\" alt=\"image\"></p>\n","categories":["mac"],"tags":["macOS","rz sz"]},{"title":"mac 命令行终端 设置代理","url":"/2021/05/07/mac/mac%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF%20%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><ul>\n<li>  macOS Mojave 10.14.3</li>\n<li>  iTrem 2 3.2.8</li>\n<li>  酸酸乳1.1.4.4-R8</li>\n</ul>\n<p>查看自己命令行的状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl ip.gs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h2><h3 id=\"一、首先检查自己的酸酸乳是否正常，并在高级设置页面，找到本地-Sock5-监听端口，我自己是-1086，注意这里还有一个-HTTP-代理监听端口，不是这个\"><a href=\"#一、首先检查自己的酸酸乳是否正常，并在高级设置页面，找到本地-Sock5-监听端口，我自己是-1086，注意这里还有一个-HTTP-代理监听端口，不是这个\" class=\"headerlink\" title=\"一、首先检查自己的酸酸乳是否正常，并在高级设置页面，找到本地 Sock5 监听端口，我自己是 1086，注意这里还有一个 HTTP 代理监听端口，不是这个\"></a>一、首先检查自己的酸酸乳是否正常，并在高级设置页面，找到本地 Sock5 监听端口，我自己是 1086，注意这里还有一个 HTTP 代理监听端口，不是这个</h3><p><img src=\"https://user-images.githubusercontent.com/28568478/117410597-3adb8000-af45-11eb-96e1-0fde94cea9b3.png\" alt=\"image\"></p>\n<h3 id=\"二、安装需要的软件（没有-brew-就先安装-brew，具体自行搜索哈）\"><a href=\"#二、安装需要的软件（没有-brew-就先安装-brew，具体自行搜索哈）\" class=\"headerlink\" title=\"二、安装需要的软件（没有 brew 就先安装 brew，具体自行搜索哈）\"></a>二、安装需要的软件（没有 brew 就先安装 brew，具体自行搜索哈）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install privoxy</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、配置-privoxy\"><a href=\"#三、配置-privoxy\" class=\"headerlink\" title=\"三、配置 privoxy\"></a>三、配置 privoxy</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim &#x2F;usr&#x2F;local&#x2F;etc&#x2F;privoxy&#x2F;config</span><br></pre></td></tr></table></figure>\n\n<p>在里面插入两行，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen-address 0.0.0.0:8118</span><br><span class=\"line\">forward-socks5 &#x2F; localhost:1086 .</span><br></pre></td></tr></table></figure>\n\n<p> 注意！！！ 这里的 1086 就是刚才上面圈出来的端口，千万不要弄错了，弄错了就用不了的</p>\n<h3 id=\"四、启动-prioxy\"><a href=\"#四、启动-prioxy\" class=\"headerlink\" title=\"四、启动 prioxy\"></a>四、启动 prioxy</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;privoxy &#x2F;usr&#x2F;local&#x2F;etc&#x2F;privoxy&#x2F;config</span><br></pre></td></tr></table></figure>\n\n<p>查看是否成功，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -na | grep 8118</span><br></pre></td></tr></table></figure>\n\n<p>看到有类似如下信息就表示启动成功了 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcp4 0 0 *.8118 *.* LISTEN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、最后一步，方便使用\"><a href=\"#五、最后一步，方便使用\" class=\"headerlink\" title=\"五、最后一步，方便使用\"></a>五、最后一步，方便使用</h3><p><code>在 ~/.zshrc</code> 里加入开关函数，使用起来更方便</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>在里面插入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function proxy_off()&#123;</span><br><span class=\"line\">    unset http_proxy</span><br><span class=\"line\">    unset https_proxy</span><br><span class=\"line\">    echo -e &quot;已关闭代理&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function proxy_on() &#123;</span><br><span class=\"line\">    export no_proxy&#x3D;&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span><br><span class=\"line\">    export http_proxy&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8118&quot;</span><br><span class=\"line\">    export https_proxy&#x3D;$http_proxy</span><br><span class=\"line\">    echo -e &quot;已开启代理&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再 source 一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source  ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以通过在命令行输入 proxy_on 和 proxy_off 来开启和关闭代理啦</p>\n<h3 id=\"六、日常开启-prioxy-软件\"><a href=\"#六、日常开启-prioxy-软件\" class=\"headerlink\" title=\"六、日常开启 prioxy 软件\"></a>六、日常开启 prioxy 软件</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew services start privoxy</span><br></pre></td></tr></table></figure>\n<h3 id=\"七、日常使用步骤\"><a href=\"#七、日常使用步骤\" class=\"headerlink\" title=\"七、日常使用步骤\"></a>七、日常使用步骤</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">先启动 provixy 软件</span><br><span class=\"line\">brew services start privoxy</span><br><span class=\"line\">然后 启动代理</span><br><span class=\"line\">proxy_on</span><br></pre></td></tr></table></figure>\n\n<p>最后在看看自己的命令行状态吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl ip.gs</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117410679-53e43100-af45-11eb-8193-cda84662c914.png\" alt=\"image\"></p>\n<p> well done！</p>\n","categories":["mac"],"tags":["代理"]},{"title":"mac 相关命令","url":"/2021/05/07/mac/mac%20%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h3><p>ditto</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ditto -V -x -k --sequesterRsrc --rsrc xxxx-img-1.zip xxxx-img-1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切割\"><a href=\"#切割\" class=\"headerlink\" title=\"切割\"></a>切割</h3><p>split</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">split -b 102400000   Joker.小丑.2019.中英字幕.WEBrip.720P-人人影视.mp4</span><br></pre></td></tr></table></figure>\n","categories":["mac"],"tags":["命令"]},{"title":"在 Mac 下面安装 cryptography 依赖包，始终报错，出现 'openssl/opensslv.h' file not found 的错误。","url":"/2021/05/07/mac/%E5%9C%A8%20Mac%E4%B8%8B%E9%9D%A2%E5%AE%89%E8%A3%85%20cryptography%20%E4%BE%9D%E8%B5%96%E5%8C%85%E5%A7%8B%E7%BB%88%E6%8A%A5%E9%94%99/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在 Mac 下面安装 cryptography 依赖包，始终报错，出现 ‘openssl/opensslv.h’ file not found 的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip install cryptography</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">building &#39;_openssl&#39; extension</span><br><span class=\"line\">cc -fno-strict-aliasing -fno-common -dynamic -arch i386 -arch x86_64 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch i386 -arch x86_64 -pipe -I&#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;2.7&#x2F;include&#x2F;python2.7 -c build&#x2F;temp.macosx-10.12-intel-2.7&#x2F;_openssl.c -o build&#x2F;temp.macosx-10.12-intel-2.7&#x2F;build&#x2F;temp.macosx-10.12-intel-2.7&#x2F;_openssl.o</span><br><span class=\"line\">build&#x2F;temp.macosx-10.12-intel-2.7&#x2F;_openssl.c:434:10: fatal error: &#39;openssl&#x2F;opensslv.h&#39; file not found</span><br><span class=\"line\">#include &lt;openssl&#x2F;opensslv.h&gt;</span><br><span class=\"line\">         ^</span><br><span class=\"line\">1 error generated.</span><br><span class=\"line\">error: command &#39;cc&#39; failed with exit status 1</span><br></pre></td></tr></table></figure>\n<p>这是因为找不到 openssl 的头文件，可以使用 brew 命令进行安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install openssl</span><br></pre></td></tr></table></figure>\n<p>如果安装完成以后还是会出现上面的错误的话，就是环境变量的问题了，需要重新指定 openssl 的路径安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ env LDFLAGS&#x3D;&quot;-L$(brew --prefix openssl)&#x2F;lib&quot; CFLAGS&#x3D;&quot;-I$(brew --prefix openssl)&#x2F;include&quot; pip install cryptography</span><br></pre></td></tr></table></figure>\n<p>这样就可以搞定了~~~</p>\n","categories":["mac"],"tags":["macOS","cryptography"]},{"title":"解决MAC删除应用程序后依然残留的图标","url":"/2021/05/07/mac/%E8%A7%A3%E5%86%B3MAC%E5%88%A0%E9%99%A4%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%8E%E4%BE%9D%E7%84%B6%E6%AE%8B%E7%95%99%E7%9A%84%E5%9B%BE%E6%A0%87/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>在MAC，有时候删除应用程序后，发现 应用台 仍有该应用的图标</p>\n<h2 id=\"删除方法：\"><a href=\"#删除方法：\" class=\"headerlink\" title=\"删除方法：\"></a>删除方法：</h2><p>在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite3 $(find &#x2F;private&#x2F;var&#x2F;folders \\( -name com.apple.dock.launchpad -a -user $USER \\) 2&gt; &#x2F;dev&#x2F;null)&#x2F;db&#x2F;db &quot;DELETE FROM apps WHERE title&#x3D;&#39;TeamViewer&#39;;&quot; &amp;&amp; killall Dock</span><br></pre></td></tr></table></figure>\n<p>我这个是删除TeamViewer,如果要删除其他的，改成相应应用程序的名字即可<br>注意大小写</p>\n","categories":["mac"],"tags":["macOS","图标"]},{"title":"Navicat Premium 15.0.21 强大的数据库管理工具(Big Sur 可用)","url":"/2021/05/07/tools/Navicat%20Premium%2015.0.21%20%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7(Big%20Sur%20%E5%8F%AF%E7%94%A8)/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Navicat Premium 15.0.21 强大的数据库管理工具(Big Sur 可用)<br>链接： <a href=\"https://xclient.info/s/navicat-premium.html#versions\">https://xclient.info/s/navicat-premium.html#versions</a></p>\n","categories":["工具"],"tags":["macOS","Navicat"]},{"title":"percona-toolkit工具（数据一致性监测、延迟监控）使用梳理","url":"/2021/05/07/tools/percona-toolkit%E5%B7%A5%E5%85%B7%EF%BC%88%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E7%9B%91%E6%B5%8B%E3%80%81%E5%BB%B6%E8%BF%9F%E7%9B%91%E6%8E%A7%EF%BC%89%E4%BD%BF%E7%94%A8%E6%A2%B3%E7%90%86/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://www.cnblogs.com/kevingrace/p/6261091.html\">原文链接: MySQL 主从同步(3)-percona-toolkit工具（数据一致性监测、延迟监控）使用梳理\n</a></p>\n","categories":["工具"],"tags":["percona-toolkit","监控","监测","一致性"]},{"title":"pycharm如何配置pytest","url":"/2021/05/07/tools/pycharm%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEpytest/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Mac下<br>PyCharm Community Edition–&gt;Preference–&gt;Tools–&gt;Python Integrated Tools， 把Default test runner换为pytest就可以了</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117407710-81c77680-af41-11eb-8ff3-29540ac4720e.png\" alt=\"image\"></p>\n<p>正常情况下如下图<br><img src=\"https://user-images.githubusercontent.com/28568478/117407724-8724c100-af41-11eb-8c2a-7d2f3426c78d.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117407753-9441b000-af41-11eb-9ae6-4d1be9743971.png\" alt=\"image\"></p>\n<p>如果无法正常使用，则可能你最开始用unittest进行了测试  则需要按照下图删除使用过的测试文件即可<br><img src=\"https://user-images.githubusercontent.com/28568478/117407807-aa4f7080-af41-11eb-9a1c-5a09c623d1f6.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117407815-ad4a6100-af41-11eb-84f4-7794dd0d8887.png\" alt=\"image\"></p>\n","categories":["工具"],"tags":["python","pycharm"]},{"title":"Python3 利用string模块生成密码","url":"/2021/05/04/python/Python3%20%E5%88%A9%E7%94%A8string%E6%A8%A1%E5%9D%97%E7%94%9F%E6%88%90%E5%AF%86%E7%A0%81/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>string模块中定义了一些常用的属性，包含所有数字、字母、可打印的所有ascii码等</p>\n<p>实例</p>\n<ol>\n<li>ascii_letters 生成所有大小写字母（a-z A-Z）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">letters &#x3D; string.ascii_letters</span><br><span class=\"line\">print(letters)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>ascii_lowercase 生成所有小写字母（a-z）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">lowercase &#x3D; string.asscii_lowercase</span><br><span class=\"line\">print(lowercase)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></table></figure></li>\n<li><p>ascii_uppercase 生成所有大写字母（A-Z）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">uppercase &#x3D; string.ascii_uppercase</span><br><span class=\"line\">print(uppercase)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br></pre></td></tr></table></figure></li>\n<li><p>digits 生成所有数字（0-9）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">digits &#x3D; string.digits</span><br><span class=\"line\">print(digits)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 0123456789</span><br></pre></td></tr></table></figure></li>\n<li><p>punctuation 生成所有标点符号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">punctuation &#x3D; string.punctuation</span><br><span class=\"line\">print(punctuotion)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; !&quot;#$%&amp;&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\\]^_&#96;&#123;|&#125;~</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>#密码生成器<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    &quot;&quot;&quot;密码生成器&quot;&quot;&quot;</span><br><span class=\"line\">    a &#x3D; string.ascii_letters + string.digits + string.punctuation</span><br><span class=\"line\">    key &#x3D; random.sample(a, 16)</span><br><span class=\"line\">    keys &#x3D; &quot;&quot;.join(key)</span><br><span class=\"line\">    print(keys)</span><br></pre></td></tr></table></figure></p>\n","categories":["python"],"tags":["密码","gen-secret"]},{"title":"Python中tuple+=赋值的四个问题","url":"/2021/05/04/python/Python%E4%B8%ADtuple+=%E8%B5%8B%E5%80%BC%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>首先看第一个问题, 如下面的代码段:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] +&#x3D; [50,60]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>会产生什么结果呢？ 给出了四个选项:<br>1. <code>t</code> 变成 <code>[1,2, [30,40,50,60]</code> <br>2. <code>TypeError is raised with the message &#39;tuple&#39; object does not support item assignment</code> <br>3. Neither 1 nor 2<br>4. Both 1 and 2</p>\n<p>按照之前的理解, <code>tuple</code>里面的元素是不能被修改的，因此会选<code>2</code>. 如果真是这样的话，这篇笔记就没必要了，Fluent Python中也就不会拿出一节来讲了。 正确答案是<code>4</code></p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2,[30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] +&#x3D; [50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>问题来了，为什么异常都出来了， <code>t</code>还是变了? 再看第二种情况，稍微变化一下,将<code>+=</code>变为<code>=</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] &#x3D; [50,60]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果就成酱紫了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] &#x3D; [50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40])</span><br></pre></td></tr></table></figure>\n\n<p>再看第三种情况,只把<code>+=</code>换为<code>extend</code>或者<code>append</code>,:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1, 2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2].extend([50,60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2].append(70)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60, 70])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>又正常了,没抛出异常?</p>\n<p>最后第四种情况, 用变量的形式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a &#x3D; [30,40]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1, 2, a)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a+&#x3D;[50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">[30, 40, 50, 60]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] +&#x3D; [70,80]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60, 70, 80])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>又是一种情况, 下面就探究一下其中的原因.</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>首先需要重温<code>+=</code>这个运算符,如<code>a+=b</code>:</p>\n<ul>\n<li>  对于可变对象(mutable object)如<code>list</code>, <code>+=</code>操作的结果会直接在<code>a</code>对应的变量进行修改，而<code>a</code>对应的地址不变.</li>\n<li>  对于不可变对象(imutable object)如<code>tuple</code>, <code>+=</code>则是等价于<code>a = a+b</code> 会产生新的变量，然后绑定到<code>a</code>上而已.</li>\n</ul>\n<p>如下代码段, 可以看出来:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a &#x3D; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a)</span><br><span class=\"line\"></span><br><span class=\"line\">53430752</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a+&#x3D;[4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a)</span><br><span class=\"line\"></span><br><span class=\"line\">53430752 # 地址没有变化</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b &#x3D; (1,2,3)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(b)</span><br><span class=\"line\"></span><br><span class=\"line\">49134888</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b +&#x3D; (4,5)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, 3, 4, 5)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(b)</span><br><span class=\"line\"></span><br><span class=\"line\">48560912 # 地址变化了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此外还需要注意的是, python中的<code>tuple</code>作为不可变对象, 也就是我们平时说的元素不能改变, 实际上从报错信息<code>TypeError: &#39;tuple&#39; object does not support item assignment</code>来看, 更准确的说法是指其中的元素不支持赋值操作<code>=</code>(<strong>assignment</strong>).</p>\n<p>先看最简单的第二种情况, 它的结果是符合我们的预期, 因为<code>=</code>产生了<code>assign</code>的操作.(在<a href=\"http://shomy.top/2016/03/01/python-namespace-1/\">由一个例子到python的名字空间</a> 中指出了赋值操作<code>=</code>就是创建新的变量), 因此<code>s[2]=[50,60]</code>就会抛出异常.</p>\n<p>再看第三种情况,包含<code>extend/append</code>的, 结果tuple中的列表值发生了变化,但是没有异常抛出. 这个其实也相对容易理解. 因为我们知道<code>tuple</code>中存储的其实是元素所对应的地址(id), 因此如果没有赋值操作且tuple中的元素的<code>id</code>不变,即可,而<code>list.extend/append</code>只是修改了列表的元素,而列表本身id并没有变化,看看下面的例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a&#x3D;(1,2,[30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2])</span><br><span class=\"line\"></span><br><span class=\"line\">140628739513736</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[2].extend([50,60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2])</span><br><span class=\"line\"></span><br><span class=\"line\">140628739513736</span><br></pre></td></tr></table></figure>\n<p>目前解决了第二个和第三个问题, 先梳理一下, 其实就是两点:</p>\n<ul>\n<li>  tuple内部的元素不支持赋值操作</li>\n<li>  在第一条的基础上, 如果元素的<code>id</code>没有变化, 元素其实是可以改变的.</li>\n</ul>\n<p>现在再来看最初的第一个问题: <code>t[2] += [50,60]</code> 按照上面的结论, 不应该抛异常啊,因为在我们看来<code>+=</code> 对于可变对象<code>t[2]</code>来说, 属于<code>in-place</code>操作,也就是直接修改自身的内容, <code>id</code>并不变, 确认下id并没有变化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a&#x3D;(1,2,[30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2])</span><br><span class=\"line\"></span><br><span class=\"line\">140628739587392</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[2]+&#x3D;[50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2]) # ID 并没有发生改变</span><br><span class=\"line\"></span><br><span class=\"line\">140628739587392</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>跟第三个问题仅仅从<code>t[2].extend</code>改成了<code>t[2]+=</code>, 就抛出异常了,所以问题应该是出在<code>+=</code>上了. 下面用<code>dis</code>模块看看它俩执行的步骤: 对下面的代码块执行<code>dis</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">t[2] +&#x3D; [50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">t[2].extend([70, 80])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行<code>python -m dis test.py</code>,结果如下，下面只保留第2,3行代码的执行过程，以及关键步骤的注释如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2          21 LOAD_NAME                0 (t)</span><br><span class=\"line\"></span><br><span class=\"line\">           24 LOAD_CONST               1 (2)</span><br><span class=\"line\"></span><br><span class=\"line\">           27 DUP_TOPX                 2</span><br><span class=\"line\"></span><br><span class=\"line\">           30 BINARY_SUBSCR</span><br><span class=\"line\"></span><br><span class=\"line\">           31 LOAD_CONST               4 (50)</span><br><span class=\"line\"></span><br><span class=\"line\">           34 LOAD_CONST               5 (60)</span><br><span class=\"line\"></span><br><span class=\"line\">           37 BUILD_LIST               2</span><br><span class=\"line\"></span><br><span class=\"line\">           40 INPLACE_ADD</span><br><span class=\"line\"></span><br><span class=\"line\">           41 ROT_THREE</span><br><span class=\"line\"></span><br><span class=\"line\">           42 STORE_SUBSCR</span><br><span class=\"line\"></span><br><span class=\"line\">3          43 LOAD_NAME                0 (t)</span><br><span class=\"line\"></span><br><span class=\"line\">           46 LOAD_CONST               1 (2)</span><br><span class=\"line\"></span><br><span class=\"line\">           49 BINARY_SUBSCR</span><br><span class=\"line\"></span><br><span class=\"line\">           50 LOAD_ATTR                1 (extend)</span><br><span class=\"line\"></span><br><span class=\"line\">           53 LOAD_CONST               6 (70)</span><br><span class=\"line\"></span><br><span class=\"line\">           56 LOAD_CONST               7 (80)</span><br><span class=\"line\"></span><br><span class=\"line\">           59 BUILD_LIST               2</span><br><span class=\"line\"></span><br><span class=\"line\">           62 CALL_FUNCTION            1</span><br><span class=\"line\"></span><br><span class=\"line\">           65 POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">           66 LOAD_CONST               8 (None)</span><br><span class=\"line\"></span><br><span class=\"line\">           69 RETURN_VALUE</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>解释一下关键的语句:</p>\n<ul>\n<li>  <code>30 BINARY_SUBSCR</code>: 表示将<code>t[2]</code>的值放在TOS(Top of Stack)，这里是指<code>[30, 40]</code>这个列表</li>\n<li>  <code>40 INPLACE_ADD</code>: 表示<code>TOS += [50,60]</code> 执行这一步是可以成功的，修改了TOS的列表为<code>[30,40,50,60]</code></li>\n<li>  <code>42 STORE_SUBSCR</code>: 表示<code>s[2] = TOS</code> 问题就出在这里了，这里产生了一个<strong>赋值操作</strong>，因此会抛异常！但是上述对列表的修改已经完成, 这也就解释了开篇的第一个问题。</li>\n</ul>\n<p>再看<code>extend</code>的过程，前面都一样，只有这一行:</p>\n<ul>\n<li>  <code>62 CALL_FUNCTION</code>: 这个直接调用内置extend函数完成了对原列表的修改，其中并没有<code>assign</code>操作，因此可以正常执行。</li>\n</ul>\n<p>现在逐渐清晰了， 换句话说，<code>+=</code><strong>并不是原子操作</strong>，相当于下面的两步:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">t[2].extend([50,60])</span><br><span class=\"line\"></span><br><span class=\"line\">t[2] &#x3D; t[2]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>第一步可以正确执行，但是第二步有了<code>=</code>，肯定会抛异常的。 同样这也可以解释在使用<code>+=</code>的时候，为何<code>t[2]</code>的<code>id</code>明明没有变化，但是仍然抛出异常了。</p>\n<p>现在用一句话总结下:</p>\n<blockquote>\n<p>tuple中元素不支持<code>assign</code>操作，但是对于那些是可变对象的元素如列表，字典等，在没有<code>assign</code>操作的基础上，比如一些<code>in-place</code>操作，是可以修改内容的</p>\n</blockquote>\n<p>可以用第四个问题来简单验证一下，使用一个指向<code>[30,40]</code>的名称<code>a</code>来作为元素的值，然后对<code>a</code>做<code>in-place</code>的修改，其中并没有涉及到对tuple的<code>assign</code>操作，那肯定是正常执行的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个问题其实以前也就遇到过，但是没想过具体的原理，后来翻书的时候又看到了， 于是花了点时间把这一个系列查了部分资料以及结合自己的理解都整理了出来, 算是饭后茶点吧, 不严谨的地方烦请指出.</p>\n<p>部分参考如下:</p>\n<ul>\n<li>  <a href=\"http://bugs.python.org/issue11562\">python bugs</a></li>\n<li>  <a href=\"https://docs.python.org/2/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works\">python faq</a></li>\n<li>  <a href=\"https://stackoverflow.com/questions/10397121/why-does-of-a-list-within-a-python-tuple-raise-typeerror-but-modify-the-list\">stackoverflow</a></li>\n<li>  Fluent Python</li>\n</ul>\n<p>本文链接: <a href=\"http://shomy.top/2017/08/17/python-tuple-assign/\">http://shomy.top/2017/08/17/python-tuple-assign/</a></p>\n","categories":["python"],"tags":["tuple"]},{"title":"Python中字典的键为什么要是不可变类型","url":"/2021/05/04/python/Python%E4%B8%AD%E5%AD%97%E5%85%B8%E7%9A%84%E9%94%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>很多python初学者经常会有这样的疑问，为什么Python有tuple（元组）和list（列表）两种类型？为什么tuple可以作为字典的key，list不可以？要理解这个问题，首先要明白python的字典工作原理。</p>\n<span id=\"more\"></span>\n\n<p>Python的字典是如何工作的</p>\n<p>在Python中，字典也就是一个个的“映射”，将key映射到value：</p>\n<p>对一个特定的key可以得到一个value value = d[key]</p>\n<p>为了实现这个功能，Python必须能够做到，给出一个key，找到哪一个value与这个key对应。先来考虑一种比较简单的实现，将所有的key-value键值对存放到一个list中，每当需要的时候，就去遍历这个list，用key去和键值对的key匹配，如果相等，就拿到value。但是这种实现在数据量很大的时候就变得很低效。它的算法复杂度是O(n)，n是存放键值对的数量。</p>\n<p>为此，Python使用了hash（哈希）的方法来实现，要求每一个存放到字典中的对象都要实现hash函数，这个函数可以产生一个int值，叫做hash value（哈希值），通过这个int值，就可以快速确定对象在字典中的位置。</p>\n<p>这个查询的大致过程如下：</p>\n<p>def lookup(d, key): ‘’’字典的查询过程概括为下面3步: 1. 通过hash函数将key计算为哈希值. 2. 通过hash值确定一个位置，这个位置是一个存放着 可能存在冲突的元素的数组（很多地方叫做“桶”，bucket）， 每一个元素都是一个键值对，理想情况下，这个数组里只有1个元素. 3. 遍历这个数组，找到目标key，返回对应的value. ‘’’ h = hash(key)# step 1 cl = d.data[h]# step 2 for pairin cl:# step 3 if key == pair[0]: return pair[1] else: raise KeyError, “Key %s not found.” % key</p>\n<p>要使这个查找过程正常工作，hash函数必须满足条件： 如果两个key产生了不同的hash value，那么这两个key对象是不想等的。 即</p>\n<p>for alli1, i2, if hash(i1) != hash(i2), then i1 != i2</p>\n<p>否则的话，hash value不同，对象却相同，那么相同的对象产生不同的hash value，查找的时候就会进错桶（step 2），在错误的桶里永远也找不到你要找的value。</p>\n<p>另外，要让字典保持高查找效率，还要保证： 当两个key产生相同的hash value，那么他们是相等的。</p>\n<p>for alli1, i2, if hash(i1) == hash(i2), then i1 == i2</p>\n<p>这样做的目的是，尽量满足每个hash桶只有一个元素。为什么要这样呢？ 考虑下面这个hash函数。</p>\n<p>def hash(obj): return 1</p>\n<p>这个hash函数是满足上面我们谈的第一个条件的：如果两个key的hash value不同，那么两个key对象不相同。因为所有的对象产生的hash value都是1，所以不存在能产生不同hash value的key，也就不存在不满足的情况。但是这样做的坏处是，因为所有的hash value都相同，所以就把所有的对象分到了同一个地方。查找的时候，进行到第三步，遍历的效率就变成了O(n).</p>\n<p>Hash函数应该保证所有的元素平均的分配到每一个桶中，理想的情况是，每一个位置只有一个元素。</p>\n<p>字典Key要满足的要求</p>\n<p>经过上面的讨论，我们应该明白Python为什么对字典的key有这样的要求了：</p>\n<p>要作为字典的key，对象必须要支持hash函数（即__hash__），相等比较(__eq__或__cmp__），并且满足上面我们讨论过的条件。</p>\n<p>List为什么不能作为key</p>\n<p>至于这个问题，最直接的答案就是：list没有支持__hash__方法，那么为什么呢？</p>\n<p>对于list的hash函数，我们可能有下面两种实现的方式：</p>\n<p>第一种，基于id。这满足条件，“如果hash值不同，那么他们的id当然不同”。但考虑到list一般是作为容器，基于id来hash可能会导致下面两种情况：</p>\n<p>用相同的list作为key去字典中找某个元素可能会得到不同的结果，因为是基于id hash的，所以即使他们的内容相同，字典依然将他们作为不同的元素对待。 创建一个一模一样的list用字典查找永远会得到一个KeyError。</p>\n<p>第二种，基于内容。tuple就是这样做的，但是要注意一点，list是可以修改的。当list修改之后，你就永远别想再从字典中拿回来了。见下面的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; l &#x3D; [1, 2]</span><br><span class=\"line\">&gt;&gt;&gt; d &#x3D; &#123;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; d[l] &#x3D; 42</span><br><span class=\"line\">&gt;&gt;&gt; l.append(3)</span><br><span class=\"line\">&gt;&gt;&gt; d[l]</span><br><span class=\"line\"># 原来的hash值是基于[1, 2]hash的，</span><br><span class=\"line\"># 现在是基于[1, 2, 3]，所以找不到 Traceback (mostrecentcalllast): File &quot;&quot;, line 1, in ? KeyError: [1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; d[[1, 2]] # 基于hash [1, 2]</span><br><span class=\"line\"># 但是遍历的时候找不到key相等的键值对</span><br><span class=\"line\">#（因为字典里的key变成了[1, 2, 3] Traceback (mostrecentcalllast): File &quot;&quot;, line 1, in ? KeyError: [1, 2]</span><br></pre></td></tr></table></figure>\n<p>鉴于两种实现的方式都存在一定的副作用，所以Python规定：</p>\n<p>内置的list不能作为字典的key.</p>\n<p>但tuple是不可变，所以tuple可以作为字典的key。</p>\n<p>自定义的类型作为字典的Key</p>\n<p>用户自定义的类型就可以作为key了，默认的 hash(object) 是 id(object) , 默认的 cmp(object1,object2) 是 cmp(id(object1),id(object2))， 同样是可以修改的对象，为什么这里就没有上面说的问题呢？</p>\n<p>一般来说，在映射中比较常见的需求是用一个object替换掉原来的，所以id比内容更重要，就可以基于id来hash 如果内容重要的话，自定义的类型可以通过覆盖__hash__函数和__cmp__函数或__eq__函数来实现</p>\n<p>值得注意的是：将对象和一个value关联起来，更好的做法是将value设置为对象的一个属性。</p>\n","categories":["python"],"tags":["不可变类型","字典"]},{"title":"paramiko 远程执行命令","url":"/2021/05/04/python/paramiko%20%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Python学习总结-06-paramiko-远程执行命令\"><a href=\"#Python学习总结-06-paramiko-远程执行命令\" class=\"headerlink\" title=\"Python学习总结 06 paramiko 远程执行命令\"></a><a href=\"https://www.cnblogs.com/wangshuo1/p/6265360.html\">Python学习总结 06 paramiko 远程执行命令</a></h1><p>  有时会需要在远程的机器上执行一个命令，并获得其返回结果。对于这种情况，python 可以很容易的实现。</p>\n<h1 id=\"1-工具\"><a href=\"#1-工具\" class=\"headerlink\" title=\"1 工具\"></a>1 工具</h1><p>Python paramiko</p>\n<ol>\n<li>Paramiko模块安装</li>\n</ol>\n<p>　　在Linux的Terminal中，直接输入pip install paramiko 命令安装。</p>\n<p>2）确定paramiko安装成功</p>\n<p>　　在python命令行输入import paramiko，确认是否安装成功，没报错就没问题。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2 步骤\"></a>2 步骤</h1><p>1 导入 paramiko 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class=\"line\">import paramiko</span><br></pre></td></tr></table></figure>\n\n<p>2 创建 ssh 连接函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def ssh_connect( _host, _username, _password ):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        _ssh_fd &#x3D; paramiko.SSHClient()</span><br><span class=\"line\">        _ssh_fd.set_missing_host_key_policy( paramiko.AutoAddPolicy() )</span><br><span class=\"line\">        _ssh_fd.connect( _host, username &#x3D; _username, password &#x3D; _password )</span><br><span class=\"line\">    except Exception, e:</span><br><span class=\"line\">        print( &#39;ssh %s@%s: %s&#39; % (_username, _host, e) )</span><br><span class=\"line\">        exit()</span><br><span class=\"line\">    return _ssh_fd</span><br></pre></td></tr></table></figure>\n\n<p>3 创建命令执行函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def ssh_exec_cmd( _ssh_fd, _cmd ):</span><br><span class=\"line\">    return _ssh_fd.exec_command( _cmd )</span><br></pre></td></tr></table></figure>\n<p>4 创建关闭 ssh 函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def ssh_close( _ssh_fd ):</span><br><span class=\"line\">    _ssh_fd.close()</span><br></pre></td></tr></table></figure>\n\n<p>5 使用示例</p>\n<figure class=\"highlight plain\"><figcaption><span>main():</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">    hostname &#x3D; &#39;192.168.55.243&#39;</span><br><span class=\"line\">    port &#x3D; 22</span><br><span class=\"line\">    username &#x3D; &#39;root&#39;</span><br><span class=\"line\">    password &#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\">    cmd &#x3D; &quot;ps -ef|grep java&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    sshd &#x3D; ssh_connect( hostname , username , password )</span><br><span class=\"line\">    stdin, stdout, stderr &#x3D; ssh_exec_cmd( sshd, cmd )</span><br><span class=\"line\">    err_list &#x3D; stderr.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    if len( err_list ) &gt; 0:</span><br><span class=\"line\">        print &#39;ERROR:&#39; + err_list[0]</span><br><span class=\"line\">        exit()</span><br><span class=\"line\"></span><br><span class=\"line\">    for item in stdout.readlines():</span><br><span class=\"line\">        print item,</span><br><span class=\"line\">    ssh_close( sshd )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>　　如果执行脚本成功，会成功返回以下结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root      2540  2536  2 14:13 pts&#x2F;4    00:01:21 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.resource.App</span><br><span class=\"line\">root      3442  3387  0  2016 ?        01:09:00 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.product.App</span><br><span class=\"line\">root      3451  3390  0  2016 ?        01:04:54 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.report.App</span><br><span class=\"line\">root      3452  3388  0  2016 ?        00:51:00 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.workflow.launcher.App</span><br><span class=\"line\">root      3892  3886  0  2016 ?        00:29:59 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.charge.App</span><br><span class=\"line\">root      4509  4507  0 15:09 ?        00:00:00 bash -c ps -ef|grep java</span><br><span class=\"line\">root      4519  4509  0 15:09 ?        00:00:00 grep java</span><br><span class=\"line\">root     12861 12857  0 Jan06 ?        00:09:06 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.workorder.App</span><br><span class=\"line\">root     16484 16480  0  2016 ?        00:45:27 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.billing.App</span><br><span class=\"line\">root     18699 18694  0 Jan06 ?        00:09:30 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.order.App</span><br><span class=\"line\">root     21902 21898  0 Jan05 ?        00:18:46 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.user.launcher.App</span><br></pre></td></tr></table></figure>\n\n<p> 　　在实际的开发中，每次更新模块的jar包时，都需要使用 ps -ef | grep java, 查看模块的进程号，然后使用使用命令 kill -9 进程号，处理掉进程，然后重新启动 模块。</p>\n<p>下面尝试使用python脚本来代替手工输入代码。</p>\n<h1 id=\"3-实例\"><a href=\"#3-实例\" class=\"headerlink\" title=\"3 实例\"></a>3 实例</h1><p>1） 启动模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">import paramiko</span><br><span class=\"line\">ssh &#x3D; paramiko.SSHClient()</span><br><span class=\"line\">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\">ssh.connect(&#39;192.168.55.243&#39;, username &#x3D; &#39;root&#39;, password &#x3D; &#39;P@ssw0rd&#39;, timeout &#x3D; 5)</span><br><span class=\"line\">cmd &#x3D; &#39;nohup &#x2F;csdp&#x2F;charge_launcher-1.0-release&#x2F;bin&#x2F;run.sh &gt; &#x2F;csdp&#x2F;charge_launcher-1.0-release&#x2F;bin&#x2F;nohup.out 2&gt;&amp;1 &amp; \\r\\n&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">password&#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">stdin, stdout, stderr &#x3D; ssh.exec_command( cmd )</span><br><span class=\"line\">##stdin, stdout, stderr &#x3D; ssh.exec_command(&#39;sudo -S %s\\n&#39; % cmd )</span><br><span class=\"line\">##stdin.write(&#39;%s\\r\\n&#39; % password)</span><br><span class=\"line\">##stdin.flush()</span><br><span class=\"line\">print &quot;------------------------&quot;</span><br><span class=\"line\">##print stdout.readlines()</span><br><span class=\"line\">##print stderr.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print &quot;------------------------&quot;</span><br><span class=\"line\">cmd &#x3D; &#39;pwd&#39;</span><br><span class=\"line\">stdin, stdout, stderr &#x3D; ssh.exec_command(cmd )</span><br><span class=\"line\">print stdout.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">ssh.close()</span><br></pre></td></tr></table></figure>\n<p>2） 远程上传文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import paramiko</span><br><span class=\"line\"></span><br><span class=\"line\">serverIp &#x3D; &#39;192.168.55.243&#39;</span><br><span class=\"line\">serverUser &#x3D; &#39;root&#39;</span><br><span class=\"line\">serverPwd &#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">localFile &#x3D; &#39;user-1.0-release.jar&#39;</span><br><span class=\"line\">localpath &#x3D; r&#39;D:\\workspace\\csdp201512041\\csdp-ningxia\\csdp_user\\user\\target&#39; + os.sep + localFile</span><br><span class=\"line\"></span><br><span class=\"line\">remotepath &#x3D; &#39;&#x2F;csdp&#x2F;user_launcher-1.0-dev&#x2F;lib&#x2F;&#39; + localFile</span><br><span class=\"line\"></span><br><span class=\"line\">def ftpModuleFile():</span><br><span class=\"line\">    t &#x3D; paramiko.Transport(( serverIp ,22))</span><br><span class=\"line\">    t.connect(username &#x3D; serverUser , password &#x3D; serverPwd)</span><br><span class=\"line\">    sftp &#x3D; paramiko.SFTPClient.from_transport(t)</span><br><span class=\"line\">   # remotepath&#x3D;&#39;&#x2F;csdp&#x2F;user_launcher-1.0-dev&#x2F;user-1.0-release.jar&#39;</span><br><span class=\"line\">   # localpath&#x3D; r&#39;D:\\workspace\\csdp201512041\\csdp-ningxia\\csdp_user\\user\\target\\user-1.0-release.jar&#39;</span><br><span class=\"line\">    sftp.put(localpath,remotepath)</span><br><span class=\"line\">    t.close()</span><br><span class=\"line\">    print(&quot;：） 成功上传%s文件。&quot; % remotepath)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">   ftpModuleFile()</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>执行远程linux命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import paramiko</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    hostname &#x3D; &#39;192.168.55.243&#39;</span><br><span class=\"line\">    port &#x3D; 22</span><br><span class=\"line\">    username &#x3D; &#39;root&#39;</span><br><span class=\"line\">    password &#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\">    cmd &#x3D; &quot;ps -ef|grep java&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh &#x3D; paramiko.SSHClient()</span><br><span class=\"line\">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\">    #ssh.connect( hostname ,22, username , password )</span><br><span class=\"line\">    ssh.connect(hostname,username&#x3D;username,password&#x3D;password,allow_agent&#x3D;False,look_for_keys&#x3D;False)</span><br><span class=\"line\">    stdin, stdout, stderr &#x3D; ssh.exec_command(cmd )</span><br><span class=\"line\">    list &#x3D; stdout.readlines()</span><br><span class=\"line\">    print( list )</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh.close()</span><br></pre></td></tr></table></figure>\n","categories":["python"],"tags":["paramiko"]},{"title":"python 列表加法\"+\"和\"extend\"的区别","url":"/2021/05/04/python/python%20%E5%88%97%E8%A1%A8%E5%8A%A0%E6%B3%95%22+%22%E5%92%8C%22extend%22%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点:\"></a>相同点:</h3><ul>\n<li> “+”和”extend”都能将两个列表成员拼接到到一起</li>\n</ul>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点:\"></a>不同点:</h3><ul>\n<li><p> + : 生成的是一个新列表(id改变)</p>\n</li>\n<li><p>extend : 是将一个列表的成员一个个取出添加到原列表中 , 改变的是原列表的值 , id不变</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117003180-21ed8780-ad17-11eb-97fc-fedcf041db5d.png\" alt=\"image\"></p>\n","categories":["python"],"tags":["list"]},{"title":"python 生成器和迭代器","url":"/2021/05/04/python/python%20%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本节主要记录一下列表生成式，生成器和迭代器的知识点</p>\n<h3 id=\"列表生成器\"><a href=\"#列表生成器\" class=\"headerlink\" title=\"列表生成器\"></a><strong>列表生成器</strong></h3><p><strong>首先举个例子</strong></p>\n<p>现在有个需求，看列表 [0，1，2，3，4，5，6，7，8，9]，要求你把列表里面的每个值加1，你怎么实现呢？</p>\n<p>方法一（简单）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">b &#x3D; []</span><br><span class=\"line\"># for index,i in enumerate(info):</span><br><span class=\"line\">#     print(i+1)</span><br><span class=\"line\">#     b.append(i+1)</span><br><span class=\"line\"># print(b)</span><br><span class=\"line\">for index,i in enumerate(info):</span><br><span class=\"line\">    info[index] +&#x3D;1</span><br><span class=\"line\">print(info)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>方法二（一般）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">a &#x3D; map(lambda x:x+1,info)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">for i in a:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n\n<p>方法三（高级）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">a &#x3D; [i+1 for i in range(10)]</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><h4 id=\"什么是生成器？\"><a href=\"#什么是生成器？\" class=\"headerlink\" title=\"什么是生成器？\"></a>什么是生成器？</h4><p>　　通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>　　所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，<strong>在Python中，这种一边循环一边计算的机制，称为生成器：generator</strong></p>\n<p>　　生成器是一个特殊的程序，可以被用作控制循环的迭代行为，<strong>python中生成器是迭代器的一种</strong>，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器。</p>\n<p>　　生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器</p>\n<h4 id=\"python中的生成器\"><a href=\"#python中的生成器\" class=\"headerlink\" title=\"python中的生成器\"></a>python中的生成器</h4><p>　　要创建一个generator，有很多种方法，第一种方法很简单，<strong>只有把一个列表生成式的[]中括号改为（）小括号，就创建一个generator</strong></p>\n<p>举例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#列表生成式</span><br><span class=\"line\">lis &#x3D; [x*x for x in range(10)]</span><br><span class=\"line\">print(lis)</span><br><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex &#x3D; (x*x for x in range(10))</span><br><span class=\"line\">print(generator_ex)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</span><br></pre></td></tr></table></figure>\n<p>　　那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是&lt;generator object <genexpr> at 0x000002A4CBF9EBA0&gt;，那么如何打印出来generator_ex的每一个元素呢？</genexpr></p>\n<p>　　如果要一个个打印出来，可以通过next（）函数获得generator的下一个返回值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex &#x3D; (x*x for x in range(10))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">结果：</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">9</span><br><span class=\"line\">16</span><br><span class=\"line\">25</span><br><span class=\"line\">36</span><br><span class=\"line\">49</span><br><span class=\"line\">64</span><br><span class=\"line\">81</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;列表生成式.py&quot;, line 42, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    print(next(generator_ex))</span><br><span class=\"line\"></span><br><span class=\"line\">StopIteration</span><br></pre></td></tr></table></figure>\n<p>　　大家可以看到，generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误，而且上面这样不断调用是一个不好的习惯，正确的方法是使用for循环，因为generator也是可迭代对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex &#x3D; (x*x for x in range(10))</span><br><span class=\"line\">for i in generator_ex:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">9</span><br><span class=\"line\">16</span><br><span class=\"line\">25</span><br><span class=\"line\">36</span><br><span class=\"line\">49</span><br><span class=\"line\">64</span><br><span class=\"line\">81</span><br></pre></td></tr></table></figure>\n<p>　　所以我们创建一个generator后，基本上永远不会调用next()，而是通过for循环来迭代，并且不需要关心StopIteration的错误，generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。</p>\n<p>比如著名的斐波那契数列，除第一个和第二个数外，任何一个数都可以由前两个相加得到：</p>\n<p>1，1，2，3，5，8，12，21，34…..</p>\n<p>斐波那契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#fibonacci数列</span><br><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; fib(10)</span><br><span class=\"line\">print(fib(10))</span><br></pre></td></tr></table></figure>\n\n<p>　　a,b = b ,a+b  其实相当于 t =a+b ,a =b ,b =t  ，所以不必写显示写出临时变量t，就可以输出斐波那契数列的前N个数字。上面输出的结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br><span class=\"line\">13</span><br><span class=\"line\">21</span><br><span class=\"line\">34</span><br><span class=\"line\">55</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br><span class=\"line\">13</span><br><span class=\"line\">21</span><br><span class=\"line\">34</span><br><span class=\"line\">55</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>　　仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p>\n<p>　　也就是说上面的函数也可以用generator来实现，上面我们发现，print(b)每次函数运行都要打印，占内存，所以为了不占内存，我们也可以使用生成器，这里叫yield。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; fib(10)</span><br><span class=\"line\">print(fib(10))</span><br></pre></td></tr></table></figure>\n<p>　　但是返回的不再是一个值，而是一个生成器，和上面的例子一样，大家可以看一下结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;generator object fib at 0x000001C03AC34FC0&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　那么这样就不占内存了，这里说一下generator和函数的执行流程，函数是顺序执行的，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次被next（）调用时候从上次的返回yield语句处急需执行，也就是用多少，取多少，不占内存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; fib(10)</span><br><span class=\"line\">print(fib(10))</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(&quot;可以顺便干其他事情&quot;)</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">&lt;generator object fib at 0x0000023A21A34FC0&gt;</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">可以顺便干其他事情</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<p>　　在上面fib的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。同样的，把函数改成generator后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\">for i in fib(6):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<p>　　但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果拿不到返回值，那么就会报错，所以为了不让报错，就要进行异常处理，拿到返回值，如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\">g &#x3D; fib(6)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        x &#x3D; next(g)</span><br><span class=\"line\">        print(&#39;generator: &#39;,x)</span><br><span class=\"line\">    except StopIteration as e:</span><br><span class=\"line\">        print(&quot;生成器返回值：&quot;,e.value)</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">generator:  1</span><br><span class=\"line\">generator:  1</span><br><span class=\"line\">generator:  2</span><br><span class=\"line\">generator:  3</span><br><span class=\"line\">generator:  5</span><br><span class=\"line\">generator:  8</span><br><span class=\"line\">生成器返回值： done</span><br></pre></td></tr></table></figure>\n<p><strong>还可以通过yield实现在单线程的情况下实现并发运算的效果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">def consumer(name):</span><br><span class=\"line\">    print(&quot;%s 准备学习啦!&quot; %name)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">       lesson &#x3D; yield</span><br><span class=\"line\"></span><br><span class=\"line\">       print(&quot;开始[%s]了,[%s]老师来讲课了!&quot; %(lesson,name))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def producer(name):</span><br><span class=\"line\">    c &#x3D; consumer(&#39;A&#39;)</span><br><span class=\"line\">    c2 &#x3D; consumer(&#39;B&#39;)</span><br><span class=\"line\">    c.__next__()</span><br><span class=\"line\">    c2.__next__()</span><br><span class=\"line\">    print(&quot;同学们开始上课 了!&quot;)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        print(&quot;到了两个同学!&quot;)</span><br><span class=\"line\">        c.send(i)</span><br><span class=\"line\">        c2.send(i)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">A 准备学习啦!</span><br><span class=\"line\">B 准备学习啦!</span><br><span class=\"line\">同学们开始上课 了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[0]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[0]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[1]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[1]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[2]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[2]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[3]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[3]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[4]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[4]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[5]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[5]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[6]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[6]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br></pre></td></tr></table></figure>\n<p>　　由上面的例子我么可以发现，python提供了两种基本的方式</p>\n<p><strong>生成器函数：也是用def定义的，利用关键字yield一次性返回一个结果，阻塞，重新开始</strong></p>\n<p><strong>生成器表达式：返回一个对象，这个对象只有在需要的时候才产生结果</strong></p>\n<h4 id=\"——生成器函数\"><a href=\"#——生成器函数\" class=\"headerlink\" title=\"——生成器函数\"></a>——生成器函数</h4><p>为什么叫生成器函数？因为它随着时间的推移生成了一个数值队列。一般的函数在执行完毕之后会返回一个值然后退出，但是生成器函数会自动挂起，然后重新拾起急需执行，他会利用yield关键字关起函数，给调用者返回一个值，同时保留了当前的足够多的状态，可以使函数继续执行，生成器和迭代协议是密切相关的，<strong>迭代器都有一个__next__()__成员方法，</strong>这个方法要么返回迭代的下一项，要买引起异常结束迭代。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 函数有了yield之后，函数名+（）就变成了生成器</span><br><span class=\"line\"># return在生成器中代表生成器的中止，直接报错</span><br><span class=\"line\"># next的作用是唤醒并继续执行</span><br><span class=\"line\"># send的作用是唤醒并继续执行，发送一个信息到生成器内部</span><br><span class=\"line\">&#39;&#39;&#39;生成器&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">def create_counter(n):</span><br><span class=\"line\">    print(&quot;create_counter&quot;)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        yield n</span><br><span class=\"line\">        print(&quot;increment n&quot;)</span><br><span class=\"line\">        n +&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">gen &#x3D; create_counter(2)</span><br><span class=\"line\">print(gen)</span><br><span class=\"line\">print(next(gen))</span><br><span class=\"line\">print(next(gen))</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">&lt;generator object create_counter at 0x0000023A1694A938&gt;</span><br><span class=\"line\">create_counter</span><br><span class=\"line\">2</span><br><span class=\"line\">increment n</span><br><span class=\"line\">3</span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"——生成器表达式\"><a href=\"#——生成器表达式\" class=\"headerlink\" title=\"——生成器表达式\"></a>——生成器表达式</h4><p>生成器表达式来源于迭代和列表解析的组合，生成器和列表解析类似，但是它使用尖括号而不是方括号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; # 列表解析生成列表</span><br><span class=\"line\">&gt;&gt;&gt; [ x ** 3 for x in range(5)]</span><br><span class=\"line\">[0, 1, 8, 27, 64]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; # 生成器表达式</span><br><span class=\"line\">&gt;&gt;&gt; (x ** 3 for x in range(5))</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000000000315F678&gt;</span><br><span class=\"line\">&gt;&gt;&gt; # 两者之间转换</span><br><span class=\"line\">&gt;&gt;&gt; list(x ** 3 for x in range(5))</span><br><span class=\"line\">[0, 1, 8, 27, 64]</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>一个迭代既可以被写成生成器函数，也可以被协程生成器表达式，均支持自动和手动迭代。而且这些生成器只支持一个active迭代，也就是说生成器的迭代器就是生成器本身。</strong></p>\n<h3 id=\"迭代器（迭代就是循环）\"><a href=\"#迭代器（迭代就是循环）\" class=\"headerlink\" title=\"迭代器（迭代就是循环）\"></a>迭代器（迭代就是循环）</h3><p>**　　迭代器包含有next方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出StopIteration的错误停止迭代。**</p>\n<p>　　我们已经知道，可以直接作用于for循环的数据类型有以下几种：</p>\n<p>一类是集合数据类型，如list,tuple,dict,set,str等</p>\n<p>一类是generator，包括生成器和带yield的generator function</p>\n<p>这些可以直接作用于for 循环的对象统称为可迭代对象：Iterable</p>\n<p>可以使用isinstance()判断一个对象是否为可<strong>Iterable</strong>对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n<p>　　而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。</p>\n<p>所以这里讲一下迭代器</p>\n<p><strong>一个实现了iter方法的对象时可迭代的，一个实现next方法的对象是迭代器</strong></p>\n<p><strong>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。</strong></p>\n<p>可以使用isinstance()判断一个对象是否是<strong>Iterator</strong>对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable（可迭代对象）</code>，却不是<code>Iterator（迭代器）</code>。</p>\n<p><strong>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code><strong>可以使用<code>iter()</code>函数</strong>：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; isinstance(iter([]), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(iter(&#39;abc&#39;), Iterator)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p>\n<p>这是因为Python的<code>Iterator</code>对象表示的是一个<strong>数据流</strong>，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p>\n<p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p>\n<p><strong>判断下列数据类型是可迭代对象or迭代器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;&#39;hello&#39;</span><br><span class=\"line\">l&#x3D;[1,2,3,4]</span><br><span class=\"line\">t&#x3D;(1,2,3)</span><br><span class=\"line\">d&#x3D;&#123;&#39;a&#39;:1&#125;</span><br><span class=\"line\">set&#x3D;&#123;1,2,3&#125;</span><br><span class=\"line\">f&#x3D;open(&#39;a.txt&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">s&#x3D;&#39;hello&#39;     #字符串是可迭代对象，但不是迭代器</span><br><span class=\"line\">l&#x3D;[1,2,3,4]     #列表是可迭代对象，但不是迭代器</span><br><span class=\"line\">t&#x3D;(1,2,3)       #元组是可迭代对象，但不是迭代器</span><br><span class=\"line\">d&#x3D;&#123;&#39;a&#39;:1&#125;        #字典是可迭代对象，但不是迭代器</span><br><span class=\"line\">set&#x3D;&#123;1,2,3&#125;     #集合是可迭代对象，但不是迭代器</span><br><span class=\"line\"># *************************************</span><br><span class=\"line\">f&#x3D;open(&#39;test.txt&#39;) #文件是可迭代对象，是迭代器</span><br><span class=\"line\"></span><br><span class=\"line\">#如何判断是可迭代对象，只有__iter__方法，执行该方法得到的迭代器对象。</span><br><span class=\"line\"># 及可迭代对象通过__iter__转成迭代器对象</span><br><span class=\"line\">from collections import Iterator  #迭代器</span><br><span class=\"line\">from collections import Iterable  #可迭代对象</span><br><span class=\"line\"></span><br><span class=\"line\">print(isinstance(s,Iterator))     #判断是不是迭代器</span><br><span class=\"line\">print(isinstance(s,Iterable))       #判断是不是可迭代对象</span><br><span class=\"line\"></span><br><span class=\"line\">#把可迭代对象转换为迭代器</span><br><span class=\"line\">print(isinstance(iter(s),Iterator))</span><br></pre></td></tr></table></figure>\n<p>**　注意：文件的判断**</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">f &#x3D; open(&#39;housing.csv&#39;)</span><br><span class=\"line\">from collections import Iterator</span><br><span class=\"line\">from collections import Iterable</span><br><span class=\"line\"></span><br><span class=\"line\">print(isinstance(f,Iterator))</span><br><span class=\"line\">print(isinstance(f,Iterable))</span><br><span class=\"line\"></span><br><span class=\"line\">True</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>结论：文件是可迭代对象，也是迭代器</strong></p>\n<p><strong>小结：</strong></p>\n<ul>\n<li>  凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</li>\n<li>  凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</li>\n<li>  集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</li>\n</ul>\n<p>Python3的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for x in [1, 2, 3, 4, 5]:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<p>　实际上完全等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 首先获得Iterator对象:</span><br><span class=\"line\">it &#x3D; iter([1, 2, 3, 4, 5])</span><br><span class=\"line\"># 循环:</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获得下一个值:</span><br><span class=\"line\">        x &#x3D; next(it)</span><br><span class=\"line\">    except StopIteration:</span><br><span class=\"line\">        # 遇到StopIteration就退出循环</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<h3 id=\"对yield的总结\"><a href=\"#对yield的总结\" class=\"headerlink\" title=\"对yield的总结\"></a>对yield的总结</h3><p>　　（1）通常的for..in…循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。他可以是a = [1,2,3]，也可以是a = [x*x for x in range(3)]。</p>\n<p>它的缺点也很明显，就是所有数据都在内存里面，如果有海量的数据，将会非常耗内存。</p>\n<p>　　（2）生成器是可以迭代的，但是只可以读取它一次。因为用的时候才生成，比如a = (x*x for x in range(3))。!!!!注意这里是小括号而不是方括号。</p>\n<p>　　（3）生成器（generator）能够迭代的关键是他有next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。</p>\n<p>　　（4）带有yield的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代</p>\n<p>　　（5）yield是一个类似return 的关键字，迭代一次遇到yield的时候就返回yield后面或者右面的值。而且下一次迭代的时候，从上一次迭代遇到的yield后面的代码开始执行</p>\n<p>　　（6）yield就是return返回的一个值，并且记住这个返回的位置。下一次迭代就从这个位置开始。</p>\n<p>　　（7）带有yield的函数不仅仅是只用于for循环，而且可用于某个函数的参数，只要这个函数的参数也允许迭代参数。</p>\n<p>　　（8）send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</p>\n<p>　　（9）send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</p>\n<p>　　（10）第一次调用时候必须先next（）或send（）,否则会报错，send后之所以为None是因为这时候没有上一个yield，所以也可以认为next（）等同于send(None)</p>\n<h5 id=\"原文：python-生成器和迭代器有这篇就够了\"><a href=\"#原文：python-生成器和迭代器有这篇就够了\" class=\"headerlink\" title=\"原文：python 生成器和迭代器有这篇就够了\"></a><a href=\"https://www.cnblogs.com/wj-1314/p/8490822.html\">原文：python 生成器和迭代器有这篇就够了</a></h5>","categories":["python"],"tags":["python生成器","python迭代器"]},{"title":"python内置函数-排列组合函数","url":"/2021/05/04/python/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>product 笛卡尔积　　（有放回抽样排列）</p>\n<p>permutations 排列　　（不放回抽样排列）</p>\n<p>combinations 组合,没有重复　　（不放回抽样组合）</p>\n<p>combinations_with_replacement 组合,有重复　　（有放回抽样组合）</p>\n<span id=\"more\"></span>\n\n<p>详细的参见<a href=\"https://docs.python.org/2/library/itertools.html\">官网</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; for i in itertools.product(&#39;ABCD&#39;, repeat &#x3D; 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;A&#39;) (&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;A&#39;) (&#39;B&#39;, &#39;B&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;A&#39;) (&#39;C&#39;, &#39;B&#39;) (&#39;C&#39;, &#39;C&#39;) (&#39;C&#39;, &#39;D&#39;) (&#39;D&#39;, &#39;A&#39;) (&#39;D&#39;, &#39;B&#39;) (&#39;D&#39;, &#39;C&#39;) (&#39;D&#39;, &#39;D&#39;)</span><br><span class=\"line\">&gt;&gt;&gt; for i in itertools.permutations(&#39;ABCD&#39;, 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;A&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;A&#39;) (&#39;C&#39;, &#39;B&#39;) (&#39;C&#39;, &#39;D&#39;) (&#39;D&#39;, &#39;A&#39;) (&#39;D&#39;, &#39;B&#39;) (&#39;D&#39;, &#39;C&#39;)</span><br><span class=\"line\">&gt;&gt;&gt; for i in itertools.combinations(&#39;ABCD&#39;, 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;D&#39;)</span><br><span class=\"line\">&gt;&gt;&gt; for i in itertools.combinations_with_replacement(&#39;ABCD&#39;, 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;A&#39;) (&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;B&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;C&#39;) (&#39;C&#39;, &#39;D&#39;) (&#39;D&#39;, &#39;D&#39;)&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure>\n\n<p>还有就是，combinations和permutations返回的是对象地址，原因是在python3里面，返回值已经不再是list,而是iterators（迭代器）, 所以想要使用，只用将iterator 转换成list 即可， 还有其他一些函数返回的也是一个对象，需要list转换，比如 list(map())等</p>\n","categories":["python"],"tags":["python内置函数"]},{"title":"创建python SDK 并上传至pypi","url":"/2021/05/28/python/%E5%88%9B%E5%BB%BApython%20SDK%20%E5%B9%B6%E4%B8%8A%E4%BC%A0%E8%87%B3pypi/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"一、python打包创建SDK\"><a href=\"#一、python打包创建SDK\" class=\"headerlink\" title=\"一、python打包创建SDK\"></a>一、python打包创建SDK</h1><h3 id=\"1、首先，我们需要一个工具包来协助我们完成python打包的任务\"><a href=\"#1、首先，我们需要一个工具包来协助我们完成python打包的任务\" class=\"headerlink\" title=\"1、首先，我们需要一个工具包来协助我们完成python打包的任务\"></a>1、首先，我们需要一个工具包来协助我们完成python打包的任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install setuptools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、之后封装好你的项目api\"><a href=\"#2、之后封装好你的项目api\" class=\"headerlink\" title=\"2、之后封装好你的项目api\"></a>2、之后封装好你的项目api</h3><p>目录结构</p>\n<p>├─python-sdk<br>│  │  <code>README.md</code><br>│  │  <code>setup.py</code><br>│  └─<code>Demo</code><br>|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  |  <code>demo.py</code><br>|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;│ <code>__init__.py</code><br>|</p>\n<p>Demo/demo.py.py中只有一个输出函数demo（），这里可以自行封装自己的api</p>\n<span id=\"more\"></span>\n<h3 id=\"3、编写setup-py文件，用于安装Demo包\"><a href=\"#3、编写setup-py文件，用于安装Demo包\" class=\"headerlink\" title=\"3、编写setup.py文件，用于安装Demo包\"></a>3、编写setup.py文件，用于安装Demo包</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">setup.py各参数介绍：</span><br><span class=\"line\">    --name 包名称</span><br><span class=\"line\">    --version (-V) 包版本</span><br><span class=\"line\">    --author 程序的作者</span><br><span class=\"line\">    --author_email 程序的作者的邮箱地址</span><br><span class=\"line\">    --maintainer 维护者</span><br><span class=\"line\">    --maintainer_email 维护者的邮箱地址</span><br><span class=\"line\">    --url 程序的官网地址</span><br><span class=\"line\">    --license 程序的授权信息</span><br><span class=\"line\">    --description 程序的简单描述</span><br><span class=\"line\">    --long_description 程序的详细描述</span><br><span class=\"line\">    --platforms 程序适用的软件平台列表</span><br><span class=\"line\">    --classifiers 程序的所属分类列表</span><br><span class=\"line\">    --keywords 程序的关键字列表</span><br><span class=\"line\">    --packages 需要处理的包目录（包含__init__.py的文件夹）</span><br><span class=\"line\">    --py_modules 需要打包的python文件列表</span><br><span class=\"line\">    --download_url 程序的下载地址</span><br><span class=\"line\">    --cmdclass</span><br><span class=\"line\">    --data_files 打包时需要打包的数据文件，如图片，配置文件等</span><br><span class=\"line\">    --scripts 安装时需要执行的脚步列表</span><br><span class=\"line\">    --package_dir 告诉setuptools哪些目录下的文件被映射到哪个源码包。一个例子：package_dir &#x3D; &#123;&#39;&#39;: &#39;lib&#39;&#125;，表示“root package”中的模块都在lib 目录中。</span><br><span class=\"line\">    --requires 定义依赖哪些模块</span><br><span class=\"line\">    --provides定义可以为哪些模块提供依赖</span><br><span class=\"line\">    --find_packages() 对于简单工程来说，手动增加packages参数很容易，刚刚我们用到了这个函数，它默认在和setup.py同一目录下搜索各个含有 __init__.py的包。</span><br><span class=\"line\"></span><br><span class=\"line\">                        其实我们可以将包统一放在一个src目录中，另外，这个包内可能还有aaa.txt文件和data数据文件夹。另外，也可以排除一些特定的包</span><br><span class=\"line\"></span><br><span class=\"line\">                            find_packages(exclude&#x3D;[&quot;*.tests&quot;, &quot;*.tests.*&quot;, &quot;tests.*&quot;, &quot;tests&quot;])</span><br><span class=\"line\"></span><br><span class=\"line\">    --install_requires &#x3D; [&quot;requests&quot;] 需要安装的依赖包</span><br><span class=\"line\">    --entry_points 动态发现服务和插件，下面详细讲</span><br></pre></td></tr></table></figure>\n<p>下列entry_points中： console_scripts 指明了命令行工具的名称；在“redis_run = RedisRun.redis_run:main”中，等号前面指明了工具包的名称，等号后面的内容指明了程序的入口地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 entry_points&#x3D;&#123;&#39;console_scripts&#39;: [</span><br><span class=\"line\">2         &#39;redis_run &#x3D; RedisRun.redis_run:main&#39;,</span><br><span class=\"line\">3 ]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以有多条记录，这样一个项目就可以制作多个命令行工具了，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 setup(</span><br><span class=\"line\">2     entry_points &#x3D; &#123;</span><br><span class=\"line\">3         &#39;console_scripts&#39;: [</span><br><span class=\"line\">4             &#39;foo &#x3D; demo:test&#39;,</span><br><span class=\"line\">5             &#39;bar &#x3D; demo:test&#39;,</span><br><span class=\"line\">6         ]&#125;</span><br><span class=\"line\">7 ）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1、setup-py的项目示例代码\"><a href=\"#1、setup-py的项目示例代码\" class=\"headerlink\" title=\"1、setup.py的项目示例代码\"></a>1、setup.py的项目示例代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 #!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\">2 # coding&#x3D;utf-8</span><br><span class=\"line\">3</span><br><span class=\"line\">4 from setuptools import setup</span><br><span class=\"line\">5</span><br><span class=\"line\">6 &#39;&#39;&#39;</span><br><span class=\"line\">7 把redis服务打包成C:\\Python27\\Scripts下的exe文件</span><br><span class=\"line\">8 &#39;&#39;&#39;</span><br><span class=\"line\">9</span><br><span class=\"line\">10 setup(</span><br><span class=\"line\">11     name&#x3D;&quot;RedisRun&quot;,  #pypi中的名称，pip或者easy_install安装时使用的名称，或生成egg文件的名称</span><br><span class=\"line\">12     version&#x3D;&quot;1.0&quot;,</span><br><span class=\"line\">13     author&#x3D;&quot;Andreas Schroeder&quot;,</span><br><span class=\"line\">14     author_email&#x3D;&quot;andreas@drqueue.org&quot;,</span><br><span class=\"line\">15     description&#x3D;(&quot;This is a service of redis subscripe&quot;),</span><br><span class=\"line\">16     license&#x3D;&quot;GPLv3&quot;,</span><br><span class=\"line\">17     keywords&#x3D;&quot;redis subscripe&quot;,</span><br><span class=\"line\">18     url&#x3D;&quot;https:&#x2F;&#x2F;ssl.xxx.org&#x2F;redmine&#x2F;projects&#x2F;RedisRun&quot;,</span><br><span class=\"line\">19     packages&#x3D;[&#39;RedisRun&#39;],  # 需要打包的目录列表</span><br><span class=\"line\">20</span><br><span class=\"line\">21     # 需要安装的依赖</span><br><span class=\"line\">22     install_requires&#x3D;[</span><br><span class=\"line\">23         &#39;redis&gt;&#x3D;2.10.5&#39;,</span><br><span class=\"line\">24         &#39;setuptools&gt;&#x3D;16.0&#39;,</span><br><span class=\"line\">25     ],</span><br><span class=\"line\">26</span><br><span class=\"line\">27     # 添加这个选项，在windows下Python目录的scripts下生成exe文件</span><br><span class=\"line\">28     # 注意：模块与函数之间是冒号:</span><br><span class=\"line\">29     entry_points&#x3D;&#123;&#39;console_scripts&#39;: [</span><br><span class=\"line\">30         &#39;redis_run &#x3D; RedisRun.redis_run:main&#39;,</span><br><span class=\"line\">31     ]&#125;,</span><br><span class=\"line\">32</span><br><span class=\"line\">33     # long_description&#x3D;read(&#39;README.md&#39;),</span><br><span class=\"line\">34     classifiers&#x3D;[  # 程序的所属分类列表</span><br><span class=\"line\">35         &quot;Development Status :: 3 - Alpha&quot;,</span><br><span class=\"line\">36         &quot;Topic :: Utilities&quot;,</span><br><span class=\"line\">37         &quot;License :: OSI Approved :: GNU General Public License (GPL)&quot;,</span><br><span class=\"line\">38     ],</span><br><span class=\"line\">39     # 此项需要，否则卸载时报windows error</span><br><span class=\"line\">40     zip_safe&#x3D;False</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2、简单setup-py的项目示例代码\"><a href=\"#2、简单setup-py的项目示例代码\" class=\"headerlink\" title=\"2、简单setup.py的项目示例代码\"></a>2、简单setup.py的项目示例代码</h4><p>上边的setup.py比较复杂，参数较多，可根据自己的实际情况做删减，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import setuptools</span><br><span class=\"line\"></span><br><span class=\"line\">#  打包: python setup.py sdist</span><br><span class=\"line\">#  对包进行检查: twine check dist&#x2F;*</span><br><span class=\"line\">#  运行上传: twine upload dist&#x2F;* --config-file .pypirc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 读取项目的readme介绍</span><br><span class=\"line\">with open(&quot;README.md&quot;, &quot;r&quot;) as fh:</span><br><span class=\"line\">    long_description &#x3D; fh.read()</span><br><span class=\"line\">setuptools.setup(</span><br><span class=\"line\">    name&#x3D;&quot;******SDK&quot;,</span><br><span class=\"line\">    version&#x3D;&quot;1.0.2&quot;,</span><br><span class=\"line\">    author&#x3D;&quot;******&quot;,  # 项目作者</span><br><span class=\"line\">    author_email&#x3D;&quot;******@qq.com&quot;,</span><br><span class=\"line\">    description&#x3D;&quot;This is the official Python SDK for Niffler Analytics.&quot;,</span><br><span class=\"line\">    long_description&#x3D;long_description,</span><br><span class=\"line\">    long_description_content_type&#x3D;&quot;text&#x2F;markdown&quot;,</span><br><span class=\"line\">    url&#x3D;&quot;******&quot;,</span><br><span class=\"line\">    packages&#x3D;setuptools.find_packages(),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"二、用Python将库打包发布到pypi\"><a href=\"#二、用Python将库打包发布到pypi\" class=\"headerlink\" title=\"二、用Python将库打包发布到pypi\"></a>二、用Python将库打包发布到pypi</h1><p>如果需要将自己写好的python打包，并发布到pypi，这样其他人就可以直接通过pip install来安装对应的包，可以参考如下教程</p>\n<h3 id=\"1-注册pypi账号并创建token\"><a href=\"#1-注册pypi账号并创建token\" class=\"headerlink\" title=\"1. 注册pypi账号并创建token\"></a>1. 注册pypi账号并创建token</h3><p><img src=\"https://img.jbzj.com/file_images/article/202104/2021041314454555.png\"><br>然后选择API token-&gt;Add API token<br><img src=\"https://img.jbzj.com/file_images/article/202104/2021041314454556.png\"></p>\n<p>输入token name并在Scope中选择Entire account（第一次需要选择Entire account）<br><img src=\"https://img.jbzj.com/file_images/article/202104/2021041314454557.png\"><br>然后在本地，修改<code>.pypirc</code>文件<br>输入的内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[pypi]</span><br><span class=\"line\">username &#x3D; __token__</span><br><span class=\"line\">password &#x3D; &#123;token&#125;</span><br></pre></td></tr></table></figure>\n<p>只需要修改<code>&#123;token&#125;</code>为自己的token即可</p>\n<h3 id=\"2、打包\"><a href=\"#2、打包\" class=\"headerlink\" title=\"2、打包\"></a>2、打包</h3><p>打包命令为<code>python setup.py cmd</code><br>cmd可以取值为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bdist_wheel : create a wheel distribution</span><br><span class=\"line\">bdist_egg : create an “egg” distribution</span><br><span class=\"line\">sdist : create a source distribution (tarball, zip file, etc.)</span><br><span class=\"line\">bdist : create a built (binary) distribution</span><br><span class=\"line\">bdist_dumb : create a “dumb” built distribution</span><br><span class=\"line\">bdist_rpm : create an RPM distribution</span><br><span class=\"line\">bdist_wininst : create an executable installer for MS Windows</span><br></pre></td></tr></table></figure>\n<p>打包为tar.gz</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python setup.py sdist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、上传\"><a href=\"#3、上传\" class=\"headerlink\" title=\"3、上传\"></a>3、上传</h3><p>安装twine <code> pip install twine</code><br>可以首先使用<code>twine</code>对包进行检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">twine check dist&#x2F;*</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><img src=\"https://img.jbzj.com/file_images/article/202104/2021041314454560.png\"></p>\n<p>再运行上传命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">twine upload dist&#x2F;*</span><br></pre></td></tr></table></figure>\n<p>数据注册好的pypi的用户名密码即可，如果在<code>.pypirc</code>文件中配置了用户名密码，也可以直接指定这个文件为配置文件</p>\n<p>可以用Makefile来自动运行打包上传</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upload: ## 编译dockerbase</span><br><span class=\"line\">\t@echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;start...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br><span class=\"line\">\trm -rf .&#x2F;dist</span><br><span class=\"line\">\trm -rf .&#x2F;NifflerAnalyticsSDK.egg-info</span><br><span class=\"line\">\t@echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;python setup.py sdist...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br><span class=\"line\">\tpython setup.py sdist</span><br><span class=\"line\">\t@echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;check...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br><span class=\"line\">\ttwine check dist&#x2F;*</span><br><span class=\"line\">\t@echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;upload...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br><span class=\"line\">\ttwine upload dist&#x2F;* --config-file .pypirc</span><br><span class=\"line\">\t@echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;finished...&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;</span><br></pre></td></tr></table></figure>\n","categories":["python"],"tags":["SDK","pypi"]},{"title":"安装Python","url":"/2021/05/04/python/%E5%AE%89%E8%A3%85Python/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"How-to-Install-Python\"><a href=\"#How-to-Install-Python\" class=\"headerlink\" title=\"How to Install Python\"></a><a href=\"https://linuxize.com/post/how-to-install-python-3-7-on-ubuntu-18-04/\">How to Install Python</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev  libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev   liblzma-dev libffi-dev  libc6-dev</span><br><span class=\"line\"></span><br><span class=\"line\">1. 下载源码包</span><br><span class=\"line\">     wget   https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.3&#x2F;Python-3.7.3.tgz</span><br><span class=\"line\">2. mkdir -p &#x2F;usr&#x2F;local&#x2F;python3</span><br><span class=\"line\">3. mv Python-3.7.3.tgz &#x2F;usr&#x2F;local&#x2F;python3</span><br><span class=\"line\">4. tar -zxf Python-3.7.3.tgz</span><br><span class=\"line\">5. cd python3.7.3</span><br><span class=\"line\">6. .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 --with-ssl  --enable-optimizations</span><br><span class=\"line\">7. make</span><br><span class=\"line\">8. make install</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3 [#确认是否是需要的版本]</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3.7 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br><span class=\"line\"></span><br><span class=\"line\">安装pip3 apt-get install python3-pip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mac-安装python\"><a href=\"#mac-安装python\" class=\"headerlink\" title=\"mac 安装python\"></a>mac 安装python</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install python</span><br><span class=\"line\">brew install python@3.9 # 安装指定版本</span><br></pre></td></tr></table></figure>\n","categories":["python"]},{"title":"浅析深拷贝浅拷贝","url":"/2021/05/04/python/%E6%B5%85%E6%9E%90%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本文主要介绍python中的深拷贝和浅拷贝究竟从底层ID来看是怎么回事</p>\n<span id=\"more\"></span>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117002717-80663600-ad16-11eb-9151-ccd5e05a538b.png\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117002786-94119c80-ad16-11eb-9c19-dd44d0494db8.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002798-996ee700-ad16-11eb-9a72-4cbcdd780596.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002811-9e339b00-ad16-11eb-9c55-2555f7bfc671.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002821-a2f84f00-ad16-11eb-8d56-7d4aa3dde512.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002835-a7246c80-ad16-11eb-8ce6-85764cfff7fe.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002847-abe92080-ad16-11eb-95f5-a8381a3042f4.png\" alt=\"image\"></p>\n","categories":["python"],"tags":["python 深拷贝浅拷贝"]},{"title":"Linux访问远程服务器文件——NFS+mount挂载","url":"/2021/05/07/Linux/Linux%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94NFS+mount%E6%8C%82%E8%BD%BD/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有两台服务器，S1和S2，Linux操作系统，S1和S2IP不同，但是可以相互访问。</p>\n<p>S2需要访问S1的文件系统，换言之，S1中有文件夹被分享给S2使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>假设 S1的ip为 192.168.1.2，要分享为公共文件夹的目录为 /tmp/share</p>\n<p>假设 S2的ip为 192.168.1.3，接受上传文件的目录为 /usr/tomcat/here</p>\n<h2 id=\"运行场景\"><a href=\"#运行场景\" class=\"headerlink\" title=\"运行场景\"></a>运行场景</h2><p>在实际使用中，直接向 192.168.1.3 的 /usr/tomcat/here 中保存文件，或者删除文件，都相当于在 192.168.1.2 /tmp/share中进行操作</p>\n<span id=\"more\"></span>\n<h2 id=\"开始实施\"><a href=\"#开始实施\" class=\"headerlink\" title=\"开始实施\"></a>开始实施</h2><h3 id=\"一、S1服务器的设置\"><a href=\"#一、S1服务器的设置\" class=\"headerlink\" title=\"一、S1服务器的设置\"></a>一、S1服务器的设置</h3><h4 id=\"1、检查-S1，即需要提供分享文件夹的服务器是否具有NFS服务\"><a href=\"#1、检查-S1，即需要提供分享文件夹的服务器是否具有NFS服务\" class=\"headerlink\" title=\"1、检查 S1，即需要提供分享文件夹的服务器是否具有NFS服务\"></a>1、检查 S1，即需要提供分享文件夹的服务器是否具有NFS服务</h4><p>$ rpm -qa |grep nfs</p>\n<p>如果安装了，则会打印一些信息，</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/129548625-3bf0255e-f506-4651-a1a6-ee67e9f078b5.png\" alt=\"image\"></p>\n<p>否则什么也不会发生，就需要安装了</p>\n<p>使用root权限</p>\n<p><code>$ yum install nfs-utils</code></p>\n<h4 id=\"2、修改-S1中的-etc-exports\"><a href=\"#2、修改-S1中的-etc-exports\" class=\"headerlink\" title=\"2、修改 S1中的/etc/exports\"></a>2、修改 S1中的/etc/exports</h4><p>增加语句</p>\n<p><code>/tmp/share 192.168.1.3(rw,no_root_squash,async)</code></p>\n<p>看出来格式了吗？允许 Ip为192.168.1.3的服务器访问本服务器的/tmp/share文件夹，后面括号里的内容是必须的，设定了一些操作规则</p>\n<p>关于exports 的内容可以参考 <a href=\"http://blog.chinaunix.net/uid-21089721-id-2327441.html\">http://blog.chinaunix.NET/uid-21089721-id-2327441.html</a></p>\n<h4 id=\"3、重启NFS服务\"><a href=\"#3、重启NFS服务\" class=\"headerlink\" title=\"3、重启NFS服务\"></a>3、重启NFS服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ service portmap start( service rpcbind start)</span><br><span class=\"line\"></span><br><span class=\"line\">$ service nfs start</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<p><code>$ service nfs restart</code></p>\n<p>以上 三步完成了S1的所有设置，S1又被叫做服务端</p>\n<h5 id=\"注意：每次配置完成-etc-exports后都要重启nfs服务\"><a href=\"#注意：每次配置完成-etc-exports后都要重启nfs服务\" class=\"headerlink\" title=\"注意：每次配置完成/etc/exports后都要重启nfs服务\"></a>注意：每次配置完成/etc/exports后都要重启nfs服务</h5><h3 id=\"二、S2服务器的设置\"><a href=\"#二、S2服务器的设置\" class=\"headerlink\" title=\"二、S2服务器的设置\"></a>二、S2服务器的设置</h3><h4 id=\"1、接下来是S2的设置，就比较简单了\"><a href=\"#1、接下来是S2的设置，就比较简单了\" class=\"headerlink\" title=\"1、接下来是S2的设置，就比较简单了\"></a>1、接下来是S2的设置，就比较简单了</h4><p>注意！S2中也必须安装nfs服务</p>\n<p>否则会报错：wrong fs type, bad option, bad superblock</p>\n<p>假设 S2的ip为 192.168.1.3，接受上传文件的目录为 /usr/tomcat/here</p>\n<p>这里 /usr/tomcat/here 是需要存在的，被称为挂载点</p>\n<p>如果不存在可以创建（-p 的意思是如果父目录不存在则创建）</p>\n<p><code>mkdir -p /usr/tomcat/here</code></p>\n<h4 id=\"2、然后运行\"><a href=\"#2、然后运行\" class=\"headerlink\" title=\"2、然后运行\"></a>2、然后运行</h4><p><code>$ mount -t nfs 192.168.1.2:/tmp/share /usr/tomcat/here</code></p>\n<p>格式上就是，mount -t nfs S1的IP：S1分享的目录 S2直接操作的目录</p>\n<p>这样操作S2的这个目录就相当于直接S1分享的目录了，当然，操作S1的分享的目录，这个S2里的内容也会跟着变</p>\n<h4 id=\"3-查看目前客户端的挂载情况\"><a href=\"#3-查看目前客户端的挂载情况\" class=\"headerlink\" title=\"3.查看目前客户端的挂载情况\"></a>3.查看目前客户端的挂载情况</h4><p><code>$ mount | grep nfs</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/129548589-24f517ef-2dcb-45a1-8556-4f47b75b745f.png\" alt=\"image\"></p>\n<h2 id=\"去除客户端的挂载\"><a href=\"#去除客户端的挂载\" class=\"headerlink\" title=\"去除客户端的挂载\"></a>去除客户端的挂载</h2><p><code>$ umount /var/tmp/share</code></p>\n<p>或者</p>\n<p><code>$ umount -l /var/tmp/share</code></p>\n<p>/var/tmp/share 是客户端的目录，注意这个是我本地的实验数据，不要和上面的混淆</p>\n<p>其次，这里命令中加了 -l ，是强制执行的命令，对于出现device is busy 时才可以使用</p>\n<p>参考的文章</p>\n<p>1、<a href=\"http://zhuang13.blog.51cto.com/3044154/557879\">http://zhuang13.blog.51cto.com/3044154/557879</a></p>\n<p>2、<a href=\"http://www.cnblogs.com/mchina/archive/2013/01/03/2840040.html\">http://www.cnblogs.com/mchina/archive/2013/01/03/2840040.html</a></p>\n<p>3、<a href=\"http://blog.chinaunix.net/uid-21089721-id-2327441.html\">http://blog.chinaunix.Net/uid-21089721-id-2327441.html</a></p>\n<h2 id=\"mount挂载永久设置（不建议，系统启动会很慢）\"><a href=\"#mount挂载永久设置（不建议，系统启动会很慢）\" class=\"headerlink\" title=\"mount挂载永久设置（不建议，系统启动会很慢）\"></a>mount挂载永久设置（不建议，系统启动会很慢）</h2><p>按照上面的操作，客户端即S2的目录挂载是临时的，服务器重启后就失效了，如果需要永久设置另外需要操作。</p>\n<p><a href=\"http://blog.csdn.net/a2683901/article/details/43274991\">http://blog.csdn.net/a2683901/article/details/43274991</a></p>\n<p>vim /etc/fstab //在最后一行添加下面一行信息<br>192.168.1.253:/testnfs /testnfs_client nfs defaults 0 0</p>\n<p>重启 mount -a</p>\n<h2 id=\"自动挂载设置（推荐）\"><a href=\"#自动挂载设置（推荐）\" class=\"headerlink\" title=\"自动挂载设置（推荐）\"></a>自动挂载设置（推荐）</h2><p>自动挂载用到的软件包automount，一般系统都默认安装了的。如果没有安装再安装下：</p>\n<p><code>yum install autofs</code></p>\n<p>先在根目录创建一个用于自动挂载的目录</p>\n<p><code>mkdir /u01</code></p>\n<p>编辑配置文件</p>\n<p><code>vim /etc/auto.master</code></p>\n<p>最后一行添加（左边目录是指需要挂载的目录，右边目录是指关联到所需自动挂载路径</p>\n<p><code>/u01 /etc/auto.nfs</code></p>\n<p>新建我们刚刚设置的自动挂载路径，添加如下信息</p>\n<p><code>vim /etc/auto.nfs</code></p>\n<p>左边代表自动挂载目录(cd mount 会自动挂载)，中间权限，sync 代表同步，右边代表所需挂载的文件路径</p>\n<p><code>mount -rw,sync 192.168.1.253:/testnfs</code></p>\n<p>重置自动挂载map</p>\n<p><code>service autofs reload</code></p>\n<p>这时，我们去访问我们建立的自动挂载目录，去触发自动挂载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xuan ~]# cd &#x2F;u01&#x2F;</span><br><span class=\"line\">[root@xuan nfs_mount]# ls</span><br><span class=\"line\">[root@xuan nfs_mount]# cd mount      &#x2F;&#x2F;上面ls查看没有mount目录，但是我们可以cd访问mount目录去触发自动挂载</span><br><span class=\"line\">[root@xuan nfs_client]# ls</span><br><span class=\"line\">testfile</span><br></pre></td></tr></table></figure>\n\n\n<p>nfs 服务器端的其他命令</p>\n<p><code>$ service nfs &#123;start|stop|status|restart|reload|force-reload|condrestart|try-restart|condstop&#125;</code></p>\n<p>nfs服务自动启动<br>正常而言，nfs服务需在系统启动后手动启动，通过下面的设置可以使nfs服务在系统重启的时候自动启动</p>\n<p><code>$ chkconfig –level 345 nfs on</code></p>\n<p>检查结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ chkconfig –list nfs</span><br><span class=\"line\"></span><br><span class=\"line\">0:off1:off 2:off3:on 4:on5:on 6:off</span><br></pre></td></tr></table></figure>\n\n<p>命令格式参考</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/129548520-f5bb0130-8bdf-49e8-a1a5-6a13db2eec8e.png\" alt=\"image\"></p>\n<p>详解：<a href=\"http://blog.chinaunix.net/uid-22287947-id-1991563.html\">http://blog.chinaunix.net/uid-22287947-id-1991563.html</a></p>\n<p>原文链接：<a href=\"https://blog.csdn.net/zwfmu/article/details/70300808\">https://blog.csdn.net/zwfmu/article/details/70300808</a></p>\n","categories":["Linux"],"tags":["NFS+mount挂载","服务器之间目录软连"]},{"title":"driver failed programming external connectivity on endpoint nginx","url":"/2021/05/16/Linux/driver%20failed%20programming%20external%20connectivity%20on%20endpoint%20nginx/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>今天在阿里云部署服务的时候报如下错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@iZ2zeagh7rzys1hl53collZ:~&#x2F;data&#x2F;csh_bk&#x2F;docker# docker-compose -f nginx&#x2F;docker-compose.yml up</span><br><span class=\"line\">Creating nginx ...</span><br><span class=\"line\">Creating nginx ... error</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: for nginx  Cannot start service nginx: driver failed programming external connectivity on endpoint nginx (84a2d44102b6fd874d94c52c199958bbb88214bf31890d9a66e264336f2a9794):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0&#x2F;0 --dport 80 -j DNAT --to-destination 172.20.0.2:80 ! -i br-90c5e5593694: iptables: No chain&#x2F;target&#x2F;match by that name.</span><br><span class=\"line\"> (exit status 1))</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: for nginx  Cannot start service nginx: driver failed programming external connectivity on endpoint nginx (84a2d44102b6fd874d94c52c199958bbb88214bf31890d9a66e264336f2a9794):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0&#x2F;0 --dport 80 -j DNAT --to-destination 172.20.0.2:80 ! -i br-90c5e5593694: iptables: No chain&#x2F;target&#x2F;match by that name.</span><br><span class=\"line\"> (exit status 1))</span><br><span class=\"line\">ERROR: Encountered errors while bringing up the project.</span><br></pre></td></tr></table></figure>\n\n<p>1、本身部署服务需要按照Nginx  mysql redis<br>2、安装完成后去阿里云设置安全组，打开对应的端口<br>3、打开后发现mysql和redis都可以访问  但是Nginx无法访问<br>4、后来发现是不小心动了防火墙，导致docker异常，重启docker服务，然后再重启对应服务即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因:\"></a>原因:</h4><p>docker服务启动时定义的自定义链DOCKER由于 centos7 firewall 被清掉</p>\n<p>firewall的底层是使用iptables进行数据过滤，建立在iptables之上，这可能会与 Docker 产生冲突。</p>\n<p>当 firewalld 启动或者重启的时候，将会从 iptables 中移除 DOCKER 的规则，从而影响了 Docker 的正常工作。</p>\n<p>当你使用的是 Systemd 的时候， firewalld 会在 Docker 之前启动，但是如果你在 Docker 启动之后再启动 或者重启 firewalld ，你就需要重启 Docker 进程了。</p>\n<p>重启docker服务及可重新生成自定义链DOCKER</p>\n<p>参考：<a href=\"https://blog.csdn.net/liyanhui1001/article/details/107507847\">https://blog.csdn.net/liyanhui1001/article/details/107507847</a></p>\n","categories":["Linux"],"tags":["nginx","docker","aliyun"]},{"title":"linux 新添加的硬盘格式化并挂载到目录下","url":"/2021/05/07/Linux/linux%20%E6%96%B0%E6%B7%BB%E5%8A%A0%E7%9A%84%E7%A1%AC%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%B9%B6%E6%8C%82%E8%BD%BD%E5%88%B0%E7%9B%AE%E5%BD%95%E4%B8%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>需求: 新增加一块硬盘sdb，将sdb分区，只分一个区，格式化，挂载到目录/ssd下。</p>\n<h3 id=\"1、-查看现在已有的分区状态\"><a href=\"#1、-查看现在已有的分区状态\" class=\"headerlink\" title=\"1、  查看现在已有的分区状态\"></a>1、  查看现在已有的分区状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df –l</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395814-491ca280-af2b-11eb-8e34-b84381e67aa8.png\" alt=\"image\"></p>\n<p>图中显示，没有看到sdb硬盘</p>\n<span id=\"more\"></span>\n<h3 id=\"2、-查看服务器安装的硬盘状态（包括格式化和未格式化）\"><a href=\"#2、-查看服务器安装的硬盘状态（包括格式化和未格式化）\" class=\"headerlink\" title=\"2、  查看服务器安装的硬盘状态（包括格式化和未格式化）\"></a>2、  查看服务器安装的硬盘状态（包括格式化和未格式化）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fdisk –l</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395838-56399180-af2b-11eb-8651-47c79b52057f.png\" alt=\"image\"></p>\n<p>图中显示，有sdb硬盘，但是没有分区。</p>\n<h3 id=\"3、-添加新分区\"><a href=\"#3、-添加新分区\" class=\"headerlink\" title=\"3、  添加新分区\"></a>3、  添加新分区</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fdisk &#x2F;dev&#x2F;sdb</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395863-6b162500-af2b-11eb-8a91-9e72f69c44fc.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">按照以下红框输入</span><br><span class=\"line\"></span><br><span class=\"line\">N 回车</span><br><span class=\"line\"></span><br><span class=\"line\">P 回车</span><br><span class=\"line\"></span><br><span class=\"line\">1 回车</span><br><span class=\"line\"></span><br><span class=\"line\">两次回车</span><br><span class=\"line\"></span><br><span class=\"line\">W 回车</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395883-7701e700-af2b-11eb-88bb-20616afd029b.png\" alt=\"image\"></p>\n<p>用以下命令查看分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fdisk –l</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395904-8123e580-af2b-11eb-864c-57a14b6ece56.png\" alt=\"image\"></p>\n<p>图中红框显示已多出了一个分区，但是还没有格式化。</p>\n<h3 id=\"4、-格式化分区\"><a href=\"#4、-格式化分区\" class=\"headerlink\" title=\"4、  格式化分区\"></a>4、  格式化分区</h3><p>centos6文件系统是ext4，因为设计较早，对于现今动辄上T的海量数据处理，性能较低。centos7文件系统是xfs，适用于海量数据。这两种文件系统都是日志文件系统。使用该文件系统的磁盘，空间包括两部分：日志空间和存储空间。写入的数据是先暂存在日志空间，然后刷入存储空间，这样有利于恢复数据。另外，xfs文件系统还支持将一块儿固态硬盘用作单独的日志空间盘，数据先写入固态硬盘，然后再刷入硬盘。对于操作系统来说，数据写入了日志空间盘，就算完成了I/O，因此这种方式提高了系统性能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># mkfs -t ext4 -c &#x2F;dev&#x2F;sdb1</span><br><span class=\"line\"># -t 制定要把磁盘格式化成什么类型</span><br><span class=\"line\"># -c 在建立文件系统之前检查坏道，可能会很费时间，新硬盘一般不需要</span><br><span class=\"line\"></span><br><span class=\"line\"># 新硬盘可直接用此命令 格式化成不同类型的硬盘</span><br><span class=\"line\">sudo mkfs.ext4 &#x2F;dev&#x2F;nvme1n1</span><br><span class=\"line\"></span><br><span class=\"line\">mkfs.xfs -f &#x2F;dev&#x2F;vdb</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看硬盘类型</span><br><span class=\"line\">df -T</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395938-926cf200-af2b-11eb-9502-7b04a448c146.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117395944-96007900-af2b-11eb-8797-4e08db65d265.png\" alt=\"image\"></p>\n<h3 id=\"5、-挂载新硬盘\"><a href=\"#5、-挂载新硬盘\" class=\"headerlink\" title=\"5、  挂载新硬盘\"></a>5、  挂载新硬盘</h3><p>在根目录下，建一个文件夹，待会将分区挂载在这个文件夹上，以后要往新硬盘存东西就存在新建文件夹下就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;ssd</span><br></pre></td></tr></table></figure>\n\n<p>挂载硬盘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount &#x2F;dev&#x2F;sdb1 &#x2F;ssd</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395965-a153a480-af2b-11eb-9bed-22f5f33c9908.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chown ec2-user:root &#x2F;data1   用户权限</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、-让系统开机自动挂载这块硬盘\"><a href=\"#6、-让系统开机自动挂载这块硬盘\" class=\"headerlink\" title=\"6、  让系统开机自动挂载这块硬盘\"></a>6、  让系统开机自动挂载这块硬盘</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;&#x2F;dev&#x2F;sda1 &#x2F;ssd ext4 defaults 0 0&quot; &gt;&gt; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>\n\n<p>如果报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">先更改权限</span><br><span class=\"line\">sudo chown ec2-user:root  &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117396002-ae709380-af2b-11eb-8cb4-66d295993e02.png\" alt=\"image\"></p>\n<h2 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h2><p>挂载硬盘</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mount  &#x2F;dev&#x2F;nvme1n1  &#x2F;data1</span><br></pre></td></tr></table></figure>\n\n<p>取消挂载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo umount  &#x2F;dev&#x2F;nvme1n1</span><br></pre></td></tr></table></figure>\n\n<p>如果 /data1里原先有数据 他会自己保留 取消挂载后 会恢复回来</p>\n<h2 id=\"查看文件夹大小\"><a href=\"#查看文件夹大小\" class=\"headerlink\" title=\"查看文件夹大小\"></a>查看文件夹大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">du -h .&#x2F;scheduler&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">du -sh .&#x2F;scheduler&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">参数解释</span><br><span class=\"line\"></span><br><span class=\"line\">-a ： 列出所有的文件与目录容量，因为默认仅统计目录的容量而已</span><br><span class=\"line\"></span><br><span class=\"line\">-h: 以人们较易读的容量格式呈现(G&#x2F;M&#x2F;K)显示，自动选择显示的单位大小</span><br><span class=\"line\"></span><br><span class=\"line\">-s : 列出总量而已，而不列出每个个别的目录占用容量</span><br><span class=\"line\"></span><br><span class=\"line\">-k ： 以KB为单位进行显示</span><br><span class=\"line\"></span><br><span class=\"line\">-m : 以MB为单位进行显示常用[命令](https:&#x2F;&#x2F;www.linuxcool.com&#x2F;)参考  查看当前目录大小</span><br></pre></td></tr></table></figure>\n\n\n<p>参考文档：<br>    <a href=\"https://blog.csdn.net/Ayhan_huang/article/details/72801647\">linux下查看硬盘信息、硬盘分区、格式化、挂载、及swap分区</a><br>    <a href=\"https://www.cnblogs.com/ddbear/p/7009736.html\">linux 新添加的硬盘格式化并挂载到目录下</a></p>\n","categories":["Linux"],"tags":["硬盘挂载"]},{"title":"linux下df -hT和du -sh 显示的数据非常不一致解决方法","url":"/2021/09/24/Linux/linux%E4%B8%8Bdf%20-hT%E5%92%8Cdu%20-sh%20%E6%98%BE%E7%A4%BA%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9D%9E%E5%B8%B8%E4%B8%8D%E4%B8%80%E8%87%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>使用lsof|grep delete命令查看正在使用的已删除的文件，发现存在多个这样的文件，kill掉进程，问题解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for i in &#96;lsof |grep deleted |awk &#39;&#123; print $2 &#125;&#39;&#96;; do kill -9 $i ;done</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["df","du"]},{"title":"linux下free命令详解","url":"/2021/05/07/Linux/linux%E4%B8%8Bfree%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>free 命令显示系统内存的使用情况，包括物理内存、交换内存(swap)和内核缓冲区内存。</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406270-6e1b1080-af3f-11eb-82b0-07b44528dcc8.png\" alt=\"image\"></p>\n<p>如果加上 -h 选项，输出的结果会友好很多：</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406278-71ae9780-af3f-11eb-8dc8-937a2f08fb00.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n\n<p>有时我们需要持续的观察内存的状况，此时可以使用 -s 选项并指定间隔的秒数， -c选项指定展示次数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ free -h -c 100 -s 3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406294-75421e80-af3f-11eb-9093-97ddd1dc614f.png\" alt=\"image\"></p>\n<p>上面的命令每隔 3 秒输出一次内存的使用情况，直到你按下 ctrl + c。</p>\n<p>由于 free 命令本身比较简单，所以本文的重点会放在如何通过 free 命令了解系统当前的内存使用状况。</p>\n<h1 id=\"输出简介\"><a href=\"#输出简介\" class=\"headerlink\" title=\"输出简介\"></a>输出简介</h1><p>下面先解释一下输出的内容：<br><strong>Mem</strong> 行(第二行)是内存的使用情况。<br><strong>Swap</strong> 行(第三行)是交换空间的使用情况。<br><strong>total</strong> 列显示系统总的可用物理内存和交换空间大小。<br><strong>used</strong> 列显示已经被使用的物理内存和交换空间。<br><strong>free</strong> 列显示还有多少物理内存和交换空间可用使用。<br><strong>shared</strong> 列显示被共享使用的物理内存大小。<br><strong>buff/cache</strong> 列显示被 buffer 和 cache 使用的物理内存大小。<br><strong>available</strong> 列显示还可以被应用程序使用的物理内存大小。</p>\n<p>我想只有在理解了一些基本概念之后，上面的输出才能帮助我们了解系统的内存状况。</p>\n<h1 id=\"buff-cache\"><a href=\"#buff-cache\" class=\"headerlink\" title=\"buff/cache\"></a>buff/cache</h1><p>先来提一个问题： buffer 和 cache 应该是两种类型的内存，但是 free 命令为什么会把它们放在一起呢？要回答这个问题需要我们做些准备工作。让我们先来搞清楚 buffer 与 cache 的含义。</p>\n<p><strong>buffer</strong> 在操作系统中指 buffer cache， 中文一般翻译为 “缓冲区”。要理解缓冲区，必须明确另外两个概念：”扇区” 和 “块”。扇区是设备的最小寻址单元，也叫 “硬扇区” 或 “设备块”。块是操作系统中文件系统的最小寻址单元，也叫 “文件块” 或 “I/O 块”。每个块包含一个或多个扇区，但大小不能超过一个页面，所以一个页可以容纳一个或多个内存中的块。当一个块被调入内存时，它要存储在一个缓冲区中。每个缓冲区与一个块对应，它相当于是磁盘块在内存中的表示(下图来自互联网)：</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406319-7a9f6900-af3f-11eb-846f-4047421d5435.png\" alt=\"image\"></p>\n<p>注意，buffer cache 只有块的概念而没有文件的概念，它只是把磁盘上的块直接搬到内存中而不关心块中究竟存放的是什么格式的文件。</p>\n<p><strong>cache</strong> 在操作系统中指 page cache，中文一般翻译为 “页高速缓存”。页高速缓存是内核实现的磁盘缓存。它主要用来减少对磁盘的 I/O 操作。具体地讲，是通过把磁盘中的数据缓存到物理内存中，把对磁盘的访问变为对物理内存的访问。页高速缓存缓存的是内存页面。<strong>缓存中的页来自对普通文件、块设备文件(这个指的就是 buffer cache 呀)和内存映射文件的读写</strong>。<br>页高速缓存对普通文件的缓存我们可以这样理解：当内核要读一个文件(比如 /etc/hosts)时，它会先检查这个文件的数据是不是已经在页高速缓存中了。如果在，就放弃访问磁盘，直接从内存中读取。这个行为称为缓存命中。如果数据不在缓存中，就是未命中缓存，此时内核就要调度块 I/O 操作从磁盘去读取数据。然后内核将读来的数据放入页高速缓存中。这种缓存的目标是文件系统可以识别的文件(比如 /etc/hosts)。<br>页高速缓存对块设备文件的缓存就是我们在前面介绍的 buffer cahce。因为独立的磁盘块通过缓冲区也被存入了页高速缓存(缓冲区最终是由页高速缓存来承载的)。</p>\n<p>到这里我们应该搞清楚了：无论是缓冲区还是页高速缓存，它们的实现方式都是一样的。缓冲区只不过是一种概念上比较特殊的页高速缓存罢了。<br>那么为什么 free 命令不直接称为 cache 而非要写成 buff/cache？ 这是因为缓冲区和页高速缓存的实现并非天生就是统一的。在 linux 内核 2.4 中才将它们统一。更早的内核中有两个独立的磁盘缓存：页高速缓存和缓冲区高速缓存。前者缓存页面，后者缓存缓冲区。当你知道了这些故事之后，输出中列的名称可能已经不再重要了。</p>\n<h1 id=\"free-与-available\"><a href=\"#free-与-available\" class=\"headerlink\" title=\"free 与 available\"></a>free 与 available</h1><p>在 free 命令的输出中，有一个 free 列，同时还有一个 available 列。这二者到底有何区别？<br>free 是真正尚未被使用的物理内存数量。至于 available 就比较有意思了，它是从应用程序的角度看到的可用内存数量。Linux 内核为了提升磁盘操作的性能，会消耗一部分内存去缓存磁盘数据，就是我们介绍的 buffer 和 cache。所以对于内核来说，buffer 和 cache 都属于已经被使用的内存。当应用程序需要内存时，如果没有足够的 free 内存可以用，内核就会从 buffer 和 cache 中回收内存来满足应用程序的请求。所以从应用程序的角度来说，<strong>available  = free + buffer + cache</strong>。请注意，这只是一个很理想的计算方式，实际中的数据往往有较大的误差。</p>\n<h1 id=\"交换空间-swap-space\"><a href=\"#交换空间-swap-space\" class=\"headerlink\" title=\"交换空间(swap space)\"></a>交换空间(swap space)</h1><p>swap space 是磁盘上的一块区域，可以是一个分区，也可以是一个文件。所以具体的实现可以是 swap 分区也可以是 swap 文件。当系统物理内存吃紧时，Linux 会将内存中不常访问的数据保存到 swap 上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问 swap 上存储的内容时，再将 swap 上的数据加载到内存中，这就是常说的换出和换入。交换空间可以在一定程度上缓解内存不足的情况，但是它需要读写磁盘数据，所以性能不是很高。</p>\n<p>现在的机器一般都不太缺内存，如果系统默认还是使用了 swap 是不是会拖累系统的性能？理论上是的，但实际上可能性并不是很大。并且内核提供了一个叫做 swappiness 的参数，用于配置需要将内存中不常用的数据移到 swap 中去的紧迫程度。这个参数的取值范围是 0～100，0 告诉内核尽可能的不要将内存数据移到 swap 中，也即只有在迫不得已的情况下才这么做，而 100 告诉内核只要有可能，尽量的将内存中不常访问的数据移到 swap 中。在 ubuntu 系统中，swappiness 的默认值是 60。如果我们觉着内存充足，可以在 /etc/sysctl.conf 文件中设置 swappiness：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.swappiness&#x3D;10</span><br></pre></td></tr></table></figure>\n<p>如果系统的内存不足，则需要根据物理内存的大小来设置交换空间的大小。具体的策略网上有很丰富的资料，这里笔者不再赘述。</p>\n<h1 id=\"proc-meminfo-文件\"><a href=\"#proc-meminfo-文件\" class=\"headerlink\" title=\"/proc/meminfo 文件\"></a>/proc/meminfo 文件</h1><p>其实 free 命令中的信息都来自于 /proc/meminfo 文件。/proc/meminfo 文件包含了更多更原始的信息，只是看起来不太直观：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406335-7ffcb380-af3f-11eb-84d7-8e6fadde9dcb.png\" alt=\"image\"></p>\n<p>有兴趣的同学可以直接查看这个文件。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>free 命令是一个既简单又复杂的命令。简单是因为这个命令的参数少，输出结果清晰。说它复杂则是因为它背后是比较晦涩的操作系统中的概念，如果不清楚这些概念，即便看了 free 命令的输出也 get 不到多少有价值的信息。</p>\n<h4 id=\"原文：linux下free命令详解\"><a href=\"#原文：linux下free命令详解\" class=\"headerlink\" title=\"原文：linux下free命令详解\"></a><a href=\"https://www.cnblogs.com/ultranms/p/9254160.html\">原文：linux下free命令详解</a></h4>","categories":["Linux"],"tags":["free"]},{"title":"netstat 参数 及常用命令","url":"/2021/05/07/Linux/netstat%20%E5%8F%82%E6%95%B0%20%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"netstat-中参数选项\"><a href=\"#netstat-中参数选项\" class=\"headerlink\" title=\"netstat 中参数选项\"></a>netstat 中参数选项</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a或--all：显示所有连线中的Socket；</span><br><span class=\"line\">-A&lt;网络类型&gt;或--&lt;网络类型&gt;：列出该网络类型连线中的相关地址；</span><br><span class=\"line\">-c或--continuous：持续列出网络状态；</span><br><span class=\"line\">-C或--cache：显示路由器配置的快取信息；</span><br><span class=\"line\">-e或--extend：显示网络其他相关信息；</span><br><span class=\"line\">-F或--fib：显示FIB；</span><br><span class=\"line\">-g或--groups：显示多重广播功能群组组员名单；</span><br><span class=\"line\">-h或--help：在线帮助；</span><br><span class=\"line\">-i或--interfaces：显示网络界面信息表单；</span><br><span class=\"line\">-l或--listening：显示监控中的服务器的Socket；</span><br><span class=\"line\">-M或--masquerade：显示伪装的网络连线；</span><br><span class=\"line\">-n或--numeric：直接使用ip地址，而不通过域名服务器；</span><br><span class=\"line\">-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；</span><br><span class=\"line\">-o或--timers：显示计时器；</span><br><span class=\"line\">-p或--programs：显示正在使用Socket的程序识别码和程序名称；</span><br><span class=\"line\">-r或--route：显示Routing Table；</span><br><span class=\"line\">-s或--statistice：显示网络工作信息统计表；</span><br><span class=\"line\">-t或--tcp：显示TCP传输协议的连线状况；</span><br><span class=\"line\">-u或--udp：显示UDP传输协议的连线状况；</span><br><span class=\"line\">-v或--verbose：显示指令执行过程；</span><br><span class=\"line\">-V或--version：显示版本信息；</span><br><span class=\"line\">-w或--raw：显示RAW传输协议的连线状况；</span><br><span class=\"line\">-x或--unix：此参数的效果和指定&quot;-A unix&quot;参数相同；</span><br><span class=\"line\">--ip或--inet：此参数的效果和指定&quot;-A inet&quot;参数相同。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>###查看linux的连接数，输出每个ip的连接数，以及总的各个状态的连接数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -n | awk &#39;&#x2F;^tcp&#x2F; &#123;n&#x3D;split($(NF-1),array,&quot;:&quot;);if(n&lt;&#x3D;2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf(&quot;%-20s %s\\n&quot;, a, S[a]);++I&#125;printf(&quot;%-20s %s\\n&quot;,&quot;TOTAL_IP&quot;,I);for(a in s) printf(&quot;%-20s %s\\n&quot;,a, s[a]);printf(&quot;%-20s %s\\n&quot;,&quot;TOTAL_LINK&quot;,N);&#125;&#39;</span><br></pre></td></tr></table></figure>\n<p>###查看日志中不同端口对应的连接数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &#x2F;home&#x2F;ubuntu&#x2F;log&#x2F;gears-proxy-error.log |  egrep &#39;:922[6-9]&#39; | awk -F &quot;upstream\\&quot;: &quot; &#39;&#123;print $2&#125;&#39; | awk -F, &#39;&#123;print $1&#125;&#39; |sort | uniq -c | sort -rn</span><br></pre></td></tr></table></figure>\n<p>###查看某些端口 有哪些ip链接  并且连接数有多少</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -ntu |  egrep &#39;:922[6-9]&#39; | awk &#39;&#123;print $5&#125;&#39; | cut -d: -f1 | awk &#39;&#123;++ip[$1]&#125; END &#123;for(i in ip) print ip[i],&quot;\\t&quot;,i&#125;&#39; | sort -nr</span><br></pre></td></tr></table></figure>\n<p>###如果发现某个端口被占用后，可以用命令查看，该端口到底是被哪个进程所占用。命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -pan | grep 5623</span><br></pre></td></tr></table></figure>\n<p>###查看进程程序名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps -aux | grep pid</span><br></pre></td></tr></table></figure>\n<p>###查看tcp连接数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -anptl | wc -l</span><br></pre></td></tr></table></figure>\n<p>###查看每个ip跟服务器建立的连接数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -nat|awk &#39;&#123;print$5&#125;&#39;|awk -F : &#39;&#123;print$1&#125;&#39;|sort|uniq -c|sort -rn</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/bluetjs/article/details/80965967\">netstat监控大量ESTABLISHED连接数和TIME_WAIT连接数题解决</a><br>###查看每个ip跟服务器建立的连接数<br>–（PS：正则解析：显示第5列，-F : 以：分割，显示列，sort 排序，uniq -c统计排序过程中的重复行，sort -rn 按纯数字进行逆序排序）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -nat|awk &#39;&#123;print$5&#125;&#39;|awk -F : &#39;&#123;print$1&#125;&#39;|sort|uniq -c|sort -rn</span><br></pre></td></tr></table></figure>\n<p>###查看每个ip建立的ESTABLISHED/TIME_OUT状态的连接数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -nat|grep ESTABLISHED|awk &#39;&#123;print$5&#125;&#39;|awk -F : &#39;&#123;print$1&#125;&#39;|sort|uniq -c|sort -rn</span><br></pre></td></tr></table></figure>\n<p>###查看不同状态的连接数数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -an | awk &#39;&#x2F;^tcp&#x2F; &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#39;</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["netstat"]},{"title":"ubuntu 16.04 忘记root密码","url":"/2021/05/07/Linux/ubuntu%2016.04%20%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><strong>阅读目录</strong></p>\n<p>虚拟机中安装的ubuntu 16.04。</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>如果用户具有sudo权限，那么直接可以运行如下命令： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su root</span><br><span class=\"line\">#输入当前用户的密码</span><br><span class=\"line\">passwd</span><br><span class=\"line\">#输入密码</span><br><span class=\"line\">#再次输入密码</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117405988-0a90e300-af3f-11eb-90d1-041c5b6914de.png\" alt=\"image\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>如果用户不具备sudo权限，则方法一不能用，并需进入GRUB修改kernel镜像启动参数。 </p>\n<p>1、重启，按住shift键，出现如下界面，选中如下选项</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406054-1aa8c280-af3f-11eb-9231-aac4431727a4.png\" alt=\"image\"></p>\n<p>2、按回车键进入如下界面，然后选中有recovery mode的选项</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406070-1f6d7680-af3f-11eb-88f2-f5bbaab55246.png\" alt=\"image\"></p>\n<p>3、按e进入如下界面，找到图中红色框的recovery nomodeset并将其删掉，再在这一行的后面输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">quiet splash rw init&#x3D;&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406078-23999400-af3f-11eb-9bb5-b42fb14bcefb.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117406095-27c5b180-af3f-11eb-8b34-75af15a47672.png\" alt=\"image\"></p>\n<p>4、接着按F10或者Ctrl+x 后出现如下界面，在命令行内输入passwd后进行修改密码即可</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406109-2b593880-af3f-11eb-8ae9-fe7af949ff5d.png\" alt=\"image\"></p>\n<p>修改完之后重启系统。</p>\n<hr>\n<p>#修改某个用户目录下的sudo密码：</p>\n<p>1、进入root目录下<br>2：输入命令 passwd david，(david是系统中已有的username)<br><img src=\"https://user-images.githubusercontent.com/28568478/117406121-301dec80-af3f-11eb-98e6-bd744bc54431.png\" alt=\"image\"></p>\n<p>3、重新定义密码即可</p>\n<h4 id=\"原文链接-ubuntu-16-04-忘记root密码\"><a href=\"#原文链接-ubuntu-16-04-忘记root密码\" class=\"headerlink\" title=\"原文链接:  ubuntu 16.04 忘记root密码\"></a><a href=\"https://www.cnblogs.com/xiaojianliu/p/8520313.html\">原文链接:  ubuntu 16.04 忘记root密码</a></h4>","categories":["Linux"],"tags":["密码","root"]},{"title":"服务器挂载大于2T的硬盘","url":"/2021/08/16/Linux/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82%E8%BD%BD%E5%A4%A7%E4%BA%8E2T%E7%9A%84%E7%A1%AC%E7%9B%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景:\"></a>背景:</h3><ul>\n<li>服务器购买的时候带了一个5T硬盘，当使用fdisk进行格式化挂载到文件夹下，发现只有2T！！！后来网上查询发现fdisk只能处理2T以下的硬盘,需要使用parted处理大于2T  以上的硬盘!!<br><img src=\"https://user-images.githubusercontent.com/28568478/117395390-60a75b80-af2a-11eb-9acd-ac5bdc4e0ee8.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117395399-69982d00-af2a-11eb-9bfc-9308c3cb3f0b.png\" alt=\"image\"></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明:\"></a>命令说明:</h3><ul>\n<li>磁盘分区的命令有fdisk和parted，但fdisk只能处理2T以下的硬盘，parted能处理大于2T以上的硬盘，由于服务的硬盘是5T，所以我们采用parted作为磁盘分区。</li>\n</ul>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><ul>\n<li>一块硬盘要想被使用，要经过分区——&gt;格式化——&gt;挂载。这三个步骤<h4 id=\"1、查看硬盘情况\"><a href=\"#1、查看硬盘情况\" class=\"headerlink\" title=\"1、查看硬盘情况\"></a>1、查看硬盘情况</h4>  fdisk -l<br><img src=\"https://user-images.githubusercontent.com/28568478/117395429-7ae13980-af2a-11eb-8224-5c6240ad3401.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"2、挂载2T以上的硬盘需要GPT格式，使用parted命令，细节如下\"><a href=\"#2、挂载2T以上的硬盘需要GPT格式，使用parted命令，细节如下\" class=\"headerlink\" title=\"2、挂载2T以上的硬盘需要GPT格式，使用parted命令，细节如下:\"></a>2、挂载2T以上的硬盘需要GPT格式，使用parted命令，细节如下:</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> parted &#x2F;dev&#x2F;vdc</span><br><span class=\"line\">挂载2T以上的硬盘需要GPT格式，使用parted命令，细节如下</span><br><span class=\"line\">（1）parted &#x2F;dev&#x2F;vdc （视具体情况盘符编号）</span><br><span class=\"line\">（2）print （查看当前分区情况）</span><br><span class=\"line\">（3）mklabel gpt （设置分区类型为gpt）</span><br><span class=\"line\">（4）mkpart extended 0% 100% （扩展分区extended ,主分区primary ,并使用整个硬盘）</span><br><span class=\"line\">（5）print （查看一下）</span><br><span class=\"line\">（6）quit</span><br><span class=\"line\">（7）mkfs.ext4 &#x2F;dev&#x2F;vdc 或者 mkfs.xfs -f &#x2F;dev&#x2F;vdc（格式化新硬盘，格式化需要比较长的时间，具体根据磁盘读写速度和大小来确定。下面有节点数完成对应的数量即可）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395473-90eefa00-af2a-11eb-8be4-a7b565266022.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117395479-951b1780-af2a-11eb-8b1d-226524a7935a.png\" alt=\"image\"></p>\n<h4 id=\"3、挂载目录\"><a href=\"#3、挂载目录\" class=\"headerlink\" title=\"3、挂载目录\"></a>3、挂载目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir  &#x2F;data2 (在根目录下，建一个文件夹，待会将分区挂载在这个文件夹上，以后要往新硬盘存东西就存在新建文件夹下就可以了。)</span><br><span class=\"line\">mount &#x2F;dev&#x2F;vdc &#x2F;data2 （挂载，之后即可使用了，第二个参数是挂载到哪个目录）</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117395486-9ba98f00-af2a-11eb-84ef-12793057ee14.png\" alt=\"image\"></p>\n<h4 id=\"3、自动挂载\"><a href=\"#3、自动挂载\" class=\"headerlink\" title=\"3、自动挂载\"></a>3、自动挂载</h4><p>还没有完事，这样挂载的重启整个服务器后不会自动挂载<br>需要修改/etc/fstab文件，在文件最后追加<br>/dev/vdc /data ext4 defaults 0 0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo echo &quot;&#x2F;dev&#x2F;vdc &#x2F;data2 ext4 defaults 0 1&quot; &gt;&gt; &#x2F;etc&#x2F;fstab       让系统开机自动挂载这块硬盘</span><br><span class=\"line\">或者</span><br><span class=\"line\">sudo echo &quot;&#x2F;dev&#x2F;vdc &#x2F;data2 xfs defaults 0 1&quot; &gt;&gt; &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>\n<p>这样在重启后会自动挂载<br><img src=\"https://user-images.githubusercontent.com/28568478/117395551-bbd94e00-af2a-11eb-8007-4bd9d388179a.png\" alt=\"image\"></p>\n<h3 id=\"挂载完成后-一定要reboot重启服务器-df-h-确认应该在服务器重启后依然可以正常挂载！！！\"><a href=\"#挂载完成后-一定要reboot重启服务器-df-h-确认应该在服务器重启后依然可以正常挂载！！！\" class=\"headerlink\" title=\"挂载完成后 一定要reboot重启服务器  df-h 确认应该在服务器重启后依然可以正常挂载！！！\"></a>挂载完成后 一定要reboot重启服务器  df-h 确认应该在服务器重启后依然可以正常挂载！！！</h3><h2 id=\"参考目录：\"><a href=\"#参考目录：\" class=\"headerlink\" title=\"参考目录：\"></a>参考目录：</h2><p><a href=\"https://blog.51cto.com/devin223/2175078\">https://blog.51cto.com/devin223/2175078</a><br><a href=\"https://blog.csdn.net/glongljl/article/details/80104569\">https://blog.csdn.net/glongljl/article/details/80104569</a><br><a href=\"https://blog.csdn.net/reliveIT/article/details/44602959\">fdisk和parted磁盘分区工具命令</a><br><a href=\"https://blog.csdn.net/xianjuke008/article/details/88354466\">磁盘挂载问题：Fdisk最大只能创建2T分区的盘，超过2T使用parted</a><br><a href=\"https://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_linux_039_fdisk_gdisk_parted.html\">linux下（fdisk,gdisk,parted）三种分区工具比较</a></p>\n","categories":["Linux"],"tags":["硬盘挂载"]},{"title":"linux服务器搭建 shadowsocks","url":"/2021/05/07/proxy/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%20shadowsocks/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update    # 更新软件源列表</span><br><span class=\"line\">sudo apt-get -y install python-gevent python-pip  # 安装所需服务</span><br><span class=\"line\">sudo apt-get -y install python-m2crypto</span><br><span class=\"line\">sudo pip install shadowsocks   # 安装影梭</span><br></pre></td></tr></table></figure>\n\n<p>shadowsocks安装完毕后，可以查看使用ssserver命令进行查看。如下：<br>ssserver -h</p>\n<p>在 /etc/shadowsocks/ 下写入以 .json结尾的配置文件 如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:443,  #普通用户目录下 采用大于1024的端口 root目录下可以使用443</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;你的密码&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false,</span><br><span class=\"line\">    &quot;workers&quot;: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 启动</span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;ss.json -d start</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;ss.json -d stop</span><br><span class=\"line\"># 重启</span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;ss.json -d restart</span><br><span class=\"line\">-d  后台启动  及日志记录</span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json -d start  --log-file .&#x2F;ss.log --pid-file .&#x2F;ss.pid</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -tunlp 查看服务是否启动</span><br><span class=\"line\"></span><br><span class=\"line\">vi &#x2F;etc&#x2F;rc.local</span><br><span class=\"line\">按i键进入编辑模式，然后在最后一行加入</span><br><span class=\"line\">ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json -d start  --log-file &#x2F;etc&#x2F;shadowsocks&#x2F;ss.log --pid-file &#x2F;etc&#x2F;shadowsocks&#x2F;ss.pid</span><br></pre></td></tr></table></figure>\n","categories":["proxy"],"tags":["代理"]},{"title":"Unable to read additional data from client, it probably closed the socket","url":"/2021/05/07/%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/Unable%20to%20read%20additional%20data%20from%20client,%20it%20probab/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>今天在用docker-compose 部署Apache DolphinScheduler的时候在我的mac上报如下的错，但是服务器上是正常的，正常来讲用docker部署项目不应该出现这种问题，上网查了很多，说是初始化Zookeeper连接时，将接收超时参数值调整大一些即可（tickTime2000改为10000），默认是毫秒（ms），但是还是不行，后来看到一篇文章说可能是docker内存不够的关系，后来将docker内存从2G跳到了4G好了，但感觉不太像是这个问题，所以记录一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2021-02-27 19:21:26,435 [myid:1] - WARN  [NIOWorkerThread-1:NIOServerCnxn@364] - Unexpected exception</span><br><span class=\"line\">EndOfStreamException: Unable to read additional data from client, it probably closed the socket: address &#x3D; &#x2F;172.21.0.5:39431, session &#x3D; 0x0</span><br><span class=\"line\">\tat org.apache.zookeeper.server.NIOServerCnxn.handleFailedRead(NIOServerCnxn.java:163)</span><br><span class=\"line\">\tat org.apache.zookeeper.server.NIOServerCnxn.doIO(NIOServerCnxn.java:326)</span><br><span class=\"line\">\tat org.apache.zookeeper.server.NIOServerCnxnFactory$IOWorkRequest.doWork(NIOServerCnxnFactory.java:522)</span><br><span class=\"line\">\tat org.apache.zookeeper.server.WorkerService$ScheduledWorkRequest.run(WorkerService.java:154)</span><br><span class=\"line\">\tat java.base&#x2F;java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class=\"line\">\tat java.base&#x2F;java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class=\"line\">\tat java.base&#x2F;java.lang.Thread.run(Thread.java:834)</span><br></pre></td></tr></table></figure>\n","categories":["异常问题"],"tags":["docker"]},{"title":"nginx an upstream response is buffered to a temporary file","url":"/2021/05/07/%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/nginx%20an%20upstream%20response%20is%20buffered%20to%20a%20temporary%20file/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>查看Nginx日志，发现有很多报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2021&#x2F;02&#x2F;27 17:00:54 [warn] 28#28: *49939</span><br><span class=\"line\">an upstream response is buffered to a temporary file &#x2F;var&#x2F;cache&#x2F;nginx&#x2F;proxy_temp&#x2F;6&#x2F;14&#x2F;0000000146 while reading upstream, client: xxx.xxx.xxx.x,</span><br><span class=\"line\">server: airflow.yidianshihui.com, request: &quot;GET &#x2F;home HTTP&#x2F;1.1&quot;, upstream: &quot;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx:xxxx&#x2F;home&quot;, host: &quot;airflow.yidianshihui.com&quot;,</span><br><span class=\"line\">referrer: &quot;http:&#x2F;&#x2F;airflow.yidianshihui.com&#x2F;home?tags&#x3D;%E6%AF%8F%E6%97%A5ic_sku%E5%90%8C%E6%AD%A5&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-错误日志：warn：an-upstream-response-is-buffered-to-a-temporary-file\"><a href=\"#1-错误日志：warn：an-upstream-response-is-buffered-to-a-temporary-file\" class=\"headerlink\" title=\"1.错误日志：warn：an upstream response is buffered to a temporary file\"></a>1.错误日志：warn：an upstream response is buffered to a temporary file</h3><pre><code>解决办法：增加fastcgi_buffers      8 4K;     fastcgi_buffer_size  4K;\n</code></pre>\n<h4 id=\"2-a-client-request-body-is-buffered-to-a-temporary-file\"><a href=\"#2-a-client-request-body-is-buffered-to-a-temporary-file\" class=\"headerlink\" title=\"2. a client request body is buffered to a temporary file\"></a>2. a client request body is buffered to a temporary file</h4><p>解决办法：增加client_max_body_size 2050m;     client_body_buffer_size 1024k;</p>\n<span id=\"more\"></span>\n\n<p>###Nginx 的 buffer 机制：</p>\n<p>对于来自 FastCGI Server 的 Response，Nginx 将其缓冲到内存中，然后依次发送到客户端浏览器。缓冲区的大小由 fastcgi_buffers 和 fastcgi_buffer_size 两个值控制。</p>\n<p>比如如下配置：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastcgi_buffers      8 4K;</span><br><span class=\"line\">fastcgi_buffer_size  4K;</span><br></pre></td></tr></table></figure><br>fastcgi_buffers 控制 nginx 最多创建 8 个大小为 4K 的缓冲区，而 fastcgi_buffer_size 则是处理 Response 时第一个缓冲区的大小，不包含在前者中。所以总计能创建的最大内存缓冲区大小是 8<em>4K+4K = 36k。而这些缓冲区是根据实际的 Response 大小动态生成的，并不是一次性创建的。比如一个 8K 的页面，Nginx 会创建 2</em>4K 共 2 个 buffers。</p>\n<p>当 Response 小于等于 36k 时，所有数据当然全部在内存中处理。如果 Response 大于 36k 呢？fastcgi_temp 的作用就在于此。多出来的数据会被临时写入到文件中，放在这个目录下面。同时你会在 error.log 中看到一条类似 warning：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2010&#x2F;03&#x2F;13 03:42:22 [warn] 3994#0: *1 an upstream response is buffered to a temporary file</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;fastcgi_temp&#x2F;1&#x2F;00&#x2F;0000000001 while reading upstream,</span><br><span class=\"line\">client: 192.168.1.111,</span><br><span class=\"line\">server: www.xxx.cn,</span><br><span class=\"line\">request: &quot;POST &#x2F;test.php HTTP&#x2F;1.1&quot;,</span><br><span class=\"line\">upstream: &quot;fastcgi:&#x2F;&#x2F;127.0.0.1:9000&quot;,</span><br><span class=\"line\">host: &quot;xxx.cn&quot;,</span><br><span class=\"line\">referrer: &quot;http:&#x2F;&#x2F;xxx.cn&#x2F;test.php&quot;</span><br></pre></td></tr></table></figure>\n<p>显然，缓冲区设置的太小的话，Nginx 会频繁读写硬盘，对性能有很大的影响，但也不是越大越好，没意义</p>\n<p>官方文档：<br><a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size\">http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size</a> </p>\n<p>修改Nginx配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">location &#x2F;api &#123;</span><br><span class=\"line\">        proxy_set_header  Host  $http_host;</span><br><span class=\"line\">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass   http:&#x2F;&#x2F;elk_server&#x2F;api;</span><br><span class=\"line\">        client_body_buffer_size 1024k;</span><br><span class=\"line\">        client_max_body_size 2050m;</span><br><span class=\"line\">        fastcgi_buffers 8 4K;</span><br><span class=\"line\">        fastcgi_buffer_size 4K;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://blog.csdn.net/zhouyan8603/article/details/89410119\">Nginx性能调优之buffer参数设置</a><br> <a href=\"https://my.oschina.net/linland/blog/373315\">nginx常见问题</a></p>\n","categories":["异常问题"],"tags":["nginx"]},{"title":"抓包工具-charles","url":"/2021/05/18/%E7%88%AC%E8%99%AB/Charles%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"一-、Charles-的安装与使用\"><a href=\"#一-、Charles-的安装与使用\" class=\"headerlink\" title=\"一 、Charles 的安装与使用\"></a>一 、Charles 的安装与使用</h2><h3 id=\"Charles官网：https-www-charlesproxy-com\"><a href=\"#Charles官网：https-www-charlesproxy-com\" class=\"headerlink\" title=\"Charles官网：https://www.charlesproxy.com/\"></a>Charles官网：<a href=\"https://www.charlesproxy.com/\">https://www.charlesproxy.com/</a></h3><p>Charles的作用：<br><img src=\"https://user-images.githubusercontent.com/28568478/118580794-1728fd00-b7c3-11eb-810b-64204319df1d.png\" alt=\"image\"></p>\n<h3 id=\"1-对请求抓包\"><a href=\"#1-对请求抓包\" class=\"headerlink\" title=\"1. 对请求抓包\"></a>1. 对请求抓包</h3><p>保证iPhone和PC工作在同一局域网内（即同一个WIFI下）。</p>\n<h4 id=\"1-1-获取PC端的IP地址\"><a href=\"#1-1-获取PC端的IP地址\" class=\"headerlink\" title=\"1.1 获取PC端的IP地址\"></a>1.1 获取PC端的IP地址</h4><p><img src=\"https://user-images.githubusercontent.com/28568478/118580840-2c059080-b7c3-11eb-925e-fcf375981e38.png\" alt=\"image\"></p>\n<p>打开网络偏好设置…</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/118580852-33c53500-b7c3-11eb-94ca-ae08bfd9227d.png\" alt=\"image\"><br>获取IP地址。</p>\n<h4 id=\"1-2-配置手机代理\"><a href=\"#1-2-配置手机代理\" class=\"headerlink\" title=\"1.2 配置手机代理\"></a>1.2 配置手机代理</h4><p>设置-&gt;无线局域网<br><img src=\"https://user-images.githubusercontent.com/28568478/118580927-59523e80-b7c3-11eb-8b5f-0103a15cc260.png\" alt=\"image\"><br>HTTP代理-&gt;配置代理（手动）<br><img src=\"https://user-images.githubusercontent.com/28568478/118580939-5ce5c580-b7c3-11eb-9876-39186efb944c.png\" alt=\"image\"></p>\n<h4 id=\"1-3-PC端的Charles设置\"><a href=\"#1-3-PC端的Charles设置\" class=\"headerlink\" title=\"1.3 PC端的Charles设置\"></a>1.3 PC端的Charles设置</h4><p>具体的端口可以从Charles菜单栏 -&gt; Proxy -&gt; Proxy Settings中查看。图示如下：<br><img src=\"https://user-images.githubusercontent.com/28568478/118581127-a9310580-b7c3-11eb-85ee-32165789ea92.png\" alt=\"image\"><br>代理配置完成后，Charles会弹出连接提示框，点击Allow之后即可使用Charles对从该手机发出的请求进行抓包了。图示如下：<br><img src=\"https://user-images.githubusercontent.com/28568478/118581179-c36ae380-b7c3-11eb-90ed-4f5dae97304f.png\" alt=\"image\"></p>\n<h3 id=\"2-抓取HTTPS请求\"><a href=\"#2-抓取HTTPS请求\" class=\"headerlink\" title=\"2. 抓取HTTPS请求\"></a>2. 抓取HTTPS请求</h3><p>配置iPhone代理完毕后，就可以通过Structure或者Sequence窗口预览HTTP请求的数据了。但由于HTTPS请求被加密过，预览请求时只能预览到乱码数据。要预览到HTTPS请求的数据明文，需要PC和iPhone安装证书授权。</p>\n<h4 id=\"2-1-PC端安装证书\"><a href=\"#2-1-PC端安装证书\" class=\"headerlink\" title=\"2.1 PC端安装证书\"></a>2.1 PC端安装证书</h4><p>在Charles菜单栏 -&gt; Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate中可以为PC安装证书，证书可以在Mac的钥匙串中查看。图示如下：<br><img src=\"https://user-images.githubusercontent.com/28568478/118581241-e1384880-b7c3-11eb-8999-47c18149561c.png\" alt=\"image\"></p>\n<p>证书可以在Mac的钥匙串中查看，双击证书，将信任权限设定为始终信任。图示如下：<br><img src=\"https://user-images.githubusercontent.com/28568478/118581258-e7c6c000-b7c3-11eb-9c44-f8dfd864606b.png\" alt=\"image\"></p>\n<h4 id=\"2-2-在手机端配置根证书\"><a href=\"#2-2-在手机端配置根证书\" class=\"headerlink\" title=\"2.2 在手机端配置根证书\"></a>2.2 在手机端配置根证书</h4><h5 id=\"2-2-1-iPhone手机安装证书\"><a href=\"#2-2-1-iPhone手机安装证书\" class=\"headerlink\" title=\"2.2.1 iPhone手机安装证书\"></a>2.2.1 iPhone手机安装证书</h5><ul>\n<li><p>1、打开Charles，选择help→SSL Proxying→Install Charles Root Certificate on a Mobile Device or Remote Browser<br>  <img src=\"https://user-images.githubusercontent.com/28568478/118582584-2bbac480-b7c6-11eb-8ea9-3352629687aa.png\" alt=\"image\"></p>\n</li>\n<li><p>2、手机连接电脑代理，打开safari，输入网址：chls.pro/ssl<br>选择后会显示IP与端口号，用于手机设置http代理：<br><img src=\"https://user-images.githubusercontent.com/28568478/118582629-3d9c6780-b7c6-11eb-9bd6-7b6ccd44f28e.png\" alt=\"image\"><br>手机的网络上设置成电脑的http代理：<br>此时必须保证手机和电脑在同一网络，并且手机可以访问电脑的ip与端口</p>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/118582754-789e9b00-b7c6-11eb-9f79-44b426cda1ae.png\" alt=\"image\"></p>\n<ul>\n<li>3、手机弹出提示：此网站正尝试打开“设置”已向您显示一个配置描述文件。您要允许吗？忽略|允许，选择允许，安装描述文件，并信任</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/118582765-7d634f00-b7c6-11eb-94ff-81428d1e1573.png\" alt=\"image\"></p>\n<ul>\n<li>4.1、iOS10.3以上的手机需要在：设置→ 通用 → 关于本机 → 证书信任设置→ 找到charles proxy CA证书，打开信任即可</li>\n<li>4.2、 手机浏览器（笔者使用Chrome）访问chls.pro/ssl，下载证书并安装(证书名任意)：<br><img src=\"https://user-images.githubusercontent.com/28568478/118582782-8522f380-b7c6-11eb-8979-4b74a651fc99.png\" alt=\"image\"></li>\n</ul>\n<p>在iPhone浏览器中访问<a href=\"http://charlesproxy.com/getssl%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6%E5%B9%B6%E5%AE%89%E8%A3%85%E3%80%82\">http://charlesproxy.com/getssl可以下载证书并安装。</a><br>基于iOS的证书信任机制，在安装完成并信任证书后，需要到iPhone设置 -&gt;通用-&gt; 关于本机 -&gt; 证书信任设置中启用根证书。</p>\n<h5 id=\"2-2-2-安卓手机安装证书\"><a href=\"#2-2-2-安卓手机安装证书\" class=\"headerlink\" title=\"2.2.2 安卓手机安装证书\"></a>2.2.2 安卓手机安装证书</h5><ul>\n<li><p>方法一：</p>\n<pre><code>  1、打开Charles，选择help→SSL Proxying→Install Charles Root Certificate on a Mobile Device or Remote Browser\n\n  2、手机连接电脑代理，打开浏览器，输入网址：chls.pro/ssl\n\n  3、手机弹出提示：安装配置描述文件。您要允许吗？忽略|允许，选择允许，即可\n</code></pre>\n</li>\n<li><p>方法二：</p>\n<pre><code>  1、打开Charles，选择help→SSL Proxying→Save Charles Certificate，将证书导入到手机中\n\n  2、导入后直接点击安装证书即可\n</code></pre>\n</li>\n<li><p>方法三：</p>\n<pre><code>  1、打开Charles，选择help→SSL Proxying→Save Charles Certificate，将证书导入到手机中\n\n  2、导入后直接点击安装证书，提示无法打开\n\n  3、进入手机设置 → 更多设置 → 系统安全 → 从存储设备安装 → 选择charles.pem，点击高级，安装证书即可\n</code></pre>\n</li>\n</ul>\n<p>常见手机：小米手机，华为手机，需要设置手机锁屏密码</p>\n<h5 id=\"2-2-3-如果证书下载不下来怎么办？\"><a href=\"#2-2-3-如果证书下载不下来怎么办？\" class=\"headerlink\" title=\"2.2.3 如果证书下载不下来怎么办？\"></a>2.2.3 如果证书下载不下来怎么办？</h5><p>可根据安卓我手机安装证书的方法 将证书下载并导入手机进行安装</p>\n<h4 id=\"2-4-启动抓包的SSL权限\"><a href=\"#2-4-启动抓包的SSL权限\" class=\"headerlink\" title=\"2.4 启动抓包的SSL权限\"></a>2.4 启动抓包的SSL权限</h4><p>在Charles菜单栏 -&gt; Proxy -&gt; SSL Proxying Settings中勾选Enable SSL Proxying，然后在Locations中添加需要抓包的Host和Port即可。图示如下：<br><img src=\"https://user-images.githubusercontent.com/28568478/118581370-180e5e80-b7c4-11eb-9979-a322b1a9f39b.png\" alt=\"image\"></p>\n<p>即对所有的https都进行抓包。</p>\n<h2 id=\"二、Charles的破解方法\"><a href=\"#二、Charles的破解方法\" class=\"headerlink\" title=\"二、Charles的破解方法\"></a>二、Charles的破解方法</h2><h3 id=\"破解网站：https-www-zzzmode-com-mytools-charles\"><a href=\"#破解网站：https-www-zzzmode-com-mytools-charles\" class=\"headerlink\" title=\"破解网站：https://www.zzzmode.com/mytools/charles/\"></a>破解网站：<a href=\"https://www.zzzmode.com/mytools/charles/\">https://www.zzzmode.com/mytools/charles/</a></h3><h4 id=\"此工具用于计算Charles激活码\"><a href=\"#此工具用于计算Charles激活码\" class=\"headerlink\" title=\"此工具用于计算Charles激活码\"></a>此工具用于计算Charles激活码</h4><p>输入RegisterName(此名称随意，用于显示 Registered to xxx)，点击生成计算出注册码，打开Charles输入注册码即可。<br><img src=\"https://user-images.githubusercontent.com/28568478/118581701-a5ea4980-b7c4-11eb-85ee-31e28e3e9264.png\" alt=\"image\"><br>打开Charles菜单栏 -&gt; help -&gt; Register Charles<br>填入上述产生的Registered Name和License Key，即可破解成功！<br><img src=\"https://user-images.githubusercontent.com/28568478/118582091-5bb59800-b7c5-11eb-8c29-a556dd717469.png\" alt=\"image\"><br>破解成功<br><img src=\"https://user-images.githubusercontent.com/28568478/118583990-8b19d400-b7c8-11eb-96ff-a152b36ea1ec.png\" alt=\"image\"></p>\n<h2 id=\"三、Android-7-0以上手机抓包方式（抓取https，亲测有用）\"><a href=\"#三、Android-7-0以上手机抓包方式（抓取https，亲测有用）\" class=\"headerlink\" title=\"三、Android 7.0以上手机抓包方式（抓取https，亲测有用）\"></a>三、Android 7.0以上手机抓包方式（抓取https，亲测有用）</h2><p>安卓7.0有安全保护，用户级别的证书在大部分app中无法通过验证。（charles安装的证书就是用户级别的）</p>\n<p>Android7.0 之后默认不信任用户添加到系统的CA证书：</p>\n<blockquote>\n<p>  To provide a more consistent and more secure experience across the Android ecosystem, beginning with Android Nougat, compatible devices trust only the standardized system CAs maintained in AOSP.（<a href=\"https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html\">文档链接</a>）</p>\n</blockquote>\n<p>也就是说对基于 SDK24 及以上的APP来说，即使你在手机上安装了抓包工具的证书也无法抓取 https 请求</p>\n<h3 id=\"1、下载VritualXposed-apk包安装到android手机\"><a href=\"#1、下载VritualXposed-apk包安装到android手机\" class=\"headerlink\" title=\"1、下载VritualXposed apk包安装到android手机\"></a>1、下载VritualXposed apk包安装到android手机</h3><p><a href=\"https://github.com/android-hacker/VirtualXposed\">https://github.com/android-hacker/VirtualXposed</a></p>\n<h3 id=\"2、下载JustTrustMe-apk包安装到android手机\"><a href=\"#2、下载JustTrustMe-apk包安装到android手机\" class=\"headerlink\" title=\"2、下载JustTrustMe apk包安装到android手机\"></a>2、下载JustTrustMe apk包安装到android手机</h3><p><a href=\"https://github.com/Fuzion24/JustTrustMe\">https://github.com/Fuzion24/JustTrustMe</a></p>\n<h3 id=\"3、安装完成进入VirtualXposed-apk应用，点击6个小点进入设置页面\"><a href=\"#3、安装完成进入VirtualXposed-apk应用，点击6个小点进入设置页面\" class=\"headerlink\" title=\"3、安装完成进入VirtualXposed apk应用，点击6个小点进入设置页面\"></a>3、安装完成进入VirtualXposed apk应用，点击6个小点进入设置页面</h3><p><img src=\"https://user-images.githubusercontent.com/28568478/118583816-3fffc100-b7c8-11eb-91c3-7745b4d09681.png\" alt=\"image\"></p>\n<h3 id=\"4、进入设置页面，点击模块管理，勾选JustTrustMe（如果没有找到它，可能是这个版本不需要在手动选择了，安装之后自动识别到了）\"><a href=\"#4、进入设置页面，点击模块管理，勾选JustTrustMe（如果没有找到它，可能是这个版本不需要在手动选择了，安装之后自动识别到了）\" class=\"headerlink\" title=\"4、进入设置页面，点击模块管理，勾选JustTrustMe（如果没有找到它，可能是这个版本不需要在手动选择了，安装之后自动识别到了）\"></a>4、进入设置页面，点击模块管理，勾选JustTrustMe（如果没有找到它，可能是这个版本不需要在手动选择了，安装之后自动识别到了）</h3><h3 id=\"5、重启VirtualXposed\"><a href=\"#5、重启VirtualXposed\" class=\"headerlink\" title=\"5、重启VirtualXposed\"></a>5、重启VirtualXposed</h3><h3 id=\"6、重启之后我们重新进去设置页面，添加我们需要抓包的应用即可，比如网速管家APP\"><a href=\"#6、重启之后我们重新进去设置页面，添加我们需要抓包的应用即可，比如网速管家APP\" class=\"headerlink\" title=\"6、重启之后我们重新进去设置页面，添加我们需要抓包的应用即可，比如网速管家APP\"></a>6、重启之后我们重新进去设置页面，添加我们需要抓包的应用即可，比如网速管家APP</h3><p><img src=\"https://user-images.githubusercontent.com/28568478/118583877-5a399f00-b7c8-11eb-8e3c-0db4541e3516.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/118583888-6160ad00-b7c8-11eb-8d83-fbef18212e8b.png\" alt=\"image\"></p>\n<h3 id=\"7、设置Fiddler-charles代理，手机设置wifi里面代理改成手动。输入ip，端口：默认8888，注意手机和电脑在一个wifi下就可以了\"><a href=\"#7、设置Fiddler-charles代理，手机设置wifi里面代理改成手动。输入ip，端口：默认8888，注意手机和电脑在一个wifi下就可以了\" class=\"headerlink\" title=\"7、设置Fiddler/charles代理，手机设置wifi里面代理改成手动。输入ip，端口：默认8888，注意手机和电脑在一个wifi下就可以了\"></a>7、设置Fiddler/charles代理，手机设置wifi里面代理改成手动。输入ip，端口：默认8888，注意手机和电脑在一个wifi下就可以了</h3><h3 id=\"8、回到VirtualXposed-上滑解锁，打开我们安装的应用进行操作，则发现Fiddler-Charles已经成功抓取到安居客的HTTPS的数据包\"><a href=\"#8、回到VirtualXposed-上滑解锁，打开我们安装的应用进行操作，则发现Fiddler-Charles已经成功抓取到安居客的HTTPS的数据包\" class=\"headerlink\" title=\"8、回到VirtualXposed 上滑解锁，打开我们安装的应用进行操作，则发现Fiddler/Charles已经成功抓取到安居客的HTTPS的数据包\"></a>8、回到VirtualXposed 上滑解锁，打开我们安装的应用进行操作，则发现Fiddler/Charles已经成功抓取到安居客的HTTPS的数据包</h3><p><img src=\"https://user-images.githubusercontent.com/28568478/118584941-8a823d00-b7ca-11eb-8252-ba1e28dc6c1a.png\" alt=\"image\"></p>\n","categories":["爬虫"],"tags":["爬虫","抓包","手机抓包","Charles"]},{"title":"kafka-python 使用","url":"/2021/05/07/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/kafka-python/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><strong>一：kafka producer</strong></p>\n<p>　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from kafka import KafkaProducer</span><br><span class=\"line\">from kafka.errors import kafka_errors</span><br><span class=\"line\">import traceback</span><br><span class=\"line\"></span><br><span class=\"line\">json_list &#x3D; &#123;&quot;test&quot;: 1&#125;</span><br><span class=\"line\">producer &#x3D; KafkaProducer(</span><br><span class=\"line\">    bootstrap_servers&#x3D;[&#39;kafka.aws.bigdata.yidianshihui.com:9092&#39;],</span><br><span class=\"line\">    # key和value序列化</span><br><span class=\"line\">    key_serializer&#x3D;lambda k: json.dumps(k).encode(),</span><br><span class=\"line\">    value_serializer&#x3D;lambda v: json.dumps(v).encode()</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">future &#x3D; producer.send(</span><br><span class=\"line\">    &#39;custom_msg&#39;,</span><br><span class=\"line\">    # key&#x3D;&#39;test&#39;,  # 同一个key值，会被送至同一个分区</span><br><span class=\"line\">    value&#x3D;json_list,</span><br><span class=\"line\">    # value&#x3D;json.dumps(json_list).encode(&quot;utf-8&quot;),</span><br><span class=\"line\">    partition&#x3D;random.randint(0, 3)  # 向多分区发送数据（注意：分区需存在，如果不存在需要通过标题四的方法去创建分区）</span><br><span class=\"line\">)  # 向分区1发送消息</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    future.get(timeout&#x3D;10) # 监控是否发送成功</span><br><span class=\"line\">except kafka_errors:  # 发送失败抛出kafka_errors</span><br><span class=\"line\">    traceback.format_exc()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>二：kafka consumer</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from kafka import KafkaConsumer</span><br><span class=\"line\"></span><br><span class=\"line\">consumer &#x3D; KafkaConsumer(bootstrap_servers&#x3D;[&#39;kafka.aws.bigdata.yidianshihui.com:9092&#39;],</span><br><span class=\"line\">                         # value_deserializer&#x3D;msgpack.loads,</span><br><span class=\"line\">                         # key_deserializer&#x3D;msgpack.loads</span><br><span class=\"line\">                         key_deserializer&#x3D;lambda k: json.loads(k),</span><br><span class=\"line\">                         value_deserializer&#x3D;lambda v: json.loads(v),</span><br><span class=\"line\">                         auto_offset_reset&#x3D;&#39;latest&#39;,</span><br><span class=\"line\">                         group_id&#x3D;&#39;test1-group&#39;</span><br><span class=\"line\">                         )</span><br><span class=\"line\"># 订阅消费的主题的分区</span><br><span class=\"line\">consumer.assign([TopicPartition(&#39;test1&#39;, 0),TopicPartition(&#39;test1&#39;, 1),TopicPartition(&#39;test1&#39;, 2)])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\">    for message in consumer:</span><br><span class=\"line\">        if message is not None:</span><br><span class=\"line\">            print(message.offset, message.value)</span><br><span class=\"line\">            print(msg)</span><br><span class=\"line\">            value &#x3D; msg.value</span><br><span class=\"line\">            key &#x3D; msg.key</span><br><span class=\"line\">            print(type(value))</span><br><span class=\"line\">            print(value)</span><br><span class=\"line\">            print(type(key))</span><br><span class=\"line\">            print(msg.partition)</span><br></pre></td></tr></table></figure>\n<p>参数详解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class kafka.KafkaConsumer(*topics, **configs)</span><br><span class=\"line\"></span><br><span class=\"line\">*topics (str) – 可选，设置需要订阅的topic，如果未设置，需要在消费记录前调用subscribe或者assign。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">client_id (str) – 客户端名称，默认值: ‘kafka-python-&#123;version&#125;’</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">group_id (str or None) – 消费组名称。如果为None，则通过group coordinator auto-partition分区分配，offset提交被禁用。默认为None</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">auto_offset_reset (str) – 重置offset策略: &#39;earliest&#39;将移动到最老的可用消息, &#39;latest&#39;将移动到最近消息。 设置为其它任何值将抛出异常。默认值：&#39;latest&#39;。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">enable_auto_commit (bool) –  如果为True，将自动定时提交消费者offset。默认为True。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">auto_commit_interval_ms (int) – 自动提交offset之间的间隔毫秒数。如果enable_auto_commit 为true，默认值为： 5000。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">value_deserializer(可调用对象) - 携带原始消息value并返回反序列化后的value</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">subscribe(topics&#x3D;(), pattern&#x3D;None, listener&#x3D;None)</span><br><span class=\"line\"></span><br><span class=\"line\">订阅需要的主题</span><br><span class=\"line\"></span><br><span class=\"line\">topics (list) – 需要订阅的主题列表</span><br><span class=\"line\"></span><br><span class=\"line\">pattern (str) – 用于匹配可用主题的模式，即正则表达式。注意：必须提供topics、pattern两者参数之一，但不能同时提供两者。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>三：kafka 创建topic并创建分区</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from kafka.admin import KafkaAdminClient, NewTopic, NewPartitions</span><br><span class=\"line\">c &#x3D; KafkaAdminClient(bootstrap_servers&#x3D;&quot;kafka.aws.bigdata.yidianshihui.com:9092&quot;)</span><br><span class=\"line\"># 创建topic同时创建分区</span><br><span class=\"line\">topic_list &#x3D; []</span><br><span class=\"line\">topic_list.append(NewTopic(name&#x3D;&quot;test1&quot;, num_partitions&#x3D;2,replication_factor&#x3D;1))</span><br><span class=\"line\">c.create_topics(new_topics&#x3D;topic_list, validate_only&#x3D;True)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>四：kafka 已有的topic并创建分区</strong><br>有时候，向指定分区发送数据时，会报如下错误，这个是因为topic里不存在此分区，需手动创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">assert partition in self._metadata.partitions_for_topic(topic), &#39;Unrecognized partition&#39;</span><br><span class=\"line\">AssertionError: Unrecognized partition</span><br></pre></td></tr></table></figure>\n<p>创建方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from kafka.admin import KafkaAdminClient, NewTopic, NewPartitions</span><br><span class=\"line\">c &#x3D; KafkaAdminClient(bootstrap_servers&#x3D;&quot;kafka.aws.bigdata.yidianshihui.com:9092&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 在已有的topic中创建分区</span><br><span class=\"line\">new_partitions &#x3D; NewPartitions(3)</span><br><span class=\"line\">c.create_partitions(&#123;&quot;custom_msg&quot;: new_partitions&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>参考文档：<br><a href=\"https://zhuanlan.zhihu.com/p/103915834\">https://zhuanlan.zhihu.com/p/103915834</a><br><a href=\"https://www.cnblogs.com/xiaozengzeng/p/13621045.html\">https://www.cnblogs.com/xiaozengzeng/p/13621045.html</a><br><a href=\"https://kafka-python.readthedocs.io/en/master/usage.html\">https://kafka-python.readthedocs.io/en/master/usage.html</a><br><a href=\"https://www.cnblogs.com/rexcheny/articles/9463979.html\">Python生产者和消费者API使用</a><br><a href=\"https://www.cnblogs.com/rexcheny/tag/Kafka/\">kafka 随笔</a></p>\n","categories":["异步任务"],"tags":["kafka","kafka-python"]},{"title":"kafka基本命令","url":"/2021/07/01/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/kafka%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%20copy/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><strong>一：Homebrew是神马</strong></p>\n<p>　　先介绍下mac 神器 Homebrew, 类似linux系统下的yum和 apt-get，Homebrew简称brew，是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件</p>\n<p><strong>二：Homebrew官网</strong> <a href=\"https://brew.sh/\">https://brew.sh/</a></p>\n<p><strong>三：Homebrew安装</strong> </p>\n<p>打开终端，直接输入即可完成安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><strong>四：Homebrew使用</strong></p>\n<p>Homebrew使用没啥好说的了，常用的</p>\n<p>搜索软件：brew search 软件名，如brew search mysql</p>\n<p>安装软件：brew install 软件名，如brew install mysql</p>\n<p>卸载软件：brew remove 软件名，如brew remove mysql</p>\n<p>列出软件：brew list 软件名，如brew list mysql</p>\n<h3 id=\"五-安装kafka\"><a href=\"#五-安装kafka\" class=\"headerlink\" title=\"五. 安装kafka\"></a>五. 安装kafka</h3><p>$   brew install kafka</p>\n<p>(1)  安装过程将依赖安装 zookeeper</p>\n<p>(2)  软件位置</p>\n<p>/usr/local/Cellar/zookeeper</p>\n<p>/usr/local/Cellar/kafka</p>\n<p>(3)  配置文件位置</p>\n<p>/usr/local/etc/kafka/zookeeper.properties</p>\n<p>/usr/local/etc/kafka/server.properties</p>\n<p>备注：后续操作均需进入 /usr/local/Cellar/kafka/2.0.0/bin 目录下。</p>\n<h3 id=\"六、安装\"><a href=\"#六、安装\" class=\"headerlink\" title=\"六、安装\"></a>六、安装</h3><p>kafka依赖Java，因此要确保先安装好java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; mac 环境使用brew直接安装kafkabrew install kafka  &#x2F;&#x2F; 卸载brew uninstall kafka</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、启动\"><a href=\"#七、启动\" class=\"headerlink\" title=\"七、启动\"></a>七、启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 启动brew services start kafkabrew services start zookeeper &#x2F;&#x2F; 重启brew services restart kafkabrew services restart zookeeper</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"八、创建主题\"><a href=\"#八、创建主题\" class=\"headerlink\" title=\"八、创建主题\"></a>八、创建主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"九、删除主题\"><a href=\"#九、删除主题\" class=\"headerlink\" title=\"九、删除主题\"></a>九、删除主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kafka-topics  --delete --zookeeper localhost:2181 --topic 【topic name】</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十、查看主题\"><a href=\"#十、查看主题\" class=\"headerlink\" title=\"十、查看主题\"></a>十、查看主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kafka-topics --list --zookeeper localhost:2181</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十一、生产消息\"><a href=\"#十一、生产消息\" class=\"headerlink\" title=\"十一、生产消息\"></a>十一、生产消息</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list localhost:9092 --topic test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十二、消费消息\"><a href=\"#十二、消费消息\" class=\"headerlink\" title=\"十二、消费消息\"></a>十二、消费消息</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n","categories":["异步任务"],"tags":["macOS","kafka"]},{"title":"mac etcd","url":"/2021/05/07/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/mac%20etcd/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>##一、使用 brew 安装</p>\n<h4 id=\"1、-确定-brew-是否有-etcd-包：\"><a href=\"#1、-确定-brew-是否有-etcd-包：\" class=\"headerlink\" title=\"1、 确定 brew 是否有 etcd 包：\"></a>1、 确定 brew 是否有 etcd 包：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew search etcd</span><br></pre></td></tr></table></figure>\n<p>当然肯定有这个包，这样做的好处是养成一个好的习惯，避免盲目使用 brew install balabala</p>\n<span id=\"more\"></span>\n<p>####2、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install etcd</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406890-51330d00-af40-11eb-9d77-cee34e5d064d.png\" alt=\"image\"></p>\n<p>####3、运行 etcd<br>安装完后，会有相关提示，告知我们怎么使用，推荐使用 brew services 来管理这些应用。<br>运行 <strong>brew services list</strong>, 可以看到相关应用的状况，很方便。哎，真香！</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406896-542dfd80-af40-11eb-858d-9a8334e523fb.png\" alt=\"image\"></p>\n<p>brew services 常用的操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 启动某个应用，这里用 etcd 做演示</span><br><span class=\"line\">brew services start etcd</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止某个应用</span><br><span class=\"line\">brew services stop etcd</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前应用列表</span><br><span class=\"line\">brew services list</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117406908-58f2b180-af40-11eb-9b81-fd34bffa0fca.png\" alt=\"image\"></p>\n<p>从执行结果中可以看出：</p>\n<ul>\n<li>etcdserver: name = default， name表示节点名称，默认为default。</li>\n<li>etcdserver: data dir = default.etcd，data-dir保存日志和快照的目录，默认为当前工作目录“./default.etcd/”。</li>\n<li>etcdserver: initial advertise peer URLs = <a href=\"http://localhost:2380，通过http://localhost:2380，和集群中其他节点通信。\">http://localhost:2380，通过http://localhost:2380，和集群中其他节点通信。</a></li>\n<li>etcdserver: advertise client URLs = <a href=\"http://localhost:2379，通过http://localhost:2379，对外提供HTTP\">http://localhost:2379，通过http://localhost:2379，对外提供HTTP</a> API服务，供客户端交互。如果配置webui，就使用这个地址。</li>\n<li>etcdserver: heartbeat = 100ms leader发送心跳到followers的间隔时间。</li>\n<li>etcdserver: election = 1000ms 重新投票的超时时间，如果follow在该时间间隔没有收到心跳包，会触发重新投票，默认为1000ms</li>\n<li>集群和每个节点都会生成一个 uuid。</li>\n<li>启动的时候，会运行 raft协议，选举出 leader。</li>\n</ul>\n<p>好了， etcd 已经启动了，现在验证下，是否正确的启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">etcdctl endpoint health</span><br></pre></td></tr></table></figure>\n<p>正常情况会输出：<br><img src=\"https://user-images.githubusercontent.com/28568478/117406997-7e7fbb00-af40-11eb-951f-54cfe745af03.png\" alt=\"image\"></p>\n<p>至此，etcd 已经安装完毕。</p>\n<h2 id=\"二、安装etcd-webui\"><a href=\"#二、安装etcd-webui\" class=\"headerlink\" title=\"二、安装etcd webui\"></a>二、安装etcd webui</h2><p>在安装etcd webui之前，请确保已安装node工具。使用brew search node命令，可以查看候选安装包；使用<strong>brew install node</strong>命令，即可安装node工具。</p>\n<p>使用git命令下载etcd webui代码，并修改配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;henszey&#x2F;etcd-browser.git</span><br><span class=\"line\">$ cd etcd-browser&#x2F;</span><br><span class=\"line\">$ vim server.js</span><br></pre></td></tr></table></figure>\n\n<p>编辑server.js，修改内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var etcdHost &#x3D; process.env.ETCD_HOST || &#39;127.0.0.1&#39;; &#x2F;&#x2F; || &#39;172.17.42.1&#39;;</span><br><span class=\"line\">var etcdPort &#x3D; process.env.ETCD_PORT || 2379; &#x2F;&#x2F; 4001</span><br><span class=\"line\">var serverPort &#x3D; process.env.SERVER_PORT || 8000;</span><br></pre></td></tr></table></figure>\n\n<p>将etcd host修改为本机，将etcd port修改为2379（对于旧版etcd，修改为4001）。</p>\n<p>在安装etcd webui之前，务必先启动etcd。</p>\n<p>启动etcd webui，执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">node server.js</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy &#x2F;api requests to etcd on 127.0.0.1:2379etc-browser listening on port 8000</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，直接访问：<a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a>，响应页面如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117407010-82abd880-af40-11eb-83f7-840fac4b4a06.png\" alt=\"image\"></p>\n<p>至此，mac下安装etcd成功，配置etcd可视化页面etcd webui成功。</p>\n<p>##三、操作<br>最常见的就是put、get和del命令。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 放入一个 键值对</span><br><span class=\"line\"> ~  etcdctl put &quot;name&quot; &quot;zyq1&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">#取出一个 键值对</span><br><span class=\"line\"> ~  etcdctl get  &quot;name&quot;</span><br><span class=\"line\">name</span><br><span class=\"line\">zyq1</span><br><span class=\"line\"># 删除一个 键值对</span><br><span class=\"line\"> ~  etcdctl del  &quot;name&quot;</span><br><span class=\"line\">1</span><br><span class=\"line\"># 放入一个 键值对</span><br></pre></td></tr></table></figure><br>watch<br>watch命令用来监测key的变化，会建立长连接，一直监听。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> ~  etcdctl watch &quot;name&quot;</span><br><span class=\"line\">PUT</span><br><span class=\"line\">name</span><br><span class=\"line\">zyq1</span><br><span class=\"line\">DELETE</span><br><span class=\"line\">name</span><br></pre></td></tr></table></figure>\n\n<p>##四、租约<br>租约是一段时间，可以为etcd的key授予租约。当key被附加到租约时，它的生存时间被绑定到租约的生存时间，一旦租约的TTL到期，租约就过期并且所有附带的key都将被删除。</p>\n<p>一个租约可以绑定不止一个key。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 创建一个20s的租约</span><br><span class=\"line\">$ .&#x2F;etcdctl lease grant 20</span><br><span class=\"line\">lease 694d673115905e37 granted with TTL(20s)</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用租约的 id 进行 put 操作</span><br><span class=\"line\">$ .&#x2F;etcdctl put --lease&#x3D;694d673115905e37 &quot;name&quot; &quot;zyq&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 20s后get发现 key被删除了</span><br><span class=\"line\">$ .&#x2F;etcdctl get &quot;name&quot;</span><br><span class=\"line\"># 空应答</span><br></pre></td></tr></table></figure>\n\n<p>租约可以被删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 创建一个20s的租约</span><br><span class=\"line\">$ .&#x2F;etcdctl lease grant 1000</span><br><span class=\"line\">lease 694d673115905e49 granted with TTL(1000s)</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用租约的 id 进行 put 操作</span><br><span class=\"line\">$ .&#x2F;etcdctl put --lease&#x3D;694d673115905e49 &quot;name&quot; &quot;zyq&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\"># 删除租约</span><br><span class=\"line\">$ .&#x2F;etcdctl lease revoke 694d673115905e49</span><br><span class=\"line\">lease 694d673115905e49 revoked</span><br><span class=\"line\"># 发现key也被删除了</span><br><span class=\"line\">$ .&#x2F;etcdctl get &quot;name&quot;</span><br><span class=\"line\"># 空应答</span><br></pre></td></tr></table></figure>\n\n<p>租约可以自动续租</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 创建一个20s的租约</span><br><span class=\"line\">$ .&#x2F;etcdctl lease grant 20</span><br><span class=\"line\">lease 694d673115905e4f granted with TTL(20s)</span><br><span class=\"line\"># 自动续租</span><br><span class=\"line\">$ .&#x2F;etcdctl lease keep-alive 694d673115905e4f</span><br><span class=\"line\">lease 694d673115905e4f keepalived with TTL(20)</span><br><span class=\"line\">lease 694d673115905e4f keepalived with TTL(20)</span><br></pre></td></tr></table></figure>\n\n<p>————————————————<br>转自链接：<br><a href=\"https://learnku.com/articles/42515\">https://learnku.com/articles/42515</a><br><a href=\"https://blog.csdn.net/chinawangfei/article/details/94555155\">https://blog.csdn.net/chinawangfei/article/details/94555155</a></p>\n","categories":["异步任务"],"tags":["macOS","etcd"]},{"title":"mac 安装 zookeeper kafka","url":"/2021/05/07/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/mac%20%E5%AE%89%E8%A3%85%20zookeeper%20kafka/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"1、安装JSK\"><a href=\"#1、安装JSK\" class=\"headerlink\" title=\"1、安装JSK\"></a>1、安装JSK</h1><h1 id=\"2、安装zookeeper\"><a href=\"#2、安装zookeeper\" class=\"headerlink\" title=\"2、安装zookeeper\"></a>2、安装zookeeper</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 后台启动</span><br><span class=\"line\">brew services start zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 非后台启动</span><br><span class=\"line\">zkServer start</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117407463-2c8b6500-af41-11eb-8d22-2eb8ea34bd70.png\" alt=\"image\"></p>\n<h1 id=\"3、安装kafka\"><a href=\"#3、安装kafka\" class=\"headerlink\" title=\"3、安装kafka\"></a>3、安装kafka</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install kafka</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 后台启动</span><br><span class=\"line\">brew services start kafka</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 非后台启动</span><br><span class=\"line\">zookeeper-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties &amp; kafka-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117407483-33b27300-af41-11eb-8dc3-b34985a1527c.png\" alt=\"image\"></p>\n","categories":["异步任务"],"tags":["macOS","kafka"]},{"title":"The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION = 1, but the master has purged binary logs containing GTIDs that the slave requires.","url":"/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93/%20%E8%A7%A3%E5%86%B3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A51236%E9%94%99%E8%AF%AF/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><blockquote>\n<p>在前面的几篇文章中，介绍了MYSQL主从复制相关的内容，包括主从环境搭建，具体文章可参考：</p>\n<p>使用传统方式搭建MySQL 5.7 异步复制环境：<a href=\"http://www.seiang.com/?p=296\">http://www.seiang.com/?p=296</a></p>\n<p>基于GTID方式搭建MySQL 5.7 主从复制环境：<a href=\"http://www.seiang.com/?p=334\">http://www.seiang.com/?p=334</a></p>\n</blockquote>\n<p>最近遇到mysql开启gtid做复制时，主从同步断开，从库出现1236错误，导致同步无法进行，本文就这问题记录下处理步骤</p>\n<figure class=\"highlight plain\"><figcaption><span>Basic</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">Last_IO_Errno: 1236</span><br><span class=\"line\"></span><br><span class=\"line\">Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;The slave is connecting using CHANGE MASTER TO MASTER_AUTO_POSITION &#x3D; 1, but the master has purged binary logs containing GTIDs that the slave requires.&#39;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般两种情况会出现以上现象</p>\n<p>1.在主库上手动执行清除二进制日志文件</p>\n<p>2.主库重启，重新同步时</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>解决方法：</p>\n<p>1、在主库上执行以下命令，查询gtid_purged，记录下改值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show global variables like &#39;%gtid%&#39; \\G;</span><br></pre></td></tr></table></figure>\n\n<p>2、在从库上执行以下命令，查询已经执行过的gtid即gtid_executed，记录下主库的值，本机的不需</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show global variables like &#39;%gtid%&#39; \\G;</span><br></pre></td></tr></table></figure>\n<p>3、在从库上执行以下命令停止同步线程及重置同步相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@localhost [(none)]&gt; stop slave;</span><br><span class=\"line\">root@localhost [(none)]&gt; reset slave;</span><br><span class=\"line\">root@localhost [(none)]&gt; reset master;</span><br></pre></td></tr></table></figure>\n<p>4、在从库上设置gtid_purged</p>\n<p>该值有两个来源，一是在主库上查询的gtid_purged，二是在从库上查询的已经执行过的gtid_executed值（本机的就不需要，主库上gtid）</p>\n<p>注意：一定记得加上从库上已经执行过的gtid，若只设置了主库上的gtid_purged，此时从库会重新拉取主库上所有的二进制日志文件，同步过程会出现其他错误，导致同步无法进行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;  set @@global.gtid_purged&#x3D;&#39;你的GITD值&#39;;</span><br><span class=\"line\">Query OK, 0 rows affected (2.12 sec)</span><br></pre></td></tr></table></figure>\n<p>具体如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@localhost [(none)]&gt; set @@global.gtid_purged&#x3D;&#39;dc299ff4-79e5-11e8-8d10-525400cf9369:1-2,dc299ff4-79e5-11e8-8d10-525400cf9369:1-64566&#39;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>注意：设置gtid_purged值时，gtid_executed值必须为空否则报错，该值清空的方法就是reset master命令</p>\n<p>执行完，再次查看相关信息</p>\n<p>5、重新开启同步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; change master to master_host&#x3D;&#39;MASTER_IP&#39;,master_port&#x3D;PORT,master_user&#x3D;&#39;USERNAME&#39;,master_password&#x3D;&#39;PASSWORD&#39;,master_auto_position&#x3D;1;</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (5.55 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.40 sec)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>解决完要验证是否有数据丢失，我做完同步后有少量<strong>数据丢失</strong>！！！！</p>\n<p>参考文档：<br><a href=\"https://www.cnblogs.com/dukuan/p/8744295.html\">https://www.cnblogs.com/dukuan/p/8744295.html</a><br><a href=\"https://cloud.tencent.com/developer/article/1796099\">https://cloud.tencent.com/developer/article/1796099</a><br><a href=\"https://blog.51cto.com/hnr520/1883282\">https://blog.51cto.com/hnr520/1883282</a></p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"Can't connect to local MySQL server through socket'/var/run/mysqld/mysqld.sock' (2)","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Can't%20connect%20to%20local%20MySQL%20server%20through/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>启动命令mysql时报错：</p>\n<p>ERROR2002 (HY000): Can’t connect to local MySQL server through socket’/var/run/mysqld/mysqld.sock’ (2)</p>\n<p>解决方法：</p>\n<p>找到配置文件/etc/mysql/conf.d/mysql.cnf添加</p>\n<p>[mysql]</p>\n<p>protocol=tcp</p>\n<p>参考文献：<a href=\"https://www.cnblogs.com/zhao123h/p/5207622.html\">https://www.cnblogs.com/zhao123h/p/5207622.html</a></p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"Mysql5.7使用group by查询时order by无效问题","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql5.7%E4%BD%BF%E7%94%A8group%20by%E6%9F%A5%E8%AF%A2%E6%97%B6order%20by%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Mysql5.7使用group by查询时order by无效问题<br>第一种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\t*</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\tuser_paper_relation</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\tpaper_id &#x3D; &quot;&quot;</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\texamer_id</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">\ttotal_score DESC</span><br></pre></td></tr></table></figure>\n<p>问题：发现先执行的group by，后执行order by，我要的结果是先排序再分组。</p>\n<p>第二种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\t*</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t( SELECT * FROM user_paper_relation WHERE paper_id &#x3D; &quot;&quot;  ORDER BY consuming_time DESC ) u</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\tu.examer_id</span><br></pre></td></tr></table></figure>\n<p>问题：本以为将排序写成一个子查询应该会先排序后分组，执行后发现问题同第一种写法一样。</p>\n<p>第三种写法（最终解决的写法）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\ta.*</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t(</span><br><span class=\"line\">\tSELECT</span><br><span class=\"line\">\t\t*</span><br><span class=\"line\">\tFROM</span><br><span class=\"line\">\t\tuser_paper_relation</span><br><span class=\"line\">\tWHERE</span><br><span class=\"line\">\t\tpaper_id &#x3D; &quot;&quot;</span><br><span class=\"line\">\tORDER BY</span><br><span class=\"line\">\t\tconsuming_time</span><br><span class=\"line\">\t\tLIMIT 0,</span><br><span class=\"line\">\t\t300</span><br><span class=\"line\">\t) a</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\ta.examer_id</span><br></pre></td></tr></table></figure>\n<p>解决方式：在子查询中添加LIMIT 0,300则可使子查询语句即排序执行完再进行分组。</p>\n<p>问题原因</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">原因：在mysql5.7中，如果不加limit，系统会把order by优化掉。</span><br><span class=\"line\">在mysql5.7手册的8.2.2.1中有解释：</span><br><span class=\"line\">子查询的优化是使用半连接的策略完成的(The optimizer uses semi-join strategies to improve subquery execution)</span><br><span class=\"line\">使用半连接进行优化，子查询语句必须满足一些标准(In MySQL, a subquery must satisfy these criteria to be handled as a semi-join)。</span><br><span class=\"line\">其中一个标准是:必须不是一个包含了limit和order by的语句(It must not have ORDER BY with LIMIT.)</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/weiwoyonzhe/article/details/82888281\">https://blog.csdn.net/weiwoyonzhe/article/details/82888281</a></p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"Mac下MySQL-python安装及EnvironmentError mysql_config not found的解决办法","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Mac%E4%B8%8BMySQL-python%E5%AE%89%E8%A3%85%E5%8F%8AEnvironmentError:%20mysql_config%20not%20found%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>今天  pip install MySQL-python==1.2.5  报如下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">EnvironmentError: mysql_config not found</span><br><span class=\"line\"></span><br><span class=\"line\">Command &quot;python setup.py egg_info&quot; failed with error code 1 in &#x2F;private&#x2F;var&#x2F;folders&#x2F;6h&#x2F;hchh3z9d6b33h11qh0wh__dh0000gn&#x2F;T&#x2F;pip-install-Rm43Qv&#x2F;MySQL-python&#x2F;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117392434-a6f9bc00-af24-11eb-836c-f51c7a67ae47.png\" alt=\"image\"></p>\n<p>解决方法如下：</p>\n<p>1）首先需要进行Python的安装</p>\n<p>（2）进行mysql的安装，多种方式，偷懒一些可以直接使用brew指令</p>\n<p>brew install mysql</p>\n<p>（3）mysql_config not found的造成原因就是因为我们默认安装的路径没有被填加进去，所以使用export命令来设置下环境变量：</p>\n<p>export PATH=$PATH:/usr/local/mysql/bin</p>\n<p>（4）进行MySQL-Python的安装：</p>\n<p>pip install MySQL-Python</p>\n<p>原文：<a href=\"https://blog.csdn.net/Megustas_JJC/article/details/78955958\">https://blog.csdn.net/Megustas_JJC/article/details/78955958</a></p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"Mysql命令行查看数据库大小(数据库版本为5.7以上)","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E5%B0%8F(%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%88%E6%9C%AC%E4%B8%BA5.7%E4%BB%A5%E4%B8%8A)/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>数据库版本为5.7以上<br>1、选择数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use mydb1;</span><br></pre></td></tr></table></figure>\n<p>2、查看指定数据库表结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from information_schema.TABLES where information_schema.TABLES.TABLE_SCHEMA&#x3D;&#39;mydb1&#39;;</span><br></pre></td></tr></table></figure>\n<p>3、查看指定数据库的大小<br>比如说 数据库mydb1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(round(sum(DATA_LENGTH&#x2F;1024&#x2F;1024),2), &#39;MB&#39;) as data from information_schema.TABLES where information_schema.TABLES.TABLE_SCHEMA&#x3D;&#39;mydb1&#39;;</span><br></pre></td></tr></table></figure>\n<p>4、查看指定数据库的表的大小<br>比如说 数据库mydb1中b1表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select concat(round(sum(DATA_LENGTH&#x2F;1024&#x2F;1024),2), &#39;MB&#39;) as data from information_schema.TABLES where information_schema.TABLES.TABLE_SCHEMA&#x3D;&#39;mydb1&#39; and TABLE_NAME&#x3D;&#39;b1&#39;;</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["mysql"]},{"title":"Linux安装MySQL","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Linux%E5%AE%89%E8%A3%85MySQL/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><p>sudo apt update</p>\n<p>sudo apt-get install mysql-server  # 安装MySQL服务端</p>\n<p>以上两个命令 即安装成功</p>\n<span id=\"more\"></span>\n\n<h2 id=\"二、安装后的密码问题\"><a href=\"#二、安装后的密码问题\" class=\"headerlink\" title=\"二、安装后的密码问题\"></a>二、安装后的密码问题</h2><p>sudo cat /etc/mysql/debian.cnf 查看默认的用户名和密码</p>\n<h2 id=\"三、添加自己的密码\"><a href=\"#三、添加自己的密码\" class=\"headerlink\" title=\"三、添加自己的密码\"></a>三、添加自己的密码</h2><ul>\n<li><p>1、use mysql; 然后敲回车</p>\n</li>\n<li><p>2、update user set authentication_string=password(“你的密码”) where user=”root”; 然后敲回车</p>\n</li>\n<li><p>3、flush privileges; 然后敲回车</p>\n</li>\n</ul>\n<p>用账户密码登录时发现报错</p>\n<p>ERROR 1698 (28000): Access denied for user ‘root’@’localhost’</p>\n<p>解决方法如下：</p>\n<ul>\n<li><p>step1：在ubuntu的terminal（也即终端）上输入：</p>\n<pre><code>  sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf,\n\n  进入到这个配置文件，\n\n  然后在这个配置文件中的[mysqld]这一块中加入skip-grant-tables这句话。\n\n  保存:wq，退出。输入：service mysql restart，重新启动mysql。\n</code></pre>\n</li>\n<li><p>step2：在终端上输入mysql -u root -p，遇见输入密码的提示直接回车即可,进入mysql后，分别执行下面三句话：</p>\n<pre><code>  1、use mysql; 然后敲回车\n\n  2、update user set authentication_string=password(&quot;你的密码&quot;) where user=&quot;root&quot;; 然后敲回车\n\n  3、flush privileges; 然后敲回车\n</code></pre>\n</li>\n</ul>\n<ul>\n<li><p>step3：重新进入到mysqld.cnf文件中去把刚开始加的skip-grant-tables这条语句给注释掉。</p>\n<pre><code>      再返回终端输入mysql -u root -p，应该就可以进入数据库了。\n</code></pre>\n</li>\n<li><p>step4：如果此时还是报出错误，那么就需要返回step3中，把注释掉的那条语句重新生效（就是删除#符号），重新进入mysql中，先选择一个数据库（use mysql;）,然后输入select user,plugin from user;，看下图：</p>\n</li>\n</ul>\n<p>从图中可以看到在执行了select user,plugin from user;后，错误原因是因为plugin root的字段是auth_socket，那我们改掉它为下面的mysql_native_password就行了。输入：</p>\n<p>1、update user set authentication_string=password(“你的密码”),plugin=’mysql_native_password’ where user=’root’;</p>\n<p>最后quit退出。返回执行step3。</p>\n<p>那么这个问题就完全解决了</p>\n<p>参考链接：<a href=\"https://www.cnblogs.com/cpl9412290130/p/9583868.html\">https://www.cnblogs.com/cpl9412290130/p/9583868.html</a></p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"SQL的模糊匹配区别---like,rlike,regexpx","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E7%9A%84%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%E5%8C%BA%E5%88%AB---like,rlike,regexpx/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"一、主要区别\"><a href=\"#一、主要区别\" class=\"headerlink\" title=\"一、主要区别\"></a>一、主要区别</h2><ul>\n<li><p>(1) like的内容不是正则，而是通配符。像mysql中的”like”,但是建议使用高级函数”instr”效率更高。</p>\n</li>\n<li><p>(2) rlike的内容可以是正则，正则的写法与java一样。需要转义，例如’\\m’需要使用’\\m’</p>\n</li>\n<li><p>(3) regexp == rlike 同义词 not like not regexp</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"二、Like常用方法\"><a href=\"#二、Like常用方法\" class=\"headerlink\" title=\"二、Like常用方法\"></a>二、Like常用方法</h2><h3 id=\"1-like关键字\"><a href=\"#1-like关键字\" class=\"headerlink\" title=\"1.like关键字\"></a>1.like关键字</h3><p>like有两个模式：_和%</p>\n<p>_：表示单个字符，用来查询定长的数据</p>\n<p>%：表示0个或多个任意字符</p>\n<h3 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"2.示例\"></a>2.示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">（1）SELECT * FROM Persons  WHERE City LIKE &#39;N%&#39;     &quot;Persons&quot; 表中选取居住在以 &quot;N&quot; 开始的城市里的人</span><br><span class=\"line\">（2）SELECT * FROM Persons  WHERE City LIKE &#39;%g&#39;     &quot;Persons&quot; 表中选取居住在以 &quot;g&quot; 结尾的城市里的人</span><br><span class=\"line\">（3）SELECT * FROM Persons   WHERE City LIKE &#39;%lon%&#39;  从 &quot;Persons&quot; 表中选取居住在包含 &quot;lon&quot; 的城市里的人</span><br><span class=\"line\">（4）SELECT * FROM Persons   WHERE City NOT LIKE &#39;%lon%&#39;  从 &quot;Persons&quot; 表中选取居住在不包含 &quot;lon&quot; 的城市里的人</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、Mysql中Regexp常见用法\"><a href=\"#三、Mysql中Regexp常见用法\" class=\"headerlink\" title=\"三、Mysql中Regexp常见用法\"></a>三、Mysql中Regexp常见用法</h2><ul>\n<li><p>模糊匹配，包含特定字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  #查找content字段中包含“车友俱乐部”的记录</span><br><span class=\"line\"> select * from club_content where content regexp &#39;车友俱乐部&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时的regexp与like的以下用法是等同的</span><br><span class=\"line\">select * from club_content where content like &#39;%车友俱乐部%&#39;</span><br></pre></td></tr></table></figure></li>\n<li><p>模糊匹配，以特定字符串开头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查找content字段中以“车友”开头的记录</span><br><span class=\"line\">select * from club_content where content regexp &#39;^车友&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时的regexp与like的以下用法是等同的</span><br><span class=\"line\">select * from club_content where content like &#39;车友%&#39;</span><br></pre></td></tr></table></figure></li>\n<li><p>模糊匹配，以特定字符串结尾</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查找content字段中以“车友”结尾的记录</span><br><span class=\"line\">select * from club_content where content regexp &#39;车友$&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时的regexp与like的以下用法是等同的</span><br><span class=\"line\">select * from club_content where content like &#39;%车友&#39;</span><br></pre></td></tr></table></figure></li>\n<li><p>模糊匹配 或关系</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查找content字段中包含“心得”、“分享”或“技术贴”</span><br><span class=\"line\">select * from club_content where content  REGEXP &#39;心得|分享|技术贴&#39;</span><br></pre></td></tr></table></figure></li>\n<li><p>模糊匹配，不包含单个字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查找content字段中不包含“车”字、“友”字的记录</span><br><span class=\"line\">select * from club_content where content  REGEXP [^车友]</span><br></pre></td></tr></table></figure>\n<p>这个结果跑出来一看大吃一惊，竟然把所有记录给跑出来，这是为什么呢？<br>因为一旦加了这个方括号”[]”，它就把里面的内容拆成单个的字符再匹配，它会逐个字符去匹配判断是不是等于“车”，或者是不是等于“友“，返回的结果是一组0、1的逻辑值。</p>\n</li>\n</ul>\n<p>如果想匹配不包含特定字符串，该怎么实现呢？</p>\n<p>模糊匹配，不包含特定字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查找content字段不包含“车友”字符串的记录</span><br><span class=\"line\">select * from club_content where content not REGEXP &#39;车友&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">交集</span><br><span class=\"line\">表的字段就是</span><br><span class=\"line\">name  no</span><br><span class=\"line\">a     2,9</span><br><span class=\"line\">b     8,10</span><br><span class=\"line\">字符串是str&#x3D;&quot;0,1,2,3,4&quot;</span><br><span class=\"line\">接下来就是查 no字段里跟str里有交集的记录</span><br><span class=\"line\">查询的结果就是name&#x3D;a的,no&#x3D;2,9的</span><br><span class=\"line\">select * from table1 where concat(&#39;,&#39;,no,&#39;,&#39;) regexp concat(&#39;,0,|,1,|,2,|,3,|,4,&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">某字段中搜索</span><br><span class=\"line\">可以使用FIND_IN_SET</span><br><span class=\"line\">name  no</span><br><span class=\"line\">a     2,9</span><br><span class=\"line\">b     8,10</span><br><span class=\"line\">想查出no中包含2的记录</span><br><span class=\"line\">select * from table1 where FIND_IN_SET(&#39;2&#39;, no)</span><br><span class=\"line\"></span><br><span class=\"line\">替换某字段中的内容</span><br><span class=\"line\">UPDATE &#96;blog_iplimit&#96; SET &#96;ip&#96; &#x3D; REPLACE(&#96;ip&#96;, &#39;,&#39;, &#39;&#39;)</span><br></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://blog.csdn.net/ZZQHELLO2018/java/article/details/92794555\">https://blog.csdn.net/ZZQHELLO2018/java/article/details/92794555</a></p>\n","categories":["数据库"],"tags":["mysql","sql"]},{"title":"Ubuntu 18.04 安装MongoDB","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Ubuntu%2018.04%20%E5%AE%89%E8%A3%85MongoDB/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"第1步-–-导入公钥\"><a href=\"#第1步-–-导入公钥\" class=\"headerlink\" title=\"第1步 – 导入公钥\"></a>第1步 – 导入公钥</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</span><br></pre></td></tr></table></figure>\n<h3 id=\"第2步-–-创建源列表文件MongoDB\"><a href=\"#第2步-–-创建源列表文件MongoDB\" class=\"headerlink\" title=\"第2步 – 创建源列表文件MongoDB\"></a>第2步 – 创建源列表文件MongoDB</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;deb [ arch&#x3D;amd64,arm64 ] http:&#x2F;&#x2F;repo.mongodb.org&#x2F;apt&#x2F;ubuntu xenial&#x2F;mongodb-org&#x2F;3.4 multiverse&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;mongodb-org-3.4.list</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"第3步-–-更新存储库\"><a href=\"#第3步-–-更新存储库\" class=\"headerlink\" title=\"第3步 – 更新存储库\"></a>第3步 – 更新存储库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第4步-–-安装MongoDB\"><a href=\"#第4步-–-安装MongoDB\" class=\"headerlink\" title=\"第4步 – 安装MongoDB\"></a>第4步 – 安装MongoDB</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install -y mongodb-org</span><br></pre></td></tr></table></figure>\n<h3 id=\"第5–-步修改配置\"><a href=\"#第5–-步修改配置\" class=\"headerlink\" title=\"第5– 步修改配置\"></a>第5– 步修改配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net:</span><br><span class=\"line\">  port: 27017         # 端口号</span><br><span class=\"line\">  bindIp: 0.0.0.0    # 允许访问host</span><br><span class=\"line\">setParameter:</span><br><span class=\"line\">   enableLocalhostAuthBypass: false # 大意为开启授权</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建目录\"><a href=\"#新建目录\" class=\"headerlink\" title=\"新建目录\"></a>新建目录</h3><p>为什么要创建这样这个文件夹呢？看其他人的说法是这个：</p>\n<p>MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。</p>\n<p>然后等待完成就可以使用MongoDB了，输入mongo进入命令行就可以操作了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p &#x2F;data&#x2F;db</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;mongod --config &#x2F;etc&#x2F;mongod.conf -dbpath &#x2F;data&#x2F;db&#x2F;</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["mongodb"]},{"title":"Ubuntu18.04 安装redis","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Ubuntu18.04%20%E5%AE%89%E8%A3%85redis/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install redis   # 安装redis</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#x2F;etc&#x2F;redis&#x2F;redis.conf # 变更配置</span><br><span class=\"line\">注释bind 127.0.0.1 ::1</span><br><span class=\"line\">加 bind 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、命令\"><a href=\"#二、命令\" class=\"headerlink\" title=\"二、命令\"></a>二、命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin&#x2F;sh &#x2F;etc&#x2F;init.d&#x2F;redis-server start&#x2F;stop&#x2F;restart</span><br><span class=\"line\">systemctl start&#x2F;stop&#x2F;restart redis-server</span><br><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;redis-server # 只是启动</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["redis"]},{"title":"linux安装redis 完整步骤","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/linux%E5%AE%89%E8%A3%85redis%20%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"安装：\"><a href=\"#安装：\" class=\"headerlink\" title=\"安装：\"></a>安装：</h2><h3 id=\"1-获取redis资源\"><a href=\"#1-获取redis资源\" class=\"headerlink\" title=\"1.获取redis资源\"></a>1.获取redis资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.8.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-解压\"><a href=\"#2-解压\" class=\"headerlink\" title=\"2.解压\"></a>2.解压</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　tar xzvf redis-4.0.8.tar.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3.安装\"></a>3.安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　cd redis-4.0.8</span><br><span class=\"line\"></span><br><span class=\"line\">　　make</span><br><span class=\"line\"></span><br><span class=\"line\">　　cd src</span><br><span class=\"line\"></span><br><span class=\"line\">　　make install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-移动配置文件到安装目录下\"><a href=\"#4-移动配置文件到安装目录下\" class=\"headerlink\" title=\"4.移动配置文件到安装目录下\"></a>4.移动配置文件到安装目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　cd ..&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">　　mkdir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc</span><br><span class=\"line\"></span><br><span class=\"line\">　　mv redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-配置redis为后台启动\"><a href=\"#5-配置redis为后台启动\" class=\"headerlink\" title=\"5.配置redis为后台启动\"></a>5.配置redis为后台启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf &#x2F;&#x2F; 将daemonize no 改成daemonize yes</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-将redis加入到开机启动\"><a href=\"#6-将redis加入到开机启动\" class=\"headerlink\" title=\"6.将redis加入到开机启动\"></a>6.将redis加入到开机启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　vi &#x2F;etc&#x2F;rc.local &#x2F;&#x2F; 在里面添加内容：&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf (意思就是开机调用这段开启redis的命令)</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-开启redis\"><a href=\"#7-开启redis\" class=\"headerlink\" title=\"7.开启redis\"></a>7.开启redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">常用命令</span><br><span class=\"line\"></span><br><span class=\"line\">　　redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;etc&#x2F;redis.conf &#x2F;&#x2F;启动redis</span><br><span class=\"line\"></span><br><span class=\"line\">　　pkill redis  &#x2F;&#x2F;停止redis</span><br><span class=\"line\"></span><br><span class=\"line\">卸载redis：</span><br><span class=\"line\"></span><br><span class=\"line\">　　rm -rf &#x2F;usr&#x2F;local&#x2F;redis &#x2F;&#x2F;删除安装目录</span><br><span class=\"line\"></span><br><span class=\"line\">　　rm -rf &#x2F;usr&#x2F;bin&#x2F;redis-* &#x2F;&#x2F;删除所有redis相关命令脚本</span><br><span class=\"line\"></span><br><span class=\"line\">　　rm -rf &#x2F;root&#x2F;download&#x2F;redis-4.0.4 &#x2F;&#x2F;删除redis解压文件夹</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["redis"]},{"title":"docker mysql Could not write unix socket lock file /var/run/mysqld/mysqld.sock.lock","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/docker%20mysql%20Could%20not%20write%20unix%20socket%20lock%20file/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>昨天在用docker部署mysql的时候一直报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2020-06-23T09:59:47.339758Z 0 [Note] Skipping generation of SSL certificates as certificate files are present in data directory.</span><br><span class=\"line\">2020-06-23T09:59:47.340593Z 0 [Warning] CA certificate ca.pem is self signed.</span><br><span class=\"line\">2020-06-23T09:59:47.340636Z 0 [Note] Skipping generation of RSA key pair as key files are present in data directory.</span><br><span class=\"line\">2020-06-23T09:59:47.340852Z 0 [ERROR] Could not create unix socket lock file &#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock.lock.</span><br><span class=\"line\">2020-06-23T09:59:47.340867Z 0 [ERROR] Unable to setup unix socket lock file.</span><br><span class=\"line\">2020-06-23T09:59:47.340872Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：<br>这里可以看到mysqld.sock的目录是在/var/run/mysqld目录下，但是这个目录，我们并没有挂载主机目录，下面我们重新运行mysql容器，挂载相应的容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">volumes:</span><br><span class=\"line\">     - &#x2F;data&#x2F;mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class=\"line\">     - .&#x2F;init:&#x2F;docker-entrypoint-initdb.d&#x2F;</span><br><span class=\"line\">     - &#x2F;data&#x2F;mysql-data&#x2F;mysqld:&#x2F;var&#x2F;run&#x2F;mysqld</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://zhangxueliang.blog.csdn.net/article/details/111266278\">docker安装mysql及相关配置、运行细节和常见报错解决方案</a></p>\n","categories":["数据库"],"tags":["docker","mysql"]},{"title":"Ubuntu18.04 安装mysql","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/Ubuntu18.04%20%E5%AE%89%E8%A3%85mysql/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"一、安装方法\"><a href=\"#一、安装方法\" class=\"headerlink\" title=\"一、安装方法\"></a>一、安装方法</h2><p><a href=\"https://www.cnblogs.com/opsprobe/p/9126864.html\">Ubuntu18.04下安装MySQL</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"二、常用命令\"><a href=\"#二、常用命令\" class=\"headerlink\" title=\"二、常用命令\"></a>二、常用命令</h2><p>　　1.启动：/etc/init.d/mysql start<br>sudo service mysql restart</p>\n<p>　　2.停止：/etc/init.d/mysql stop</p>\n<p>　　3.重启：/etc/init.d/mysql restart</p>\n<h2 id=\"三、报错\"><a href=\"#三、报错\" class=\"headerlink\" title=\"三、报错\"></a>三、报错</h2><h4 id=\"1、Can’t-connect-to-MySQL-server-on-‘‘-61\"><a href=\"#1、Can’t-connect-to-MySQL-server-on-‘‘-61\" class=\"headerlink\" title=\"1、Can’t connect to MySQL server on ‘‘ (61)\"></a>1、<a href=\"https://my.oschina.net/Laily/blog/712958\">Can’t connect to MySQL server on ‘<remote-ip>‘ (61)</remote-ip></a></h4><p>第一次安装可能是3306 只监听了localhost ，修改配置文件/etc/mysql/mysql.conf.d/mysqld.cnf中的bind-address为0.0.0.0即可<br><img src=\"https://user-images.githubusercontent.com/28568478/117405298-fef0ec80-af3d-11eb-9d77-3c2cb8079e64.png\" alt=\"image\"></p>\n<h4 id=\"2、权限不够\"><a href=\"#2、权限不够\" class=\"headerlink\" title=\"2、权限不够\"></a>2、权限不够</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">（1）SSH登录root管理员账户</span><br><span class=\"line\"></span><br><span class=\"line\">（2）登录MySql</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">（3）执行授权命令</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; grant all privileges on *.* to root@&#39;localhost&#39; identified by &#39;密码&#39;;</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; grant all privileges on *.* to root@&#39;%&#39; identified by &#39;密码&#39;;</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">（4）退出再试</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; quit</span><br><span class=\"line\">Bye</span><br><span class=\"line\">（5）再次登录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-supervisor-配置-可不用配置-默认后台自启动\"><a href=\"#四、-supervisor-配置-可不用配置-默认后台自启动\" class=\"headerlink\" title=\"四、 supervisor 配置(可不用配置 默认后台自启动)\"></a>四、 supervisor 配置(可不用配置 默认后台自启动)</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:mysql_3306]</span><br><span class=\"line\">command&#x3D;&#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class=\"line\">process_name&#x3D;mysql_3306</span><br><span class=\"line\">numprocs&#x3D;1</span><br><span class=\"line\">;user&#x3D;martin</span><br><span class=\"line\">autostart&#x3D;true</span><br><span class=\"line\">autorestart&#x3D;true</span><br><span class=\"line\">startsecs&#x3D;10</span><br><span class=\"line\">startretries&#x3D;7</span><br><span class=\"line\">stopsignal&#x3D;TERM</span><br><span class=\"line\">stopwaitsecs&#x3D;60</span><br><span class=\"line\">redirect_stderr&#x3D;false</span><br><span class=\"line\">stdout_logfile&#x3D;&#x2F;root&#x2F;log&#x2F;mysql&#x2F;mysql.log</span><br><span class=\"line\">stdout_logfile_maxbytes&#x3D;50MB</span><br><span class=\"line\">stdout_logfile_backups&#x3D;10</span><br><span class=\"line\">stdout_capture_maxbytes&#x3D;1MB</span><br><span class=\"line\">stderr_logfile&#x3D;&#x2F;root&#x2F;log&#x2F;mysql&#x2F;mysql_error.log</span><br><span class=\"line\">stderr_logfile_maxbytes&#x3D;50MB</span><br><span class=\"line\">stderr_logfile_backups&#x3D;10</span><br><span class=\"line\">stderr_capture_maxbytes&#x3D;1MB</span><br><span class=\"line\">;directory&#x3D;&#x2F;home&#x2F;martin&#x2F;data&#x2F;logagent</span><br><span class=\"line\">serverurl&#x3D;AUTO</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["mysql"]},{"title":"mac 安装redis、mysql、MongoDB","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/mac%20%E5%AE%89%E8%A3%85redis%E3%80%81mysql%E3%80%81MongoDB/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"redis-安装\"><a href=\"#redis-安装\" class=\"headerlink\" title=\"redis 安装\"></a>redis 安装</h2><ul>\n<li>brew install redis<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4></li>\n<li>brew services start redis（后台启动）</li>\n<li>redis-server /usr/local/etc/redis.conf （非后台启动）</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h2><ul>\n<li>brew install mysql<h4 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h4></li>\n<li>brew services start mysql（后台启动）</li>\n<li>mysql.server start（非后台启动）</li>\n<li>没有详细的配置文件，可参考其他系统下的my.cnf进行自我配置</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117404953-6d817a80-af3d-11eb-8663-cb188d59b022.png\" alt=\"image\"></p>\n<p>1、我们在没有root 密码的情况下安装了您的MySQL数据库。确保它运行：mysql_secure_installation<br>2、登录mysql: mysql -uroot<br>3、如果忘记密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;mysql&#x2F;</span><br><span class=\"line\">.&#x2F;mysqld_safe --skip-grant-tables &amp;  # 禁止mysql验证功能</span><br><span class=\"line\">.&#x2F;mysql  # 进入mysql</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; &#x3D; &#39;你的新密码&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>4、<img src=\"https://user-images.githubusercontent.com/28568478/117405005-825e0e00-af3d-11eb-8a6e-20ae85e72642.png\" alt=\"image\"><br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER root@localhost IDENTIFIED WITH mysql_native_password BY ‘你的密码’;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mongodb-安装\"><a href=\"#mongodb-安装\" class=\"headerlink\" title=\"mongodb 安装\"></a>mongodb 安装</h2><ul>\n<li>brew install mongodb</li>\n</ul>\n<h4 id=\"启动-2\"><a href=\"#启动-2\" class=\"headerlink\" title=\"启动\"></a>启动</h4><ul>\n<li>brew services start mongodb （后台启动）</li>\n<li>mongod –config /usr/local/etc/mongod.conf （非后台启动）</li>\n</ul>\n","categories":["数据库"],"tags":["macOS","mysql","mongodb","redis"]},{"title":"macOS pip 安装 mysqlclient 报错","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/macOS%20pip%20%E5%AE%89%E8%A3%85%20mysqlclient%20%E6%8A%A5%E9%94%99/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ld: library not found for -lssl</span><br><span class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br><span class=\"line\">error: command &#39;clang&#39; failed with exit status 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export LIBRARY_PATH&#x3D;$LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;opt&#x2F;openssl&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure>\n<p>然后再安装</p>\n","categories":["数据库"],"tags":["macOS","mysql","mysqlclient"]},{"title":"mysql同步报错","url":"/2021/11/03/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%20%E5%90%8C%E6%AD%A5%E6%8A%A5%E9%94%99/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"报错1：-Error-‘Operation-CREATE-USER-failed-for-‘zhangsan’-’-’’-on-query\"><a href=\"#报错1：-Error-‘Operation-CREATE-USER-failed-for-‘zhangsan’-’-’’-on-query\" class=\"headerlink\" title=\"报错1： Error ‘Operation CREATE USER failed for ‘zhangsan’@’%’’ on query\"></a>报错1： Error ‘Operation CREATE USER failed for ‘zhangsan’@’%’’ on query</h3><p>在给用户授权时，mysql出现如下报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Last_SQL_Error: Error &#39;Operation CREATE USER failed for &#39;zahngsan&#39;@&#39;%&#39;&#39; on query. Default database: &#39;&#39;. Query: &#39;CREATE USER &#39;zhangsan&#39;@&#39;%&#39; IDENTIFIED BY PASSWORD &#39;*2F7A17C3E76FB561456B2111C0E78CFB5E5030A5&#39;&#39;</span><br></pre></td></tr></table></figure>\n<p>这个报错的原因可能是由于：（1）已创建过该用户 （2）已有该用户的授权信息</p>\n<p>解决方法：</p>\n<p>删除此用户，刷新，并重启slave</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#删除该用户</span><br><span class=\"line\">mysql&gt; drop user &#39;zhangsan&#39;@&#39;%&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启同步</span><br><span class=\"line\">mysql&gt; stop slave;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\"></span><br><span class=\"line\"># 最后查看是否同步正常</span><br><span class=\"line\">mysql&gt; show slave status\\G</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["mysql"]},{"title":"mysql  show slave status 状态详解","url":"/2021/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%20%20show%20slave%20status%20%E7%8A%B6%E6%80%81%E8%AF%A6%E8%A7%A3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>MySQL同步功能由3个线程(master上1个，slave上2个)来实现。执行 DE&gt;START SLAVEDE&gt; 语句后，slave就创建一个I/O线程。I/O线程连接到master上，并请求master发送二进制日志中的语句。master创建一个线程来把日志的内容发送到slave上。这个线程在master上执行 DE&gt;SHOW PROCESSLISTDE&gt; 语句后的结果中的 DE&gt;Binlog DumpDE&gt; 线程便是。slave上的I/O线程读取master的 DE&gt;Binlog DumpDE&gt; 线程发送的语句，并且把它们拷贝到其数据目录下的中继日志(relay logs)中。第三个是SQL线程，salve用它来读取中继日志，然后执行它们来更新数据。</p>\n<p>如上所述，每个master/slave上都有3个线程。每个master上有多个线程，它为每个slave连接都创建一个线程，每个slave只有I/O和SQL线程。</p>\n<p>show slave master 用于提供有关从属服务器线程的关键参数的信息:</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                Master_Host: 172.17.2.40</span><br><span class=\"line\">                Master_User: photorepl</span><br><span class=\"line\">                Master_Port: 4331</span><br><span class=\"line\">               Connect_Retry: 60</span><br><span class=\"line\">               Master_Log_File: mysql-bin.005502</span><br><span class=\"line\">                Read_Master_Log_Pos: 64401238</span><br><span class=\"line\">               Relay_Log_File: mysqld-relay-bin.015418</span><br><span class=\"line\">               Relay_Log_Pos: 13456757</span><br><span class=\"line\">               Relay_Master_Log_File: mysql-bin.005152</span><br><span class=\"line\">               Slave_IO_Running: Yes</span><br><span class=\"line\">              Slave_SQL_Running: Yes</span><br><span class=\"line\">               Replicate_Do_DB:</span><br><span class=\"line\">               Replicate_Ignore_DB: mysql</span><br><span class=\"line\">               Replicate_Do_Table:</span><br><span class=\"line\">               Replicate_Ignore_Table:</span><br><span class=\"line\">               Replicate_Wild_Do_Table: photo.%</span><br><span class=\"line\">               Replicate_Wild_Ignore_Table: mysql.%</span><br><span class=\"line\">                 Last_Errno: 0</span><br><span class=\"line\">                 Last_Error:</span><br><span class=\"line\">               Skip_Counter: 0</span><br><span class=\"line\">               Exec_Master_Log_Pos: 13456620</span><br><span class=\"line\">              Relay_Log_Space: 36764898503</span><br><span class=\"line\">               Until_Condition: None</span><br><span class=\"line\">              Until_Log_File:</span><br><span class=\"line\">              Until_Log_Pos: 0</span><br><span class=\"line\">              Master_SSL_Allowed: No</span><br><span class=\"line\">             Master_SSL_CA_File:</span><br><span class=\"line\">             Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">              Master_SSL_Cipher:</span><br><span class=\"line\">             Master_SSL_Key:</span><br><span class=\"line\">            Seconds_Behind_Master: 249904</span><br><span class=\"line\">××××××××××××××××××××××××××××××××××××××××××××××××××××××××××</span><br></pre></td></tr></table></figure>\n\n<p>SHOW SLAVE STATUS会返回以下字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> Slave_IO_State</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW PROCESSLIST输出的State字段的拷贝。SHOW PROCESSLIST用于从属I&#x2F;O线程。如果线程正在试图连接到主服务器，正在等待来自主服务器的时间或正在连接到主服务器等，本语句会通知您</span><br><span class=\"line\"></span><br><span class=\"line\"> Master_User</span><br><span class=\"line\"></span><br><span class=\"line\">被用于连接主服务器的当前用户。</span><br><span class=\"line\"></span><br><span class=\"line\">Master_Port</span><br><span class=\"line\"></span><br><span class=\"line\">当前的主服务器接口。</span><br><span class=\"line\"></span><br><span class=\"line\">Connect_Retry</span><br><span class=\"line\"></span><br><span class=\"line\">--master-connect-retry选项的当前值</span><br><span class=\"line\"></span><br><span class=\"line\">Master_Log_File</span><br><span class=\"line\"></span><br><span class=\"line\">I&#x2F;O线程当前正在读取的主服务器二进制日志文件的名称。</span><br><span class=\"line\"></span><br><span class=\"line\">Read_Master_Log_Pos</span><br><span class=\"line\"></span><br><span class=\"line\">在当前的主服务器二进制日志中，I&#x2F;O线程已经读取的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">Relay_Log_File</span><br><span class=\"line\"></span><br><span class=\"line\">SQL线程当前正在读取和执行的中继日志文件的名称。</span><br><span class=\"line\"></span><br><span class=\"line\">Relay_Log_Pos</span><br><span class=\"line\"></span><br><span class=\"line\">在当前的中继日志中，SQL线程已读取和执行的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">Relay_Master_Log_File</span><br><span class=\"line\"></span><br><span class=\"line\">由SQL线程执行的包含多数近期事件的主服务器二进制日志文件的名称。</span><br><span class=\"line\"></span><br><span class=\"line\">Slave_IO_Running</span><br><span class=\"line\"></span><br><span class=\"line\">I&#x2F;O线程是否被启动并成功地连接到主服务器上。</span><br><span class=\"line\"></span><br><span class=\"line\">Slave_SQL_Running</span><br><span class=\"line\"></span><br><span class=\"line\">SQL线程是否被启动。</span><br><span class=\"line\"></span><br><span class=\"line\">Replicate_Do_DB,Replicate_Ignore_DB</span><br><span class=\"line\"></span><br><span class=\"line\">使用--replicate-do-db和--replicate-ignore-db选项指定的数据库清单。</span><br><span class=\"line\"></span><br><span class=\"line\">Replicate_Do_Table,Replicate_Ignore_Table,Replicate_Wild_Do_Table,Replicate_Wild_Ignore_Table</span><br><span class=\"line\"></span><br><span class=\"line\">使用--replicate-do-table,--replicate-ignore-table,--replicate-wild-do-table和--replicate-wild-ignore_table选项指定的表清单。</span><br><span class=\"line\"></span><br><span class=\"line\">Last_Errno,Last_Error</span><br><span class=\"line\"></span><br><span class=\"line\">被多数最近被执行的查询返回的错误数量和错误消息。错误数量为0并且消息为空字符串意味着“没有错误”。如果Last_Error值不是空值，它也会在从属服务器的错误日志中作为消息显示。</span><br><span class=\"line\"></span><br><span class=\"line\">举例说明：</span><br><span class=\"line\"></span><br><span class=\"line\">Last_Errno: 1051</span><br><span class=\"line\"></span><br><span class=\"line\">Last_Error: error &#39;Unknown table &#39;z&#39;&#39; on query &#39;drop table z&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">该消息指示，表z曾经存在于在主服务器中并已被取消了，但是它没有在从属服务器中存在过，因此对于从属服务器，DROP TABLE失败。（举例说明，在设置复制时，如果您忘记了把此表拷贝到从属服务器中，则这有可能发生。）</span><br><span class=\"line\"></span><br><span class=\"line\">Skip_Counter</span><br><span class=\"line\"></span><br><span class=\"line\">最近被使用的用于SQL_SLAVE_SKIP_COUNTER的值。</span><br><span class=\"line\"></span><br><span class=\"line\">Exec_Master_Log_Pos</span><br><span class=\"line\"></span><br><span class=\"line\">来自主服务器的二进制日志的由SQL线程执行的上一个时间的位置（Relay_Master_Log_File）。在主服务器的二进制日志中的(Relay_Master_Log_File,Exec_Master_Log_Pos)对应于在中继日志中的(Relay_Log_File,Relay_Log_Pos)。</span><br><span class=\"line\"></span><br><span class=\"line\">Relay_Log_Space</span><br><span class=\"line\"></span><br><span class=\"line\">所有原有的中继日志结合起来的总大小。</span><br><span class=\"line\"></span><br><span class=\"line\">Until_Condition,Until_Log_File,Until_Log_Pos</span><br><span class=\"line\"></span><br><span class=\"line\">在START SLAVE语句的UNTIL子句中指定的值。</span><br><span class=\"line\"></span><br><span class=\"line\">Until_Condition具有以下值：</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有指定UNTIL子句，则没有值</span><br><span class=\"line\"></span><br><span class=\"line\">如果从属服务器正在读取，直到达到主服务器的二进制日志的给定位置为止，则值为Master</span><br><span class=\"line\"></span><br><span class=\"line\">如果从属服务器正在读取，直到达到其中继日志的给定位置为止，则值为Relay</span><br><span class=\"line\"></span><br><span class=\"line\">Until_Log_File和Until_Log_Pos用于指示日志文件名和位置值。日志文件名和位置值定义了SQL线程在哪个点中止执行。</span><br><span class=\"line\"></span><br><span class=\"line\">Master_SSL_Allowed,Master_SSL_CA_File,Master_SSL_CA_Path,Master_SSL_Cert,Master_SSL_Cipher,Master_SSL_Key</span><br><span class=\"line\"></span><br><span class=\"line\">这些字段显示了被从属服务器使用的参数。这些参数用于连接主服务器。</span><br><span class=\"line\"></span><br><span class=\"line\">Master_SSL_Allowed具有以下值：</span><br><span class=\"line\"></span><br><span class=\"line\">如果允许对主服务器进行SSL连接，则值为Yes</span><br><span class=\"line\"></span><br><span class=\"line\">如果不允许对主服务器进行SSL连接，则值为No</span><br><span class=\"line\"></span><br><span class=\"line\">如果允许SSL连接，但是从属服务器没有让SSL支持被启用，则值为Ignored。</span><br><span class=\"line\"></span><br><span class=\"line\">与SSL有关的字段的值对应于--master-ca,--master-capath,--master-cert,--master-cipher和--master-key选项的值。</span><br><span class=\"line\"></span><br><span class=\"line\">Seconds_Behind_Master</span><br><span class=\"line\"></span><br><span class=\"line\">本字段是从属服务器“落后”多少的一个指示。当从属SQL线程正在运行时（处理更新），本字段为在主服务器上由此线程执行的最近的一个事件的时间标记开始，已经过的秒数。当此线程被从属服务器I&#x2F;O线程赶上，并进入闲置状态，等待来自I&#x2F;O线程的更多的事件时，本字段为零。总之，本字段测量从属服务器SQL线程和从属服务器I&#x2F;O线程之间的时间差距，单位以秒计。</span><br><span class=\"line\"></span><br><span class=\"line\">如果主服务器和从属服务器之间的网络连接较快，则从属服务器I&#x2F;O线程会非常接近主服务器，所以本字段能够十分近似地指示，从属服务器SQL线程比主服务器落后多少。如果网络较慢，则这种指示不准确；从属SQL线程经常会赶上读取速度较慢地从属服务器I&#x2F;O线程，因此，Seconds_Behind_Master经常显示值为0。即使I&#x2F;O线程落后于主服务器时，也是如此。换句话说，本列只对速度快的网络有用。</span><br><span class=\"line\"></span><br><span class=\"line\">即使主服务器和从属服务器不具有相同的时钟，时间差计算也会起作用（当从属服务器I&#x2F;O线程启动时，计算时间差。并假定从此时以后，时间差保持不变）。如果从属SQL线程不运行，或者如果从属服务器I&#x2F;O线程不运行或未与主服务器连接，则Seconds_Behind_Master为NULL（意义为“未知”）。举例说明，如果在重新连接之前，从属服务器I&#x2F;O线程休眠了master-connect-retry秒，则显示NULL，因为从属服务器不知道主服务器正在做什么，也不能有把握地说落后多少。</span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["mysql"]},{"title":"mysql 配置详解","url":"/2021/09/22/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">port &#x3D; 3306</span><br><span class=\"line\">socket &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">port &#x3D; 3306</span><br><span class=\"line\">socket &#x3D; &#x2F;tmp&#x2F;mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">basedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class=\"line\">datadir &#x3D; &#x2F;data&#x2F;mysql</span><br><span class=\"line\">pid-file &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql.pid</span><br><span class=\"line\">user &#x3D; mysql</span><br><span class=\"line\">bind-address &#x3D; 0.0.0.0</span><br><span class=\"line\">server-id &#x3D; 1 #表示是本机的序号为1,一般来讲就是master的意思</span><br><span class=\"line\"></span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</span><br><span class=\"line\"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</span><br><span class=\"line\"></span><br><span class=\"line\">#skip-networking</span><br><span class=\"line\"></span><br><span class=\"line\">back_log &#x3D; 600</span><br><span class=\"line\"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</span><br><span class=\"line\"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</span><br><span class=\"line\"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</span><br><span class=\"line\"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</span><br><span class=\"line\"># 另外，这值（back_log）限于您的操作系统对到来的TCP&#x2F;IP连接的侦听队列的大小。</span><br><span class=\"line\"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</span><br><span class=\"line\"></span><br><span class=\"line\">max_connections &#x3D; 1000</span><br><span class=\"line\"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过&#39;conn%&#39;通配符查看当前状态的连接数量，以定夺该值的大小。</span><br><span class=\"line\"></span><br><span class=\"line\">max_connect_errors &#x3D; 6000</span><br><span class=\"line\"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</span><br><span class=\"line\"></span><br><span class=\"line\">open_files_limit &#x3D; 65535</span><br><span class=\"line\"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</span><br><span class=\"line\"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span><br><span class=\"line\"></span><br><span class=\"line\">table_open_cache &#x3D; 128</span><br><span class=\"line\"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</span><br><span class=\"line\"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</span><br><span class=\"line\"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><br><span class=\"line\"></span><br><span class=\"line\">max_allowed_packet &#x3D; 4M</span><br><span class=\"line\"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</span><br><span class=\"line\"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_cache_size &#x3D; 1M</span><br><span class=\"line\"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span><br><span class=\"line\"></span><br><span class=\"line\">max_heap_table_size &#x3D; 8M</span><br><span class=\"line\"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</span><br><span class=\"line\"></span><br><span class=\"line\">tmp_table_size &#x3D; 16M</span><br><span class=\"line\"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</span><br><span class=\"line\"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</span><br><span class=\"line\"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</span><br><span class=\"line\"></span><br><span class=\"line\">read_buffer_size &#x3D; 2M</span><br><span class=\"line\"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</span><br><span class=\"line\"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</span><br><span class=\"line\"></span><br><span class=\"line\">read_rnd_buffer_size &#x3D; 8M</span><br><span class=\"line\"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</span><br><span class=\"line\"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span><br><span class=\"line\"></span><br><span class=\"line\">sort_buffer_size &#x3D; 8M</span><br><span class=\"line\"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</span><br><span class=\"line\"># 如果不能，可以尝试增加sort_buffer_size变量的大小</span><br><span class=\"line\"></span><br><span class=\"line\">join_buffer_size &#x3D; 8M</span><br><span class=\"line\"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</span><br><span class=\"line\"></span><br><span class=\"line\">thread_cache_size &#x3D; 8</span><br><span class=\"line\"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</span><br><span class=\"line\"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</span><br><span class=\"line\"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</span><br><span class=\"line\"># 根据物理内存设置规则如下：</span><br><span class=\"line\"># 1G  —&gt; 8</span><br><span class=\"line\"># 2G  —&gt; 16</span><br><span class=\"line\"># 3G  —&gt; 32</span><br><span class=\"line\"># 大于3G  —&gt; 64</span><br><span class=\"line\"></span><br><span class=\"line\">query_cache_size &#x3D; 8M</span><br><span class=\"line\">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</span><br><span class=\"line\"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</span><br><span class=\"line\"># 通过检查状态值&#39;Qcache_%&#39;，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</span><br><span class=\"line\"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</span><br><span class=\"line\"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</span><br><span class=\"line\"></span><br><span class=\"line\">query_cache_limit &#x3D; 2M</span><br><span class=\"line\">#指定单个查询能够使用的缓冲区大小，默认1M</span><br><span class=\"line\"></span><br><span class=\"line\">key_buffer_size &#x3D; 4M</span><br><span class=\"line\">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</span><br><span class=\"line\"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</span><br><span class=\"line\"># 可以知道key_buffer_size设置是否合理。比例key_reads&#x2F;key_read_requests应该尽可能的低，</span><br><span class=\"line\"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE &#39;key_read%&#39;获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</span><br><span class=\"line\"></span><br><span class=\"line\">ft_min_word_len &#x3D; 4</span><br><span class=\"line\"># 分词词汇最小长度，默认4</span><br><span class=\"line\"></span><br><span class=\"line\">transaction_isolation &#x3D; REPEATABLE-READ</span><br><span class=\"line\"># MySQL支持4种事务隔离级别，他们分别是：</span><br><span class=\"line\"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span><br><span class=\"line\"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</span><br><span class=\"line\"></span><br><span class=\"line\">log_bin &#x3D; mysql-bin</span><br><span class=\"line\">binlog_format &#x3D; mixed</span><br><span class=\"line\">expire_logs_days &#x3D; 30 #超过30天的binlog删除</span><br><span class=\"line\"></span><br><span class=\"line\">log_error &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql-error.log #错误日志路径</span><br><span class=\"line\">slow_query_log &#x3D; 1</span><br><span class=\"line\">long_query_time &#x3D; 1 #慢查询时间 超过1秒则为慢查询</span><br><span class=\"line\">slow_query_log_file &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql-slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">performance_schema &#x3D; 0</span><br><span class=\"line\">explicit_defaults_for_timestamp</span><br><span class=\"line\"></span><br><span class=\"line\">#lower_case_table_names &#x3D; 1 #不区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">skip-external-locking #MySQL选项以避免外部锁定。该选项默认开启</span><br><span class=\"line\"></span><br><span class=\"line\">default-storage-engine &#x3D; InnoDB #默认存储引擎</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_file_per_table &#x3D; 1</span><br><span class=\"line\"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span><br><span class=\"line\"># 独立表空间优点：</span><br><span class=\"line\"># 1．每个表都有自已独立的表空间。</span><br><span class=\"line\"># 2．每个表的数据和索引都会存在自已的表空间中。</span><br><span class=\"line\"># 3．可以实现单表在不同的数据库中移动。</span><br><span class=\"line\"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</span><br><span class=\"line\"># 缺点：</span><br><span class=\"line\"># 单表增加过大，如超过100G</span><br><span class=\"line\"># 结论：</span><br><span class=\"line\"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_open_files &#x3D; 500</span><br><span class=\"line\"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_buffer_pool_size &#x3D; 64M</span><br><span class=\"line\"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</span><br><span class=\"line\"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I&#x2F;O越少.</span><br><span class=\"line\"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</span><br><span class=\"line\"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</span><br><span class=\"line\"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</span><br><span class=\"line\"># 所以不要设置的太高.</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_write_io_threads &#x3D; 4</span><br><span class=\"line\">innodb_read_io_threads &#x3D; 4</span><br><span class=\"line\"># innodb使用后台线程处理数据页上的读写 I&#x2F;O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span><br><span class=\"line\"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_thread_concurrency &#x3D; 0</span><br><span class=\"line\"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_purge_threads &#x3D; 1</span><br><span class=\"line\"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</span><br><span class=\"line\"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</span><br><span class=\"line\"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_flush_log_at_trx_commit &#x3D; 2</span><br><span class=\"line\"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</span><br><span class=\"line\"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</span><br><span class=\"line\"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</span><br><span class=\"line\"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</span><br><span class=\"line\"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</span><br><span class=\"line\"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</span><br><span class=\"line\"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</span><br><span class=\"line\"># 总结</span><br><span class=\"line\"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_buffer_size &#x3D; 2M</span><br><span class=\"line\"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_file_size &#x3D; 32M</span><br><span class=\"line\"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_log_files_in_group &#x3D; 3</span><br><span class=\"line\"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_max_dirty_pages_pct &#x3D; 90</span><br><span class=\"line\"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</span><br><span class=\"line\"></span><br><span class=\"line\">innodb_lock_wait_timeout &#x3D; 120</span><br><span class=\"line\"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span><br><span class=\"line\"></span><br><span class=\"line\">bulk_insert_buffer_size &#x3D; 8M</span><br><span class=\"line\"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</span><br><span class=\"line\"></span><br><span class=\"line\">myisam_sort_buffer_size &#x3D; 8M</span><br><span class=\"line\"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</span><br><span class=\"line\"></span><br><span class=\"line\">myisam_max_sort_file_size &#x3D; 10G</span><br><span class=\"line\"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</span><br><span class=\"line\"></span><br><span class=\"line\">myisam_repair_threads &#x3D; 1</span><br><span class=\"line\"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内)</span><br><span class=\"line\"></span><br><span class=\"line\">interactive_timeout &#x3D; 28800</span><br><span class=\"line\"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</span><br><span class=\"line\"></span><br><span class=\"line\">wait_timeout &#x3D; 28800</span><br><span class=\"line\"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</span><br><span class=\"line\"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</span><br><span class=\"line\"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</span><br><span class=\"line\"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</span><br><span class=\"line\"># 最终肯定会达到MySQL Server的连接上限数，这会报&#39;too many connections&#39;的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</span><br><span class=\"line\"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</span><br><span class=\"line\"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">max_allowed_packet &#x3D; 16M #服务器发送和接受的最大包长度</span><br><span class=\"line\"></span><br><span class=\"line\">[myisamchk]</span><br><span class=\"line\">key_buffer_size &#x3D; 8M</span><br><span class=\"line\">sort_buffer_size &#x3D; 8M</span><br><span class=\"line\">read_buffer &#x3D; 4M</span><br><span class=\"line\">write_buffer &#x3D; 4M</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["数据库"],"tags":["mysql"]},{"title":"k8s教程day1-k8s介绍及环境搭建和YAML语言介绍","url":"/2021/12/01/K8S/day1/k8s_day1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>k8s 课程规划<br><img src=\"https://user-images.githubusercontent.com/28568478/144197771-e2ed53bf-bb06-46a8-af7b-8ac948fc2cf1.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"第一章-kubernetes介绍\"><a href=\"#第一章-kubernetes介绍\" class=\"headerlink\" title=\"第一章 kubernetes介绍\"></a>第一章 kubernetes介绍</h1><p>本章节主要介绍应用程序在服务器上部署方式演变以及kubernetes的概念、组件和工作原理。</p>\n<h2 id=\"应用部署方式演变\"><a href=\"#应用部署方式演变\" class=\"headerlink\" title=\"应用部署方式演变\"></a>应用部署方式演变</h2><p>在部署应用程序的方式上，主要经历了三个时代：</p>\n<ul>\n<li><p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p>\n<blockquote>\n<p>优点：简单，不需要其它技术的参与</p>\n<p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p>\n</blockquote>\n</li>\n<li><p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p>\n<blockquote>\n<p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p>\n<p>缺点：增加了操作系统，浪费了部分资源</p>\n</blockquote>\n</li>\n<li><p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p>\n<blockquote>\n<p>优点：</p>\n<p>​    可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p>\n<p>​    运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p>\n<p>​    容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200505183738289.png\" alt=\"image-20200505183738289\"></p>\n<p>容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：</p>\n<ul>\n<li>一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器</li>\n<li>当并发访问量变大的时候，怎么样做到横向扩展容器数量</li>\n</ul>\n<p>这些容器管理的问题统称为<strong>容器编排</strong>问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：</p>\n<ul>\n<li><strong>Swarm</strong>：Docker自己的容器编排工具</li>\n<li><strong>Mesos</strong>：Apache的一个资源统一管控的工具，需要和Marathon结合使用</li>\n<li><strong>Kubernetes</strong>：Google开源的的容器编排工具</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200524150339551.png\" alt=\"image-20200524150339551\" style=\"border:1px solid;zoom:110%;\">\n\n\n<h2 id=\"kubernetes简介\"><a href=\"#kubernetes简介\" class=\"headerlink\" title=\"kubernetes简介\"></a>kubernetes简介</h2><img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200406232838722.png\" alt=\"image-20200406232838722\" style=\"zoom:100%;border:1px solid;\">\n\n<p>​    </p>\n<p>​    kubernetes，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p>\n<p>​    kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p>\n<ul>\n<li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li>\n<li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li>\n<li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li>\n<li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li>\n<li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li>\n<li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li>\n</ul>\n<p><img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200526203726071.png\" alt=\"image-20200526203726071\"></p>\n<h2 id=\"kubernetes组件\"><a href=\"#kubernetes组件\" class=\"headerlink\" title=\"kubernetes组件\"></a>kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p>\n<p><strong>master：集群的控制平面，负责集群的决策  (  管理  )</strong></p>\n<blockquote>\n<p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p>\n<p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p>\n<p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p>\n<p>**Etcd **：负责存储集群中各种资源对象的信息</p>\n</blockquote>\n<p>**node：集群的数据平面，负责为容器提供运行环境 ( 干活 ) **</p>\n<blockquote>\n<p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p>\n<p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p>\n<p><strong>Docker</strong> : 负责节点上容器的各种操作</p>\n</blockquote>\n<img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200406184656917.png\" alt=\"image-20200406184656917\" style=\"zoom:200%;\">\n\n<p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：</p>\n<ol>\n<li><p>首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中</p>\n</li>\n<li><p>一个nginx服务的安装请求会首先被发送到master节点的apiServer组件</p>\n</li>\n<li><p>apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p>\n<p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer</p>\n</li>\n<li><p>apiServer调用controller-manager去调度Node节点安装nginx服务</p>\n</li>\n<li><p>kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod</p>\n<p>pod是kubernetes的最小操作单元，容器必须跑在pod中至此，</p>\n</li>\n<li><p>一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理</p>\n</li>\n</ol>\n<p>​        这样，外界用户就可以访问集群中的nginx服务了</p>\n<h2 id=\"kubernetes概念\"><a href=\"#kubernetes概念\" class=\"headerlink\" title=\"kubernetes概念\"></a>kubernetes概念</h2><p><strong>Master</strong>：集群控制节点，每个集群需要至少一个master节点负责集群的管控</p>\n<p><strong>Node</strong>：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行</p>\n<p><strong>Pod</strong>：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器</p>\n<p><strong>Controller</strong>：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p>\n<p><strong>Service</strong>：pod对外服务的统一入口，下面可以维护者同一类的多个pod</p>\n<p><strong>Label</strong>：标签，用于对pod进行分类，同一类pod会拥有相同的标签</p>\n<p><strong>NameSpace</strong>：命名空间，用来隔离pod的运行环境</p>\n<img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200403224313355.png\" alt=\"image-20200403224313355\" style=\"zoom:200%;\">\n\n\n\n<h1 id=\"第二章-集群环境搭建\"><a href=\"#第二章-集群环境搭建\" class=\"headerlink\" title=\"第二章 集群环境搭建\"></a>第二章 集群环境搭建</h1><p>本章节主要介绍如何搭建kubernetes的集群环境</p>\n<h2 id=\"环境规划\"><a href=\"#环境规划\" class=\"headerlink\" title=\"环境规划\"></a>环境规划</h2><h3 id=\"集群类型\"><a href=\"#集群类型\" class=\"headerlink\" title=\"集群类型\"></a>集群类型</h3><p>kubernetes集群大体上分为两类：<strong>一主多从</strong>和<strong>多主多从</strong>。</p>\n<ul>\n<li>一主多从：一台Master节点和多台Node节点，搭建简单，但是有单机故障风险，适合用于测试环境</li>\n<li>多主多从：多台Master节点和多台Node节点，搭建麻烦，安全性高，适合用于生产环境</li>\n</ul>\n<p><img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200404094800622.png\" alt=\"image-20200404094800622\"></p>\n<blockquote>\n<p><code>说明：为了测试简单，本次搭建的是  一主两从   类型的集群</code></p>\n</blockquote>\n<h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3><p>kubernetes有多种部署方式，目前主流的方式有kubeadm、minikube、二进制包</p>\n<ul>\n<li>minikube：一个用于快速搭建单节点kubernetes的工具</li>\n<li>kubeadm：一个用于快速搭建kubernetes集群的工具</li>\n<li>二进制包 ：从官网下载每个组件的二进制包，依次去安装，此方式对于理解kubernetes组件更加有效</li>\n</ul>\n<blockquote>\n<p><code>说明：现在需要安装kubernetes的集群环境，但是又不想过于麻烦，所以选择使用kubeadm方式</code></p>\n</blockquote>\n<h3 id=\"主机规划\"><a href=\"#主机规划\" class=\"headerlink\" title=\"主机规划\"></a>主机规划</h3><table>\n<thead>\n<tr>\n<th>作用</th>\n<th>IP地址</th>\n<th>操作系统</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Master</td>\n<td>192.168.109.101</td>\n<td>Centos7.5    基础设施服务器</td>\n<td>2颗CPU  2G内存   50G硬盘</td>\n</tr>\n<tr>\n<td>Node1</td>\n<td>192.168.109.102</td>\n<td>Centos7.5    基础设施服务器</td>\n<td>2颗CPU  2G内存   50G硬盘</td>\n</tr>\n<tr>\n<td>Node2</td>\n<td>192.168.109.103</td>\n<td>Centos7.5    基础设施服务器</td>\n<td>2颗CPU  2G内存   50G硬盘</td>\n</tr>\n</tbody></table>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>​    本次环境搭建需要安装三台Centos服务器（一主二从），然后在每台服务器中分别安装docker（18.06.3），kubeadm（1.17.4）、kubelet（1.17.4）、kubectl（1.17.4）程序。</p>\n<h3 id=\"主机安装\"><a href=\"#主机安装\" class=\"headerlink\" title=\"主机安装\"></a>主机安装</h3><p>安装虚拟机过程中注意下面选项的设置：</p>\n<ul>\n<li><p>操作系统环境：CPU（2C）    内存（2G）   硬盘（50G）    </p>\n</li>\n<li><p>语言选择：中文简体</p>\n</li>\n<li><p>软件选择：基础设施服务器</p>\n</li>\n<li><p>分区选择：自动分区</p>\n</li>\n<li><p>网络配置：按照下面配置网路地址信息</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">网络地址：192.168.109.100  （每台主机都不一样  分别为100、101、102）</span><br><span class=\"line\">子网掩码：255.255.255.0</span><br><span class=\"line\">默认网关：192.168.109.2</span><br><span class=\"line\">DNS：    223.5.5.5</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200505213817934.png\" alt=\"image-20200505213817934\"></p>\n</li>\n<li><p>主机名设置：按照下面信息设置主机名</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">master节点： master</span><br><span class=\"line\">node节点：   node1</span><br><span class=\"line\">node节点：   node2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200505214156148.png\" alt=\"image-20200505214156148\"></p>\n</li>\n</ul>\n<h3 id=\"环境初始化\"><a href=\"#环境初始化\" class=\"headerlink\" title=\"环境初始化\"></a>环境初始化</h3><ol>\n<li>   检查操作系统的版本</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此方式下安装kubernetes集群要求Centos版本要在7.5或之上</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># cat /etc/redhat-release</span></span><br><span class=\"line\">CentOS Linux release <span class=\"number\">7.5</span>.<span class=\"number\">1804</span> (Core)</span><br></pre></td></tr></table></figure>\n\n<p>2） 主机名解析</p>\n<p>为了方便后面集群节点间的直接调用，在这配置一下主机名解析，企业中推荐使用内部DNS服务器</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主机名成解析 编辑三台服务器的/etc/hosts文件，添加下面内容</span></span><br><span class=\"line\"><span class=\"number\">192.168</span>.<span class=\"number\">109.100</span>  master</span><br><span class=\"line\"><span class=\"number\">192.168</span>.<span class=\"number\">109.101</span>  node1</span><br><span class=\"line\"><span class=\"number\">192.168</span>.<span class=\"number\">109.102</span>  node2</span><br></pre></td></tr></table></figure>\n<p>3） 时间同步</p>\n<p>kubernetes要求集群中的节点时间必须精确一致，这里直接使用chronyd服务从网络同步时间。</p>\n<p>企业中建议配置内部的时间同步服务器</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动chronyd服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl start chronyd</span></span><br><span class=\"line\"><span class=\"comment\"># 设置chronyd服务开机自启</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl enable chronyd</span></span><br><span class=\"line\"><span class=\"comment\"># chronyd服务启动稍等几秒钟，就可以使用date命令验证时间了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># date</span></span><br></pre></td></tr></table></figure>\n\n<p>4） 禁用iptables和firewalld服务</p>\n<p>kubernetes和docker在运行中会产生大量的iptables规则，为了不让系统规则跟它们混淆，直接关闭系统的规则</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 关闭firewalld服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl stop firewalld</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl disable firewalld</span></span><br><span class=\"line\"><span class=\"comment\"># 2 关闭iptables服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl stop iptables</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl disable iptables</span></span><br></pre></td></tr></table></figure>\n\n<p>5） 禁用selinux</p>\n<p> selinux是linux系统下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 /etc/selinux/config 文件，修改SELINUX的值为disabled</span></span><br><span class=\"line\"><span class=\"comment\"># 注意修改完毕之后需要重启linux服务</span></span><br><span class=\"line\">SELINUX=disabled</span><br></pre></td></tr></table></figure>\n\n<p>6） 禁用swap分区</p>\n<p>swap分区指的是虚拟内存分区，它的作用是在物理内存使用完之后，将磁盘空间虚拟成内存来使用</p>\n<p>启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备</p>\n<p>但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑分区配置文件/etc/fstab，注释掉swap分区一行</span></span><br><span class=\"line\"><span class=\"comment\"># 注意修改完毕之后需要重启linux服务</span></span><br><span class=\"line\"> UUID=<span class=\"number\">455</span>cc753<span class=\"literal\">-7a60</span><span class=\"literal\">-4c17</span><span class=\"literal\">-a424</span><span class=\"literal\">-7741728c44a1</span> /boot    xfs     defaults        <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"> /dev/mapper/centos<span class=\"literal\">-home</span> /home                      xfs     defaults        <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># /dev/mapper/centos-swap swap                      swap    defaults        0 0</span></span><br></pre></td></tr></table></figure>\n\n<p>7）修改linux的内核参数</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改linux的内核参数，添加网桥过滤和地址转发功能</span></span><br><span class=\"line\"><span class=\"comment\"># 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置:</span></span><br><span class=\"line\">net.bridge.bridge<span class=\"literal\">-nf</span><span class=\"literal\">-call</span><span class=\"literal\">-ip6tables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net.bridge.bridge<span class=\"literal\">-nf</span><span class=\"literal\">-call</span><span class=\"literal\">-iptables</span> = <span class=\"number\">1</span></span><br><span class=\"line\">net.ipv4.ip_forward = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># sysctl -p</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载网桥过滤模块</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># modprobe br_netfilter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网桥过滤模块是否加载成功</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># lsmod | grep br_netfilter</span></span><br></pre></td></tr></table></figure>\n\n<p>8）配置ipvs功能</p>\n<p>在kubernetes中service有两种代理模型，一种是基于iptables的，一种是基于ipvs的</p>\n<p>两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 安装ipset和ipvsadm</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum install ipset ipvsadmin -y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 添加需要加载的模块写入脚本文件</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># cat &lt;&lt;EOF &gt;  /etc/sysconfig/modules/ipvs.modules</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">modprobe -- ip_vs</span><br><span class=\"line\">modprobe -- ip_vs_rr</span><br><span class=\"line\">modprobe -- ip_vs_wrr</span><br><span class=\"line\">modprobe -- ip_vs_sh</span><br><span class=\"line\">modprobe -- nf_conntrack_ipv4</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 为脚本文件添加执行权限</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># chmod +x /etc/sysconfig/modules/ipvs.modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 执行脚本文件</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># /bin/bash /etc/sysconfig/modules/ipvs.modules</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 查看对应的模块是否加载成功</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span></span><br></pre></td></tr></table></figure>\n\n<p>9） 重启服务器</p>\n<p>上面步骤完成之后，需要重新启动linux系统</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># reboot</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 切换镜像源</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 查看当前镜像源中支持的docker版本</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum list docker-ce --showduplicates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 安装特定版本的docker-ce</span></span><br><span class=\"line\"><span class=\"comment\"># 必须指定--setopt=obsoletes=0，否则yum会自动安装更高版本</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum install --setopt=obsoletes=0 docker-ce-18.06.3.ce-3.el7 -y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 添加一个配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># Docker在默认情况下使用的Cgroup Driver为cgroupfs，而kubernetes推荐使用systemd来代替cgroupfs</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># mkdir /etc/docker</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># cat &lt;&lt;EOF &gt;  /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;exec-opts&quot;</span>: [<span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://kn0t2bca.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 启动docker</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl restart docker</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl enable docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6 检查docker状态和版本</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># docker version</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装kubernetes组件\"><a href=\"#安装kubernetes组件\" class=\"headerlink\" title=\"安装kubernetes组件\"></a>安装kubernetes组件</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由于kubernetes的镜像源在国外，速度比较慢，这里切换成国内的镜像源</span></span><br><span class=\"line\"><span class=\"comment\"># 编辑/etc/yum.repos.d/kubernetes.repo，添加下面的配置 </span></span><br><span class=\"line\">[<span class=\"type\">kubernetes</span>]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes<span class=\"literal\">-el7</span><span class=\"literal\">-x86_64</span></span><br><span class=\"line\">enabled=<span class=\"number\">1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">0</span></span><br><span class=\"line\">repo_gpgcheck=<span class=\"number\">0</span></span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum<span class=\"literal\">-key</span>.gpg</span><br><span class=\"line\">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm<span class=\"literal\">-package</span><span class=\"literal\">-key</span>.gpg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装kubeadm、kubelet和kubectl</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置kubelet的cgroup</span></span><br><span class=\"line\"><span class=\"comment\"># 编辑/etc/sysconfig/kubelet，添加下面的配置</span></span><br><span class=\"line\">KUBELET_CGROUP_ARGS=<span class=\"string\">&quot;--cgroup-driver=systemd&quot;</span></span><br><span class=\"line\">KUBE_PROXY_MODE=<span class=\"string\">&quot;ipvs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 设置kubelet开机自启</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl enable kubelet</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备集群镜像\"><a href=\"#准备集群镜像\" class=\"headerlink\" title=\"准备集群镜像\"></a>准备集群镜像</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubeadm config images list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 此镜像在kubernetes的仓库中,由于网络原因,无法连接，下面提供了一种替代方案</span></span><br><span class=\"line\">images=(</span><br><span class=\"line\">    kube<span class=\"literal\">-apiserver</span>:v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">    kube<span class=\"literal\">-controller</span><span class=\"literal\">-manager</span>:v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">    kube<span class=\"literal\">-scheduler</span>:v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">    kube<span class=\"literal\">-proxy</span>:v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">    pause:<span class=\"number\">3.1</span></span><br><span class=\"line\">    etcd:<span class=\"number\">3.4</span>.<span class=\"number\">3</span><span class=\"literal\">-0</span></span><br><span class=\"line\">    coredns:<span class=\"number\">1.6</span>.<span class=\"number\">5</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$</span>&#123;images[<span class=\"selector-tag\">@</span>]&#125; ; <span class=\"keyword\">do</span></span><br><span class=\"line\">\tdocker pull registry.cn<span class=\"literal\">-hangzhou</span>.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">\tdocker tag registry.cn<span class=\"literal\">-hangzhou</span>.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span> \t\tk8s.gcr.io/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">\tdocker rmi registry.cn<span class=\"literal\">-hangzhou</span>.aliyuncs.com/google_containers/<span class=\"variable\">$imageName</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集群初始化\"><a href=\"#集群初始化\" class=\"headerlink\" title=\"集群初始化\"></a>集群初始化</h3><p>下面开始对集群进行初始化，并将node节点加入到集群中</p>\n<blockquote>\n<p>下面的操作只需要在<code>master</code>节点上执行即可</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建集群</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubeadm init \\</span></span><br><span class=\"line\">\t-<span class=\"literal\">-kubernetes</span><span class=\"literal\">-version</span>=v1.<span class=\"number\">17.4</span> \\</span><br><span class=\"line\">    -<span class=\"literal\">-pod</span><span class=\"literal\">-network</span><span class=\"literal\">-cidr</span>=<span class=\"number\">10.244</span>.<span class=\"number\">0.0</span>/<span class=\"number\">16</span> \\</span><br><span class=\"line\">    -<span class=\"literal\">-service</span><span class=\"literal\">-cidr</span>=<span class=\"number\">10.96</span>.<span class=\"number\">0.0</span>/<span class=\"number\">12</span> \\</span><br><span class=\"line\">    -<span class=\"literal\">-apiserver</span><span class=\"literal\">-advertise</span><span class=\"literal\">-address</span>=<span class=\"number\">192.168</span>.<span class=\"number\">109.100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建必要文件</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># mkdir -p $HOME/.kube</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>下面的操作只需要在<code>node</code>节点上执行即可</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将node节点加入集群</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubeadm join 192.168.109.100:6443 \\ </span></span><br><span class=\"line\">\t-<span class=\"literal\">-token</span> <span class=\"number\">8507</span>uc.o0knircuri8etnw2 \\</span><br><span class=\"line\">\t-<span class=\"literal\">-discovery</span><span class=\"literal\">-token</span><span class=\"literal\">-ca</span><span class=\"literal\">-cert</span><span class=\"literal\">-hash</span> \\</span><br><span class=\"line\">\tsha256:acc37967fb5b0acf39d7598f8a439cc7dc88f439a3f4d0c9cae88e7901b9d3f</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 查看集群状态 此时的集群状态为NotReady，这是因为还没有配置网络插件</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME     STATUS     ROLES    AGE     VERSION</span><br><span class=\"line\">master   NotReady   master   <span class=\"number\">6</span>m43s   v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">node1    NotReady   &lt;none&gt;   <span class=\"number\">22</span>s     v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">node2    NotReady   &lt;none&gt;   <span class=\"number\">19</span>s     v1.<span class=\"number\">17.4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装网络插件\"><a href=\"#安装网络插件\" class=\"headerlink\" title=\"安装网络插件\"></a>安装网络插件</h3><p>kubernetes支持多种网络插件，比如flannel、calico、canal等等，任选一种使用即可，本次选择flannel</p>\n<blockquote>\n<p>下面操作依旧只在<code>master</code>节点执行即可，插件使用的是DaemonSet的控制器，它会在每个节点上都运行</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取fannel的配置文件</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改文件中quay.io仓库为quay-mirror.qiniu.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用配置文件启动fannel</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl apply -f kube-flannel.yml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 稍等片刻，再次查看集群节点的状态</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get nodes</span></span><br><span class=\"line\">NAME     STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">master   Ready    master   <span class=\"number\">15</span>m     v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">node1    Ready    &lt;none&gt;   <span class=\"number\">8</span>m53s   v1.<span class=\"number\">17.4</span></span><br><span class=\"line\">node2    Ready    &lt;none&gt;   <span class=\"number\">8</span>m50s   v1.<span class=\"number\">17.4</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，kubernetes的集群环境搭建完成</p>\n<h2 id=\"服务部署\"><a href=\"#服务部署\" class=\"headerlink\" title=\"服务部署\"></a>服务部署</h2><p>接下来在kubernetes集群中部署一个nginx程序，测试下集群是否在正常工作。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署nginx</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create deployment nginx --image=nginx:1.14-alpine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露端口</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl expose deployment nginx --port=80 --type=NodePort</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods,service</span></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/nginx<span class=\"literal\">-86c57db685</span><span class=\"literal\">-fdc2k</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">18</span>m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                 <span class=\"built_in\">TYPE</span>        CLUSTER<span class=\"literal\">-IP</span>      EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)        AGE</span><br><span class=\"line\">service/kubernetes   ClusterIP   <span class=\"number\">10.96</span>.<span class=\"number\">0.1</span>       &lt;none&gt;        <span class=\"number\">443</span>/TCP        <span class=\"number\">82</span>m</span><br><span class=\"line\">service/nginx        NodePort    <span class=\"number\">10.104</span>.<span class=\"number\">121.45</span>   &lt;none&gt;        <span class=\"number\">80</span>:<span class=\"number\">30073</span>/TCP   <span class=\"number\">17</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4 最后在电脑上访问下部署的nginx服务</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200405142656921.png\" alt=\"image-20200405142656921\" style=\"zoom:80%; border:1px solid\">\n\n\n\n<h1 id=\"第三章-资源管理\"><a href=\"#第三章-资源管理\" class=\"headerlink\" title=\"第三章 资源管理\"></a>第三章 资源管理</h1><p>本章节主要介绍yaml语法和kubernetes的资源管理方式</p>\n<h2 id=\"资源管理介绍\"><a href=\"#资源管理介绍\" class=\"headerlink\" title=\"资源管理介绍\"></a>资源管理介绍</h2><p>在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。</p>\n<blockquote>\n<p>​    kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</p>\n<p>​    kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</p>\n<p>​    Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</p>\n<p>​    当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</p>\n</blockquote>\n<img src=\"/2021/12/01/K8S/day1/k8s_day1/image-20200406225334627.png\" alt=\"image-20200406225334627\" style=\"zoom:200%;\">\n\n<blockquote>\n<p> 学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p>\n</blockquote>\n<h2 id=\"YAML语言介绍\"><a href=\"#YAML语言介绍\" class=\"headerlink\" title=\"YAML语言介绍\"></a>YAML语言介绍</h2><p>​    YAML是一个类似 XML、JSON 的标记性语言。它强调以<strong>数据</strong>为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称”一种人性化的数据格式语言”。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">heima</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span>Beijing<span class=\"tag\">&lt;/<span class=\"name\">address</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">heima</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">heima:</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">15</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span> <span class=\"string\">Beijing</span></span><br></pre></td></tr></table></figure>\n\n<p>YAML的语法比较简单，主要有下面几个：</p>\n<ul>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用tab，只允许空格( 低版本限制 )</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li>‘#’表示注释</li>\n</ul>\n<p>YAML支持以下几种数据类型：</p>\n<ul>\n<li>纯量：单个的、不可再分的值</li>\n<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary）</li>\n<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期</span></span><br><span class=\"line\"><span class=\"comment\"># 1 布尔类型</span></span><br><span class=\"line\"><span class=\"attr\">c1:</span> <span class=\"literal\">true</span> <span class=\"string\">(或者True)</span></span><br><span class=\"line\"><span class=\"comment\"># 2 整型</span></span><br><span class=\"line\"><span class=\"attr\">c2:</span> <span class=\"number\">234</span></span><br><span class=\"line\"><span class=\"comment\"># 3 浮点型</span></span><br><span class=\"line\"><span class=\"attr\">c3:</span> <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\"># 4 null类型 </span></span><br><span class=\"line\"><span class=\"attr\">c4:</span> <span class=\"string\">~</span>  <span class=\"comment\"># 使用~表示null</span></span><br><span class=\"line\"><span class=\"comment\"># 5 日期类型</span></span><br><span class=\"line\"><span class=\"attr\">c5:</span> <span class=\"number\">2018-02-17</span>    <span class=\"comment\"># 日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class=\"line\"><span class=\"comment\"># 6 时间类型</span></span><br><span class=\"line\"><span class=\"attr\">c6:</span> <span class=\"number\">2018-02-17T15:02:31+08:00</span>  <span class=\"comment\"># 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br><span class=\"line\"><span class=\"comment\"># 7 字符串类型</span></span><br><span class=\"line\"><span class=\"attr\">c7:</span> <span class=\"string\">heima</span>     <span class=\"comment\"># 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 </span></span><br><span class=\"line\"><span class=\"attr\">c8:</span> <span class=\"string\">line1</span></span><br><span class=\"line\">    <span class=\"string\">line2</span>     <span class=\"comment\"># 字符串过多的情况可以拆成多行，每一行会被转化成一个空格</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"comment\"># 形式一(推荐):</span></span><br><span class=\"line\"><span class=\"attr\">heima:</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">15</span></span><br><span class=\"line\">  <span class=\"attr\">address:</span> <span class=\"string\">Beijing</span></span><br><span class=\"line\"><span class=\"comment\"># 形式二(了解):</span></span><br><span class=\"line\"><span class=\"attr\">heima:</span> &#123;<span class=\"attr\">age:</span> <span class=\"number\">15</span>,<span class=\"attr\">address:</span> <span class=\"string\">Beijing</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组</span></span><br><span class=\"line\"><span class=\"comment\"># 形式一(推荐):</span></span><br><span class=\"line\"><span class=\"attr\">address:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">顺义</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">昌平</span>\t</span><br><span class=\"line\"><span class=\"comment\"># 形式二(了解):</span></span><br><span class=\"line\"><span class=\"attr\">address:</span> [<span class=\"string\">顺义</span>,<span class=\"string\">昌平</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小提示：</p>\n<p>​    1  书写yaml切记<code>:</code> 后面要加一个空格</p>\n<p>​    2  如果需要将多段yaml配置放在一个文件中，中间要使用<code>---</code>分隔</p>\n<p>​    3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确</p>\n<p>​       <a href=\"https://www.json2yaml.com/convert-yaml-to-json\">https://www.json2yaml.com/convert-yaml-to-json</a></p>\n</blockquote>\n<h2 id=\"资源管理方式\"><a href=\"#资源管理方式\" class=\"headerlink\" title=\"资源管理方式\"></a>资源管理方式</h2><ul>\n<li><p>命令式对象管理：直接使用命令去操作kubernetes资源</p>\n<p><code>kubectl run nginx-pod --image=nginx:1.17.1 --port=80</code></p>\n</li>\n<li><p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p>\n<p><code>kubectl create/patch -f nginx-pod.yaml</code></p>\n</li>\n<li><p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源</p>\n<p><code>kubectl apply -f nginx-pod.yaml</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>操作对象</th>\n<th>适用环境</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命令式对象管理</td>\n<td>对象</td>\n<td>测试</td>\n<td>简单</td>\n<td>只能操作活动对象，无法审计、跟踪</td>\n</tr>\n<tr>\n<td>命令式对象配置</td>\n<td>文件</td>\n<td>开发</td>\n<td>可以审计、跟踪</td>\n<td>项目大时，配置文件多，操作麻烦</td>\n</tr>\n<tr>\n<td>声明式对象配置</td>\n<td>目录</td>\n<td>开发</td>\n<td>支持目录操作</td>\n<td>意外情况下难以调试</td>\n</tr>\n</tbody></table>\n<h3 id=\"命令式对象管理\"><a href=\"#命令式对象管理\" class=\"headerlink\" title=\"命令式对象管理\"></a>命令式对象管理</h3><p><strong>kubectl命令</strong></p>\n<p>​    kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl [command] [type] [name] [flags]</span><br></pre></td></tr></table></figure>\n\n<p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete</p>\n<p><strong>type</strong>：指定资源类型，比如deployment、pod、service</p>\n<p><strong>name</strong>：指定资源的名称，名称大小写敏感</p>\n<p><strong>flags</strong>：指定额外的可选参数</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有pod</span></span><br><span class=\"line\">kubectl get pod </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个pod</span></span><br><span class=\"line\">kubectl get pod pod_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个pod,以yaml格式展示结果</span></span><br><span class=\"line\">kubectl get pod pod_name <span class=\"literal\">-o</span> yaml</span><br></pre></td></tr></table></figure>\n\n<p><strong>资源类型</strong></p>\n<p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl api<span class=\"literal\">-resources</span></span><br></pre></td></tr></table></figure>\n\n<p>经常使用的资源有下面这些：</p>\n<table>\n    <tr>\n        <th>资源分类</th>\n        <th>资源名称</th>\n        <th>缩写</th>\n        <th>资源作用</th>\n    </tr>\n    <tr>\n        <td rowspan=\"2\">集群级别资源</td>\n        <td>nodes</td>\n        <td>no</td>\n        <td>集群组成部分</td>\n    </tr>\n    <tr>\n        <td>namespaces</td>\n        <td>ns</td>\n        <td>隔离Pod</td>\n    </tr>\n    <tr>\n        <td>pod资源</td>\n        <td>pods</td>\n        <td>po</td>\n        <td>装载容器</td>\n    </tr>\n    <tr>\n        <td rowspan=\"8\">pod资源控制器</td>\n        <td>replicationcontrollers</td>\n        <td>rc</td>\n        <td>控制pod资源</td>\n    </tr>\n    <tr>\n        <td>replicasets</td>\n        <td>rs</td>\n        <td>控制pod资源</td>\n    </tr>\n    <tr>\n        <td>deployments</td>\n        <td>deploy</td>\n        <td>控制pod资源</td>\n    </tr>\n    <tr>\n        <td>daemonsets</td>\n        <td>ds</td>\n        <td>控制pod资源</td>\n    </tr>\n    <tr>\n        <td>jobs</td>\n        <td></td>\n        <td>控制pod资源</td>\n    </tr>    \n    <tr>\n        <td>cronjobs</td>\n        <td>cj</td>\n        <td>控制pod资源</td>\n    </tr>    \n    <tr>\n        <td>horizontalpodautoscalers</td>\n        <td>hpa</td>\n        <td>控制pod资源</td>\n    </tr>    \n    <tr>\n        <td>statefulsets</td>\n        <td>sts</td>\n        <td>控制pod资源</td>\n    </tr>\n    <tr>\n        <td rowspan=\"2\">服务发现资源</td>\n        <td>services</td>\n        <td>svc</td>\n        <td>统一pod对外接口</td>\n    </tr>\n    <tr>\n        <td>ingress</td>\n        <td>ing</td>\n        <td>统一pod对外接口</td>\n    </tr>\n    <tr>\n        <td rowspan=\"3\">存储资源</td>\n        <td>volumeattachments</td>\n        <td></td>\n        <td>存储</td>\n    </tr>\n    <tr>\n        <td>persistentvolumes</td>\n        <td>pv</td>\n        <td>存储</td>\n    </tr>\n    <tr>\n        <td>persistentvolumeclaims</td>\n        <td>pvc</td>\n        <td>存储</td>\n    </tr>\n    <tr>\n        <td rowspan=\"2\">配置资源</td>\n        <td>configmaps</td>\n        <td>cm</td>\n        <td>配置</td>\n    </tr>\n    <tr>\n        <td>secrets</td>\n        <td></td>\n        <td>配置</td>\n    </tr>\n</table>\n\n<p><strong>操作</strong></p>\n<p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -<span class=\"literal\">-help</span></span><br></pre></td></tr></table></figure>\n\n<p>经常使用的操作有下面这些：</p>\n<table>\n    <tr>\n        <th>命令分类</th>\n        <th>命令</th>\n        <th>翻译</th>\n        <th>命令作用</th>\n    </tr>\n    <tr>\n        <td rowspan=\"6\">基本命令</td>\n        <td>create</td>\n        <td>创建</td>\n        <td>创建一个资源</td>\n    </tr>\n    <tr>\n        <td>edit</td>\n        <td>编辑</td>\n        <td>编辑一个资源</td>\n    </tr>\n    <tr>\n        <td>get</td>\n        <td>获取</td>\n        <td>获取一个资源</td>\n    </tr>\n   <tr>\n        <td>patch</td>\n        <td>更新</td>\n        <td>更新一个资源</td>\n    </tr>\n    <tr>\n        <td>delete</td>\n        <td>删除</td>\n        <td>删除一个资源</td>\n    </tr>\n    <tr>\n        <td>explain</td>\n        <td>解释</td>\n        <td>展示资源文档</td>\n    </tr>\n    <tr>\n        <td rowspan=\"10\">运行和调试</td>\n        <td>run</td>\n        <td>运行</td>\n        <td>在集群中运行一个指定的镜像</td>\n    </tr>\n    <tr>\n        <td>expose</td>\n        <td>暴露</td>\n        <td>暴露资源为Service</td>\n    </tr>\n    <tr>\n        <td>describe</td>\n        <td>描述</td>\n        <td>显示资源内部信息</td>\n    </tr>\n    <tr>\n        <td>logs</td>\n        <td>日志</td>\n        <td>输出容器在 pod 中的日志</td>\n    </tr>    \n    <tr>\n        <td>attach</td>\n        <td>缠绕</td>\n        <td>进入运行中的容器</td>\n    </tr>    \n    <tr>\n        <td>exec</td>\n        <td>执行</td>\n        <td>执行容器中的一个命令</td>\n    </tr>    \n    <tr>\n        <td>cp</td>\n        <td>复制</td>\n        <td>在Pod内外复制文件</td>\n    </tr>\n        <tr>\n        <td>rollout</td>\n        <td>首次展示</td>\n        <td>管理资源的发布</td>\n    </tr>\n    <tr>\n        <td>scale</td>\n        <td>规模</td>\n        <td>扩(缩)容Pod的数量</td>\n    </tr>\n    <tr>\n        <td>autoscale</td>\n        <td>自动调整</td>\n        <td>自动调整Pod的数量</td>\n    </tr>\n    <tr>\n        <td rowspan=\"2\">高级命令</td>\n        <td>apply</td>\n        <td>rc</td>\n        <td>通过文件对资源进行配置</td>\n    </tr>\n    <tr>\n        <td>label</td>\n        <td>标签</td>\n        <td>更新资源上的标签</td>\n    </tr>\n    <tr>\n        <td rowspan=\"2\">其他命令</td>\n        <td>cluster-info</td>\n        <td>集群信息</td>\n        <td>显示集群信息</td>\n    </tr>\n    <tr>\n        <td>version</td>\n        <td>版本</td>\n        <td>显示当前Server和Client的版本</td>\n    </tr>\n</table>\n\n<p>下面以一个namespace / pod的创建和删除简单演示下命令的使用：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create namespace dev</span></span><br><span class=\"line\">namespace/dev created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get ns</span></span><br><span class=\"line\">NAME              STATUS   AGE</span><br><span class=\"line\">default           Active   <span class=\"number\">21</span><span class=\"built_in\">h</span></span><br><span class=\"line\">dev               Active   <span class=\"number\">21</span>s</span><br><span class=\"line\">kube<span class=\"literal\">-node</span><span class=\"literal\">-lease</span>   Active   <span class=\"number\">21</span><span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-public</span>       Active   <span class=\"number\">21</span><span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>       Active   <span class=\"number\">21</span><span class=\"built_in\">h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在此namespace下创建并运行一个nginx的Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl run pod --image=nginx -n dev</span></span><br><span class=\"line\">kubectl run -<span class=\"literal\">-generator</span>=deployment/apps.v1 is DEPRECATED and will be removed <span class=\"keyword\">in</span> a future version. Use kubectl run -<span class=\"literal\">-generator</span>=run<span class=\"literal\">-pod</span>/v1 or kubectl create instead.</span><br><span class=\"line\">deployment.apps/pod created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看新创建的pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod -n dev</span></span><br><span class=\"line\">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-864f9875b9</span><span class=\"literal\">-pcw7x</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">21</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除指定的pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete pod pod-864f9875b9-pcw7x</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;pod-864f9875b9-pcw7x&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除指定的namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete ns dev</span></span><br><span class=\"line\">namespace <span class=\"string\">&quot;dev&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令式对象配置\"><a href=\"#命令式对象配置\" class=\"headerlink\" title=\"命令式对象配置\"></a>命令式对象配置</h3><p>命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。</p>\n<p>1） 创建一个nginxpod.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginxpod</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-containers</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br></pre></td></tr></table></figure>\n\n<p>2）执行create命令，创建资源：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f nginxpod.yaml</span></span><br><span class=\"line\">namespace/dev created</span><br><span class=\"line\">pod/nginxpod created</span><br></pre></td></tr></table></figure>\n\n<p>此时发现创建了两个资源对象，分别是namespace和pod</p>\n<p>3）执行get命令，查看资源：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl get -f nginxpod.yaml</span></span><br><span class=\"line\">NAME            STATUS   AGE</span><br><span class=\"line\">namespace/dev   Active   <span class=\"number\">18</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/nginxpod    <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">17</span>s</span><br></pre></td></tr></table></figure>\n\n<p>这样就显示了两个资源对象的信息</p>\n<p>4）执行delete命令，删除资源：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f nginxpod.yaml</span></span><br><span class=\"line\">namespace <span class=\"string\">&quot;dev&quot;</span> deleted</span><br><span class=\"line\">pod <span class=\"string\">&quot;nginxpod&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<p>此时发现两个资源对象被删除了</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">总结:</span><br><span class=\"line\"><span class=\"code\">\t命令式对象配置的方式操作资源，可以简单的认为：命令  +  yaml配置文件（里面是命令需要的各种参数）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明式对象配置\"><a href=\"#声明式对象配置\" class=\"headerlink\" title=\"声明式对象配置\"></a>声明式对象配置</h3><p>声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先执行一次kubectl apply -f yaml文件，发现创建了资源</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl apply -f nginxpod.yaml</span></span><br><span class=\"line\">namespace/dev created</span><br><span class=\"line\">pod/nginxpod created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl apply -f nginxpod.yaml</span></span><br><span class=\"line\">namespace/dev unchanged</span><br><span class=\"line\">pod/nginxpod unchanged</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">总结:</span><br><span class=\"line\"><span class=\"code\">    其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态）</span></span><br><span class=\"line\"><span class=\"code\">\t使用apply操作资源：</span></span><br><span class=\"line\"><span class=\"code\">        如果资源不存在，就创建，相当于 kubectl create</span></span><br><span class=\"line\"><span class=\"code\">\t\t如果资源已存在，就更新，相当于 kubectl patch</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>扩展：kubectl可以在node节点上运行吗 ?</p>\n</blockquote>\n<p>​    kubectl的运行是需要进行配置的，它的配置文件是$HOME/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp  <span class=\"literal\">-r</span>  HOME/.kube   node1: HOME/</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用推荐:  三种方式应该怎么用 ?</p>\n</blockquote>\n<p> 创建/更新资源      使用声明式对象配置 kubectl apply -f  XXX.yaml</p>\n<p> 删除资源              使用命令式对象配置 kubectl delete -f  XXX.yaml</p>\n<p> 查询资源              使用命令式对象管理 kubectl get(describe) 资源名称</p>\n","categories":["k8s"],"tags":["k8s 教程"]},{"title":"k8s教程day2-namespace、pod、label、development、service","url":"/2021/12/01/K8S/day2/k8s_day2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>k8s 课程规划<br><img src=\"https://user-images.githubusercontent.com/28568478/144197771-e2ed53bf-bb06-46a8-af7b-8ac948fc2cf1.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"第四章-实战入门\"><a href=\"#第四章-实战入门\" class=\"headerlink\" title=\"第四章 实战入门\"></a>第四章 实战入门</h1><p>本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。</p>\n<h2 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h2><p>​    Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现<strong>多套环境的资源隔离</strong>或者<strong>多租户的资源隔离</strong>。</p>\n<p>​    默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的”组”，以方便不同的组的资源进行隔离使用和管理。</p>\n<p>​    可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。</p>\n<img src=\"/2021/12/01/K8S/day2/k8s_day2/image-20200407100850484.png\" alt=\"image-20200407100850484\" style=\"zoom:80%;border:1px solid\">\n\n<p>kubernetes在集群启动之后，会默认创建几个namespace</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl  get namespace</span></span><br><span class=\"line\">NAME              STATUS   AGE</span><br><span class=\"line\">default           Active   <span class=\"number\">45</span><span class=\"built_in\">h</span>     <span class=\"comment\">#  所有未指定Namespace的对象都会被分配在default命名空间</span></span><br><span class=\"line\">kube<span class=\"literal\">-node</span><span class=\"literal\">-lease</span>   Active   <span class=\"number\">45</span><span class=\"built_in\">h</span>     <span class=\"comment\">#  集群节点之间的心跳维护，v1.13开始引入</span></span><br><span class=\"line\">kube<span class=\"literal\">-public</span>       Active   <span class=\"number\">45</span><span class=\"built_in\">h</span>     <span class=\"comment\">#  此命名空间下的资源可以被所有人访问（包括未认证用户）</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>       Active   <span class=\"number\">45</span><span class=\"built_in\">h</span>     <span class=\"comment\">#  所有由Kubernetes系统创建的资源都处于这个命名空间</span></span><br></pre></td></tr></table></figure>\n\n<p>下面来看namespace资源的具体操作：</p>\n<p><strong>查看</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 查看所有的ns  命令：kubectl get ns</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get ns</span></span><br><span class=\"line\">NAME              STATUS   AGE</span><br><span class=\"line\">default           Active   <span class=\"number\">45</span><span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-node</span><span class=\"literal\">-lease</span>   Active   <span class=\"number\">45</span><span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-public</span>       Active   <span class=\"number\">45</span><span class=\"built_in\">h</span>     </span><br><span class=\"line\">kube<span class=\"literal\">-system</span>       Active   <span class=\"number\">45</span><span class=\"built_in\">h</span>     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 查看指定的ns   命令：kubectl get ns ns名称</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get ns default</span></span><br><span class=\"line\">NAME      STATUS   AGE</span><br><span class=\"line\">default   Active   <span class=\"number\">45</span><span class=\"built_in\">h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3 指定输出格式  命令：kubectl get ns ns名称  -o 格式参数</span></span><br><span class=\"line\"><span class=\"comment\"># kubernetes支持的格式有很多，比较常见的是wide、json、yaml</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get ns default -o yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Namespace</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  creationTimestamp: <span class=\"string\">&quot;2020-04-05T04:44:16Z&quot;</span></span><br><span class=\"line\">  name: default</span><br><span class=\"line\">  resourceVersion: <span class=\"string\">&quot;151&quot;</span></span><br><span class=\"line\">  selfLink: /api/v1/namespaces/default</span><br><span class=\"line\">  uid: <span class=\"number\">7405</span>f73a<span class=\"literal\">-e486</span><span class=\"literal\">-43d4</span><span class=\"literal\">-9db6</span><span class=\"literal\">-145f1409f090</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  finalizers:</span><br><span class=\"line\">  - kubernetes</span><br><span class=\"line\">status:</span><br><span class=\"line\">  phase: Active</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 4 查看ns详情  命令：kubectl describe ns ns名称</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe ns default</span></span><br><span class=\"line\">Name:         default</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\">Status:       Active  <span class=\"comment\"># Active 命名空间正在使用中  Terminating 正在删除命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ResourceQuota 针对namespace做的资源限制</span></span><br><span class=\"line\"><span class=\"comment\"># LimitRange针对namespace中的每个组件做的资源限制</span></span><br><span class=\"line\">No resource quota.</span><br><span class=\"line\">No LimitRange resource.</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create ns dev</span></span><br><span class=\"line\">namespace/dev created</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete ns dev</span></span><br><span class=\"line\">namespace <span class=\"string\">&quot;dev&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置方式</strong></p>\n<p>首先准备一个yaml文件：ns-dev.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行对应的创建和删除命令了：</p>\n<p>​    创建：kubectl  create  -f  ns-dev.yaml</p>\n<p>​    删除：kubectl  delete  -f  ns-dev.yaml</p>\n<h2 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h2><p>Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。</p>\n<p>Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。</p>\n<img src=\"/2021/12/01/K8S/day2/k8s_day2/image-20200407121501907.png\" alt=\"image-20200407121501907\" style=\"zoom:80%;\">\n\n<p>kubernetes在集群启动之后，集群中的各个组件也都是以Pod方式运行的。可以通过下面命令查看：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod -n kube-system</span></span><br><span class=\"line\">NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   coredns<span class=\"literal\">-6955765f44</span><span class=\"literal\">-68g6v</span>         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   coredns<span class=\"literal\">-6955765f44</span><span class=\"literal\">-cs5r8</span>         <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   etcd<span class=\"literal\">-master</span>                      <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-apiserver</span><span class=\"literal\">-master</span>            <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-controller</span><span class=\"literal\">-manager</span><span class=\"literal\">-master</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-flannel</span><span class=\"literal\">-ds</span><span class=\"literal\">-amd64</span><span class=\"literal\">-47r25</span>      <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-flannel</span><span class=\"literal\">-ds</span><span class=\"literal\">-amd64</span><span class=\"literal\">-ls5lh</span>      <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-proxy</span><span class=\"literal\">-685tk</span>                 <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-proxy</span><span class=\"literal\">-87spt</span>                 <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">kube<span class=\"literal\">-system</span>   kube<span class=\"literal\">-scheduler</span><span class=\"literal\">-master</span>            <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>d1<span class=\"built_in\">h</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>创建并运行</strong></p>\n<p>kubernetes没有提供单独运行Pod的命令，都是通过Pod控制器来实现的</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令格式： kubectl run (pod控制器名称) [参数] </span></span><br><span class=\"line\"><span class=\"comment\"># --image  指定Pod的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># --port   指定端口</span></span><br><span class=\"line\"><span class=\"comment\"># --namespace  指定namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl run nginx --image=nginx:1.17.1 --port=80 --namespace dev </span></span><br><span class=\"line\">deployment.apps/nginx created</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看pod信息</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看Pod基本信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-fg2db</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">43</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod的详细信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pod nginx-5ff7956ff6-fg2db -n dev</span></span><br><span class=\"line\">Name:         nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-fg2db</span></span><br><span class=\"line\">Namespace:    dev</span><br><span class=\"line\">Priority:     <span class=\"number\">0</span></span><br><span class=\"line\">Node:         node1/<span class=\"number\">192.168</span>.<span class=\"number\">109.101</span></span><br><span class=\"line\"><span class=\"built_in\">Start</span> Time:   Wed, <span class=\"number\">08</span> Apr <span class=\"number\">2020</span> <span class=\"number\">09</span>:<span class=\"number\">29</span>:<span class=\"number\">24</span> +<span class=\"number\">0800</span></span><br><span class=\"line\">Labels:       pod<span class=\"literal\">-template</span><span class=\"literal\">-hash</span>=<span class=\"number\">5</span>ff7956ff6</span><br><span class=\"line\">              run=nginx</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">IP:           <span class=\"number\">10.244</span>.<span class=\"number\">1.23</span></span><br><span class=\"line\">IPs:</span><br><span class=\"line\">  IP:           <span class=\"number\">10.244</span>.<span class=\"number\">1.23</span></span><br><span class=\"line\">Controlled By:  ReplicaSet/nginx<span class=\"literal\">-5ff7956ff6</span></span><br><span class=\"line\">Containers:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    Container ID:   docker://<span class=\"number\">4</span>c62b8c0648d2512380f4ffa5da2c99d16e05634979973449c98e9b829f6253c</span><br><span class=\"line\">    Image:          nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span></span><br><span class=\"line\">    Image ID:       docker<span class=\"literal\">-pullable</span>://nginx@sha256:<span class=\"number\">485</span>b610fefec7ff6c463ced9623314a04ed67e3945b9c08d7e53a47f6d108dc7</span><br><span class=\"line\">    Port:           <span class=\"number\">80</span>/TCP</span><br><span class=\"line\">    Host Port:      <span class=\"number\">0</span>/TCP</span><br><span class=\"line\">    State:          Running</span><br><span class=\"line\">      Started:      Wed, <span class=\"number\">08</span> Apr <span class=\"number\">2020</span> <span class=\"number\">09</span>:<span class=\"number\">30</span>:<span class=\"number\">01</span> +<span class=\"number\">0800</span></span><br><span class=\"line\">    Ready:          True</span><br><span class=\"line\">    Restart Count:  <span class=\"number\">0</span></span><br><span class=\"line\">    Environment:    &lt;none&gt;</span><br><span class=\"line\">    Mounts:</span><br><span class=\"line\">      /var/run/secrets/kubernetes.io/serviceaccount from default<span class=\"literal\">-token</span><span class=\"literal\">-hwvvw</span> (ro)</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>              Status</span><br><span class=\"line\">  Initialized       True</span><br><span class=\"line\">  Ready             True</span><br><span class=\"line\">  ContainersReady   True</span><br><span class=\"line\">  PodScheduled      True</span><br><span class=\"line\">Volumes:</span><br><span class=\"line\">  default<span class=\"literal\">-token</span><span class=\"literal\">-hwvvw</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Type</span>:        Secret (a volume populated by a Secret)</span><br><span class=\"line\">    SecretName:  default<span class=\"literal\">-token</span><span class=\"literal\">-hwvvw</span></span><br><span class=\"line\">    Optional:    false</span><br><span class=\"line\">QoS <span class=\"class\"><span class=\"keyword\">Class</span>:       <span class=\"title\">BestEffort</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Node</span>-<span class=\"title\">Selectors</span>:  &lt;<span class=\"title\">none</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Tolerations</span>:     <span class=\"title\">node</span>.<span class=\"title\">kubernetes</span>.<span class=\"title\">io</span>/<span class=\"title\">not</span>-<span class=\"title\">ready</span>:<span class=\"title\">NoExecute</span> <span class=\"title\">for</span> 300<span class=\"title\">s</span></span></span><br><span class=\"line\"><span class=\"class\">                 <span class=\"title\">node</span>.<span class=\"title\">kubernetes</span>.<span class=\"title\">io</span>/<span class=\"title\">unreachable</span>:<span class=\"title\">NoExecute</span> <span class=\"title\">for</span> 300<span class=\"title\">s</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Events</span>:</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Type</span>    <span class=\"title\">Reason</span>     <span class=\"title\">Age</span>        <span class=\"title\">From</span>               <span class=\"title\">Message</span></span></span><br><span class=\"line\"><span class=\"class\">  ----    ------     ----       ----               -------</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Normal</span>  <span class=\"title\">Scheduled</span>  &lt;<span class=\"title\">unknown</span>&gt;  <span class=\"title\">default</span>-<span class=\"title\">scheduler</span>  <span class=\"title\">Successfully</span> <span class=\"title\">assigned</span> <span class=\"title\">dev</span>/<span class=\"title\">nginx</span>-5<span class=\"title\">ff7956ff6</span>-<span class=\"title\">fg2db</span> <span class=\"title\">to</span> <span class=\"title\">node1</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Normal</span>  <span class=\"title\">Pulling</span>    4<span class=\"title\">m11s</span>      <span class=\"title\">kubelet</span>, <span class=\"title\">node1</span>     <span class=\"title\">Pulling</span> <span class=\"title\">image</span> &quot;<span class=\"title\">nginx</span>:1.17.1&quot;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Normal</span>  <span class=\"title\">Pulled</span>     3<span class=\"title\">m36s</span>      <span class=\"title\">kubelet</span>, <span class=\"title\">node1</span>     <span class=\"title\">Successfully</span> <span class=\"title\">pulled</span> <span class=\"title\">image</span> &quot;<span class=\"title\">nginx</span>:1.17.1&quot;</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Normal</span>  <span class=\"title\">Created</span>    3<span class=\"title\">m36s</span>      <span class=\"title\">kubelet</span>, <span class=\"title\">node1</span>     <span class=\"title\">Created</span> <span class=\"title\">container</span> <span class=\"title\">nginx</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">Normal</span>  <span class=\"title\">Started</span>    3<span class=\"title\">m36s</span>      <span class=\"title\">kubelet</span>, <span class=\"title\">node1</span>     <span class=\"title\">Started</span> <span class=\"title\">container</span> <span class=\"title\">nginx</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>访问Pod</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取podIP</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE    IP             NODE    ... </span><br><span class=\"line\">nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-fg2db</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">190</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.23</span>   node1   ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#访问POD</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl http://10.244.1.23:80</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;p&gt;&lt;em&gt;Thank you <span class=\"keyword\">for</span> <span class=\"keyword\">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除指定Pod</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除指定Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete pod nginx-5ff7956ff6-fg2db -n dev</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;nginx-5ff7956ff6-fg2db&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时，显示删除Pod成功，但是再查询，发现又新产生了一个 </span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-jj4ng</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">21</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这是因为当前Pod是由Pod控制器创建的，控制器会监控Pod状况，一旦发现Pod死亡，会立即重建</span></span><br><span class=\"line\"><span class=\"comment\"># 此时要想删除Pod，必须删除Pod控制器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先来查询一下当前namespace下的Pod控制器</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deploy -n  dev</span></span><br><span class=\"line\">NAME    READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">1</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">9</span>m7s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来，删除此PodPod控制器</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete deploy nginx -n dev</span></span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 稍等片刻，再查询Pod，发现Pod被删除了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">No resources found <span class=\"keyword\">in</span> dev namespace.</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置操作</strong></p>\n<p>创建一个pod-nginx.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行对应的创建和删除命令了：</p>\n<p>​    创建：kubectl  create  -f  pod-nginx.yaml</p>\n<p>​    删除：kubectl  delete  -f  pod-nginx.yaml</p>\n<h2 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h2><p>Label是kubernetes系统中的一个重要概念。它的作用就是在资源上添加标识，用来对它们进行区分和选择。</p>\n<p>Label的特点：</p>\n<ul>\n<li>一个Label会以key/value键值对的形式附加到各种对象上，如Node、Pod、Service等等</li>\n<li>一个资源对象可以定义任意数量的Label ，同一个Label也可以被添加到任意数量的资源对象上去</li>\n<li>Label通常在资源对象定义时确定，当然也可以在对象创建后动态添加或者删除</li>\n</ul>\n<p>可以通过Label实现资源的多维度分组，以便灵活、方便地进行资源分配、调度、配置、部署等管理工作。</p>\n<blockquote>\n<p>一些常用的Label 示例如下：</p>\n<ul>\n<li>版本标签：”version”:”release”, “version”:”stable”……</li>\n<li>环境标签：”environment”:”dev”，”environment”:”test”，”environment”:”pro”</li>\n<li>架构标签：”tier”:”frontend”，”tier”:”backend”</li>\n</ul>\n</blockquote>\n<p>标签定义完毕之后，还要考虑到标签的选择，这就要使用到Label Selector，即：</p>\n<p>​    Label用于给某个资源对象定义标识</p>\n<p>​    Label Selector用于查询和筛选拥有某些标签的资源对象</p>\n<p>当前有两种Label Selector：</p>\n<ul>\n<li><p>基于等式的Label Selector</p>\n<p>name = slave: 选择所有包含Label中key=”name”且value=”slave”的对象</p>\n<p>env != production: 选择所有包括Label中的key=”env”且value不等于”production”的对象</p>\n</li>\n<li><p>基于集合的Label Selector</p>\n<p>name in (master, slave): 选择所有包含Label中的key=”name”且value=”master”或”slave”的对象</p>\n<p>name not in (frontend): 选择所有包含Label中的key=”name”且value不等于”frontend”的对象</p>\n</li>\n</ul>\n<p>标签的选择条件可以使用多个，此时将多个Label Selector进行组合，使用逗号”,”进行分隔即可。例如：</p>\n<p>​        name=slave，env!=production</p>\n<p>​        name not in (frontend)，env!=production</p>\n<p><strong>命令方式</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为pod资源打标签</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl label pod nginx-pod version=1.0 -n dev</span></span><br><span class=\"line\">pod/nginx<span class=\"literal\">-pod</span> labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为pod资源更新标签</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl label pod nginx-pod version=2.0 -n dev --overwrite</span></span><br><span class=\"line\">pod/nginx<span class=\"literal\">-pod</span> labeled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看标签</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod nginx-pod  -n dev --show-labels</span></span><br><span class=\"line\">NAME        READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class=\"line\">nginx<span class=\"literal\">-pod</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">10</span>m   version=<span class=\"number\">2.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 筛选标签</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod -n dev -l version=2.0  --show-labels</span></span><br><span class=\"line\">NAME        READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class=\"line\">nginx<span class=\"literal\">-pod</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">17</span>m   version=<span class=\"number\">2.0</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod -n dev -l version!=2.0 --show-labels</span></span><br><span class=\"line\">No resources found <span class=\"keyword\">in</span> dev namespace.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除标签</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl label pod nginx-pod version- -n dev</span></span><br><span class=\"line\">pod/nginx<span class=\"literal\">-pod</span> labeled</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置方式</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">&quot;3.0&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行对应的更新命令了：kubectl  apply  -f  pod-nginx.yaml</p>\n<h2 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h2><p>​    在kubernetes中，Pod是最小的控制单元，但是kubernetes很少直接控制Pod，一般都是通过Pod控制器来完成的。Pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod。</p>\n<p>​     在kubernetes中Pod控制器的种类有很多，本章节只介绍一种：Deployment。</p>\n<img src=\"/2021/12/01/K8S/day2/k8s_day2/image-20200408193950807.png\" alt=\"image-20200408193950807\" style=\"border: 1px solid; zoom: 80%;\">\n\n<p><strong>命令操作</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令格式: kubectl run deployment名称  [参数] </span></span><br><span class=\"line\"><span class=\"comment\"># --image  指定pod的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># --port   指定端口</span></span><br><span class=\"line\"><span class=\"comment\"># --replicas  指定创建pod数量</span></span><br><span class=\"line\"><span class=\"comment\"># --namespace  指定namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl run nginx --image=nginx:1.17.1 --port=80 --replicas=3 -n dev</span></span><br><span class=\"line\">deployment.apps/nginx created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看创建的Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-6k8cb</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">19</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-jxfjt</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">19</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-5ff7956ff6</span><span class=\"literal\">-v6jqw</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">19</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deployment的信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deploy -n dev</span></span><br><span class=\"line\">NAME    READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE</span><br><span class=\"line\">nginx   <span class=\"number\">3</span>/<span class=\"number\">3</span>     <span class=\"number\">3</span>            <span class=\"number\">3</span>           <span class=\"number\">2</span>m42s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UP-TO-DATE：成功升级的副本数量</span></span><br><span class=\"line\"><span class=\"comment\"># AVAILABLE：可用副本的数量</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deploy -n dev -o wide</span></span><br><span class=\"line\">NAME    READY UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>  AVAILABLE   AGE     CONTAINERS   IMAGES              SELECTOR</span><br><span class=\"line\">nginx   <span class=\"number\">3</span>/<span class=\"number\">3</span>     <span class=\"number\">3</span>         <span class=\"number\">3</span>           <span class=\"number\">2</span>m51s   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span>        run=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deployment的详细信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe deploy nginx -n dev</span></span><br><span class=\"line\">Name:                   nginx</span><br><span class=\"line\">Namespace:              dev</span><br><span class=\"line\">CreationTimestamp:      Wed, <span class=\"number\">08</span> Apr <span class=\"number\">2020</span> <span class=\"number\">11</span>:<span class=\"number\">14</span>:<span class=\"number\">14</span> +<span class=\"number\">0800</span></span><br><span class=\"line\">Labels:                 run=nginx</span><br><span class=\"line\">Annotations:            deployment.kubernetes.io/revision: <span class=\"number\">1</span></span><br><span class=\"line\">Selector:               run=nginx</span><br><span class=\"line\">Replicas:               <span class=\"number\">3</span> desired | <span class=\"number\">3</span> updated | <span class=\"number\">3</span> total | <span class=\"number\">3</span> available | <span class=\"number\">0</span> unavailable</span><br><span class=\"line\">StrategyType:           RollingUpdate</span><br><span class=\"line\">MinReadySeconds:        <span class=\"number\">0</span></span><br><span class=\"line\">RollingUpdateStrategy:  <span class=\"number\">25</span>% max unavailable, <span class=\"number\">25</span>% max surge</span><br><span class=\"line\">Pod Template:</span><br><span class=\"line\">  Labels:  run=nginx</span><br><span class=\"line\">  Containers:</span><br><span class=\"line\">   nginx:</span><br><span class=\"line\">    Image:        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span></span><br><span class=\"line\">    Port:         <span class=\"number\">80</span>/TCP</span><br><span class=\"line\">    Host Port:    <span class=\"number\">0</span>/TCP</span><br><span class=\"line\">    Environment:  &lt;none&gt;</span><br><span class=\"line\">    Mounts:       &lt;none&gt;</span><br><span class=\"line\">  Volumes:        &lt;none&gt;</span><br><span class=\"line\">Conditions:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>           Status  Reason</span><br><span class=\"line\">  ----           ------  ------</span><br><span class=\"line\">  Available      True    MinimumReplicasAvailable</span><br><span class=\"line\">  Progressing    True    NewReplicaSetAvailable</span><br><span class=\"line\">OldReplicaSets:  &lt;none&gt;</span><br><span class=\"line\">NewReplicaSet:   nginx<span class=\"literal\">-5ff7956ff6</span> (<span class=\"number\">3</span>/<span class=\"number\">3</span> replicas created)</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>    Reason             Age    From                   Message</span><br><span class=\"line\">  ----    ------             ----   ----                   -------</span><br><span class=\"line\">  Normal  ScalingReplicaSet  <span class=\"number\">5</span>m43s  deployment<span class=\"literal\">-controller</span>  Scaled up replicaset nginx<span class=\"literal\">-5ff7956ff6</span> to <span class=\"number\">3</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 删除 </span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete deploy nginx -n dev</span></span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;nginx&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置操作</strong></p>\n<p>创建一个deploy-nginx.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行对应的创建和删除命令了：</p>\n<p>​    创建：kubectl  create  -f  deploy-nginx.yaml</p>\n<p>​    删除：kubectl  delete  -f  deploy-nginx.yaml</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>通过上节课的学习，已经能够利用Deployment来创建一组Pod来提供具有高可用性的服务。</p>\n<p>虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题：</p>\n<ul>\n<li>Pod IP 会随着Pod的重建产生变化</li>\n<li>Pod IP 仅仅是集群内可见的虚拟IP，外部无法访问</li>\n</ul>\n<p>这样对于访问这个服务带来了难度。因此，kubernetes设计了Service来解决这个问题。</p>\n<p>Service可以看作是一组同类Pod<strong>对外的访问接口</strong>。借助Service，应用可以方便地实现服务发现和负载均衡。</p>\n<p><img src=\"/2021/12/01/K8S/day2/k8s_day2/image-20200408194716912.png\" alt=\"image-20200408194716912\"></p>\n<p><strong>操作一：创建集群内部可访问的Service</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暴露Service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n dev</span></span><br><span class=\"line\">service/svc<span class=\"literal\">-nginx1</span> exposed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get svc svc-nginx -n dev -o wide</span></span><br><span class=\"line\">NAME         <span class=\"built_in\">TYPE</span>        CLUSTER<span class=\"literal\">-IP</span>       EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)   AGE     SELECTOR</span><br><span class=\"line\">svc<span class=\"literal\">-nginx1</span>   ClusterIP   <span class=\"number\">10.109</span>.<span class=\"number\">179.231</span>   &lt;none&gt;        <span class=\"number\">80</span>/TCP    <span class=\"number\">3</span>m51s   run=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里产生了一个CLUSTER-IP，这就是service的IP，在Service的生命周期中，这个地址是不会变动的</span></span><br><span class=\"line\"><span class=\"comment\"># 可以通过这个IP访问当前service对应的POD</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.109.179.231:80</span></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>操作二：创建集群外部也可访问的Service</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上面创建的Service的type类型为ClusterIP，这个ip地址只用集群内部可访问</span></span><br><span class=\"line\"><span class=\"comment\"># 如果需要创建外部也可以访问的Service，需要修改type为NodePort</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl expose deploy nginx --name=svc-nginx2 --type=NodePort --port=80 --target-port=80 -n dev</span></span><br><span class=\"line\">service/svc<span class=\"literal\">-nginx2</span> exposed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时查看，会发现出现了NodePort类型的Service，而且有一对Port（80:31928/TC）</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get svc  svc-nginx-1  -n dev -o wide</span></span><br><span class=\"line\">NAME          <span class=\"built_in\">TYPE</span>        CLUSTER<span class=\"literal\">-IP</span>       EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)        AGE    SELECTOR</span><br><span class=\"line\">svc<span class=\"literal\">-nginx2</span>    NodePort    <span class=\"number\">10.100</span>.<span class=\"number\">94.0</span>      &lt;none&gt;        <span class=\"number\">80</span>:<span class=\"number\">31928</span>/TCP   <span class=\"number\">9</span>s     run=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来就可以通过集群外的主机访问 节点IP:31928访问服务了</span></span><br><span class=\"line\"><span class=\"comment\"># 例如在的电脑主机上通过浏览器访问下面的地址</span></span><br><span class=\"line\">http://<span class=\"number\">192.168</span>.<span class=\"number\">109.100</span>:<span class=\"number\">31928</span>/</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除Service</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete svc svc-nginx-1 -n dev                                   service &quot;svc-nginx-1&quot; deleted</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置方式</strong></p>\n<p>创建一个svc-nginx.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">svc-nginx</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"number\">10.109</span><span class=\"number\">.179</span><span class=\"number\">.231</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以执行对应的创建和删除命令了：</p>\n<p>​    创建：kubectl  create  -f  svc-nginx.yaml</p>\n<p>​    删除：kubectl  delete  -f  svc-nginx.yaml</p>\n<blockquote>\n<p><strong>小结</strong></p>\n<p>​    至此，已经掌握了Namespace、Pod、Deployment、Service资源的基本操作，有了这些操作，就可以在kubernetes集群中实现一个服务的简单部署和访问了，但是如果想要更好的使用kubernetes，就需要深入学习这几种资源的细节和原理。</p>\n</blockquote>\n","categories":["k8s"],"tags":["k8s 教程"]},{"title":"k8s教程day3-Pod详解","url":"/2021/12/01/K8S/day3/k8s_day3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>k8s 课程规划<br><img src=\"https://user-images.githubusercontent.com/28568478/144197771-e2ed53bf-bb06-46a8-af7b-8ac948fc2cf1.png\"></p>\n<span id=\"more\"></span>\n<h1 id=\"第五章-Pod详解\"><a href=\"#第五章-Pod详解\" class=\"headerlink\" title=\"第五章 Pod详解\"></a>第五章 Pod详解</h1><p>本章节将详细介绍Pod资源的各种配置（yaml）和原理。</p>\n<h2 id=\"Pod介绍\"><a href=\"#Pod介绍\" class=\"headerlink\" title=\"Pod介绍\"></a>Pod介绍</h2><h3 id=\"Pod结构\"><a href=\"#Pod结构\" class=\"headerlink\" title=\"Pod结构\"></a>Pod结构</h3><img src=\"/2021/12/01/K8S/day3/k8s_day3/image-20200407121501907.png\" alt=\"image-20200407121501907\" style=\"zoom:80%;\">\n\n<p>每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类：</p>\n<ul>\n<li><p>用户程序所在的容器，数量可多可少</p>\n</li>\n<li><p>Pause容器，这是每个Pod都会有的一个<strong>根容器</strong>，它的作用有两个：</p>\n<ul>\n<li><p>可以以它为依据，评估整个Pod的健康状态</p>\n</li>\n<li><p>可以在根容器上设置Ip地址，其它容器都此Ip（Pod IP），以实现Pod内部的网路通信</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">这里是Pod内部的通讯，Pod的之间的通讯采用虚拟二层网络技术来实现，我们当前环境用的是Flannel</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Pod定义\"><a href=\"#Pod定义\" class=\"headerlink\" title=\"Pod定义\"></a>Pod定义</h3><p>下面是Pod的资源清单：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>     <span class=\"comment\">#必选，版本号，例如v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>       　 <span class=\"comment\">#必选，资源类型，例如 Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>       　 <span class=\"comment\">#必选，元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">string</span>     <span class=\"comment\">#必选，Pod名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">string</span>  <span class=\"comment\">#Pod所属的命名空间,默认为&quot;default&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span>       　　  <span class=\"comment\">#自定义标签列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span>      　          </span><br><span class=\"line\"><span class=\"attr\">spec:</span>  <span class=\"comment\">#必选，Pod中容器的详细定义</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span>  <span class=\"comment\">#必选，Pod中容器列表</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span>   <span class=\"comment\">#必选，容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">string</span>  <span class=\"comment\">#必选，容器的镜像名称</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> [ <span class=\"string\">Always|Never|IfNotPresent</span> ]  <span class=\"comment\">#获取镜像的策略 </span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">string</span>]   <span class=\"comment\">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span> [<span class=\"string\">string</span>]      <span class=\"comment\">#容器的启动命令参数列表</span></span><br><span class=\"line\">    <span class=\"attr\">workingDir:</span> <span class=\"string\">string</span>  <span class=\"comment\">#容器的工作目录</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>       <span class=\"comment\">#挂载到容器内部的存储卷配置</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span>      <span class=\"comment\">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">string</span> <span class=\"comment\">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class=\"line\">      <span class=\"attr\">readOnly:</span> <span class=\"string\">boolean</span> <span class=\"comment\">#是否为只读模式</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> <span class=\"comment\">#需要暴露的端口库号列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span>        <span class=\"comment\">#端口的名称</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"string\">int</span>  <span class=\"comment\">#容器需要监听的端口号</span></span><br><span class=\"line\">      <span class=\"attr\">hostPort:</span> <span class=\"string\">int</span>       <span class=\"comment\">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">string</span>    <span class=\"comment\">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span>   <span class=\"comment\">#容器运行前需设置的环境变量列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span>  <span class=\"comment\">#环境变量名称</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">string</span> <span class=\"comment\">#环境变量的值</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\">#资源限制和请求的设置</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span>  <span class=\"comment\">#资源限制的设置</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">string</span>     <span class=\"comment\">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">string</span>  <span class=\"comment\">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span> <span class=\"comment\">#资源请求的设置</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">string</span>    <span class=\"comment\">#Cpu请求，容器启动的初始可用数量</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">string</span> <span class=\"comment\">#内存请求,容器启动的初始可用数量</span></span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span> <span class=\"comment\">#生命周期钩子</span></span><br><span class=\"line\">\t\t<span class=\"attr\">postStart:</span> <span class=\"comment\">#容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启</span></span><br><span class=\"line\">\t\t<span class=\"attr\">preStop:</span> <span class=\"comment\">#容器终止前执行此钩子,无论结果如何,容器都会终止</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>  <span class=\"comment\">#对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span>       　 <span class=\"comment\">#对Pod容器内检查方式设置为exec方式</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">string</span>]  <span class=\"comment\">#exec方式需要制定的命令或脚本</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>       <span class=\"comment\">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"string\">number</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">HttpHeaders:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">string</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span>     <span class=\"comment\">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class=\"line\">         <span class=\"attr\">port:</span> <span class=\"string\">number</span></span><br><span class=\"line\">       <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">0</span>       <span class=\"comment\">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class=\"line\">       <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">0</span>    　　    <span class=\"comment\">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class=\"line\">       <span class=\"attr\">periodSeconds:</span> <span class=\"number\">0</span>     　　    <span class=\"comment\">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class=\"line\">       <span class=\"attr\">successThreshold:</span> <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"attr\">failureThreshold:</span> <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">         <span class=\"attr\">privileged:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> [<span class=\"string\">Always</span> <span class=\"string\">|</span> <span class=\"string\">Never</span> <span class=\"string\">|</span> <span class=\"string\">OnFailure</span>]  <span class=\"comment\">#Pod的重启策略</span></span><br><span class=\"line\">  <span class=\"attr\">nodeName:</span> <span class=\"string\">&lt;string&gt;</span> <span class=\"comment\">#设置NodeName表示将该Pod调度到指定到名称的node节点上</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span> <span class=\"string\">obeject</span> <span class=\"comment\">#设置NodeSelector表示将该Pod调度到包含这个label的node上</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span> <span class=\"comment\">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">false</span>   <span class=\"comment\">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span>   <span class=\"comment\">#在该pod上定义共享存储卷列表</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">string</span>    <span class=\"comment\">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class=\"line\">    <span class=\"attr\">emptyDir:</span> &#123;&#125;       <span class=\"comment\">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> <span class=\"string\">string</span>   <span class=\"comment\">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">string</span>      　　        <span class=\"comment\">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class=\"line\">    <span class=\"attr\">secret:</span>       　　　<span class=\"comment\">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span></span><br><span class=\"line\">      <span class=\"attr\">scretname:</span> <span class=\"string\">string</span>  </span><br><span class=\"line\">      <span class=\"attr\">items:</span>     </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">string</span></span><br><span class=\"line\">    <span class=\"attr\">configMap:</span>         <span class=\"comment\">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">string</span></span><br><span class=\"line\">      <span class=\"attr\">items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">string</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">string</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#小提示：</span></span><br><span class=\"line\"><span class=\"comment\">#\t在这里，可通过一个命令来查看每种资源的可配置项</span></span><br><span class=\"line\"><span class=\"comment\">#   kubectl explain 资源类型         查看某种资源可以配置的一级属性</span></span><br><span class=\"line\"><span class=\"comment\">#\tkubectl explain 资源类型.属性     查看属性的子属性</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl explain pod</span></span><br><span class=\"line\">KIND:     Pod</span><br><span class=\"line\">VERSION:  v1</span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   apiVersion   &lt;string&gt;</span><br><span class=\"line\">   kind &lt;string&gt;</span><br><span class=\"line\">   metadata     &lt;Object&gt;</span><br><span class=\"line\">   spec &lt;Object&gt;</span><br><span class=\"line\">   status       &lt;Object&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl explain pod.metadata</span></span><br><span class=\"line\">KIND:     Pod</span><br><span class=\"line\">VERSION:  v1</span><br><span class=\"line\">RESOURCE: metadata &lt;Object&gt;</span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   annotations  &lt;map[<span class=\"built_in\">string</span>]string&gt;</span><br><span class=\"line\">   clusterName  &lt;string&gt;</span><br><span class=\"line\">   creationTimestamp    &lt;string&gt;</span><br><span class=\"line\">   deletionGracePeriodSeconds   &lt;integer&gt;</span><br><span class=\"line\">   deletionTimestamp    &lt;string&gt;</span><br><span class=\"line\">   finalizers   &lt;[]string&gt;</span><br><span class=\"line\">   generateName &lt;string&gt;</span><br><span class=\"line\">   generation   &lt;integer&gt;</span><br><span class=\"line\">   labels       &lt;map[<span class=\"built_in\">string</span>]string&gt;</span><br><span class=\"line\">   managedFields        &lt;[]Object&gt;</span><br><span class=\"line\">   name &lt;string&gt;</span><br><span class=\"line\">   namespace    &lt;string&gt;</span><br><span class=\"line\">   ownerReferences      &lt;[]Object&gt;</span><br><span class=\"line\">   resourceVersion      &lt;string&gt;</span><br><span class=\"line\">   selfLink     &lt;string&gt;</span><br><span class=\"line\">   uid  &lt;string&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在kubernetes中基本所有资源的一级属性都是一样的，主要包含5部分：</p>\n<ul>\n<li><p>apiVersion   &lt;string&gt;     版本，由kubernetes内部定义，版本号必须可以用 kubectl api-versions 查询到</p>\n</li>\n<li><p>kind &lt;string&gt;                类型，由kubernetes内部定义，版本号必须可以用 kubectl api-resources 查询到</p>\n</li>\n<li><p>metadata   &lt;Object&gt;     元数据，主要是资源标识和说明，常用的有name、namespace、labels等</p>\n</li>\n<li><p>spec &lt;Object&gt;               描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述                </p>\n</li>\n<li><p>status  &lt;Object&gt;            状态信息，里面的内容不需要定义，由kubernetes自动生成</p>\n</li>\n</ul>\n<p>在上面的属性中，spec是接下来研究的重点，继续看下它的常见子属性:</p>\n<ul>\n<li>containers   &lt;[]Object&gt;       容器列表，用于定义容器的详细信息 </li>\n<li>nodeName &lt;String&gt;           根据nodeName的值将pod调度到指定的Node节点上</li>\n<li>nodeSelector   &lt;map[]&gt;      根据NodeSelector中定义的信息选择将该Pod调度到包含这些label的Node 上</li>\n<li>hostNetwork  &lt;boolean&gt;    是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</li>\n<li>volumes      &lt;[]Object&gt;       存储卷，用于定义Pod上面挂在的存储信息 </li>\n<li>restartPolicy    &lt;string&gt;       重启策略，表示Pod在遇到故障的时候的处理策略</li>\n</ul>\n<h2 id=\"Pod配置\"><a href=\"#Pod配置\" class=\"headerlink\" title=\"Pod配置\"></a>Pod配置</h2><p>本小节主要来研究<code>pod.spec.containers</code>属性，这也是pod配置中最为关键的一项配置。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl explain pod.spec.containers</span></span><br><span class=\"line\">KIND:     Pod</span><br><span class=\"line\">VERSION:  v1</span><br><span class=\"line\">RESOURCE: containers &lt;[]Object&gt;   <span class=\"comment\"># 数组，代表可以有多个容器</span></span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   name  &lt;string&gt;     <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">   image &lt;string&gt;     <span class=\"comment\"># 容器需要的镜像地址</span></span><br><span class=\"line\">   imagePullPolicy  &lt;string&gt; <span class=\"comment\"># 镜像拉取策略 </span></span><br><span class=\"line\">   command  &lt;[]string&gt; <span class=\"comment\"># 容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class=\"line\">   args     &lt;[]string&gt; <span class=\"comment\"># 容器的启动命令需要的参数列表</span></span><br><span class=\"line\">   env      &lt;[]Object&gt; <span class=\"comment\"># 容器环境变量的配置</span></span><br><span class=\"line\">   ports    &lt;[]Object&gt;     <span class=\"comment\"># 容器需要暴露的端口号列表</span></span><br><span class=\"line\">   resources &lt;Object&gt;      <span class=\"comment\"># 资源限制和资源请求的设置</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>创建pod-base.yaml文件，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-base</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">heima</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br></pre></td></tr></table></figure>\n\n<p>上面定义了一个比较简单Pod的配置，里面有两个容器：</p>\n<ul>\n<li>nginx：用1.17.1版本的nginx镜像创建，（nginx是一个轻量级web容器）</li>\n<li>busybox：用1.30版本的busybox镜像创建，（busybox是一个小巧的linux命令集合）</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl apply -f pod-base.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-base</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod状况</span></span><br><span class=\"line\"><span class=\"comment\"># READY 1/2 : 表示当前Pod中有2个容器，其中1个准备就绪，1个未就绪</span></span><br><span class=\"line\"><span class=\"comment\"># RESTARTS  : 重启次数，因为有1个容器故障了，Pod一直在重启试图恢复它</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl get pod -n dev</span></span><br><span class=\"line\">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-base</span>   <span class=\"number\">1</span>/<span class=\"number\">2</span>     Running   <span class=\"number\">4</span>          <span class=\"number\">95</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以通过describe查看内部的详情</span></span><br><span class=\"line\"><span class=\"comment\"># 此时已经运行起来了一个基本的Pod，虽然它暂时有问题</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl describe pod pod-base -n dev</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"镜像拉取\"><a href=\"#镜像拉取\" class=\"headerlink\" title=\"镜像拉取\"></a>镜像拉取</h3><p>创建pod-imagepullpolicy.yaml文件，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-imagepullpolicy</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span> <span class=\"comment\"># 用于设置镜像拉取策略</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br></pre></td></tr></table></figure>\n\n<p>imagePullPolicy，用于设置镜像拉取策略，kubernetes支持配置三种拉取策略：</p>\n<ul>\n<li>Always：总是从远程仓库拉取镜像（一直远程下载）</li>\n<li>IfNotPresent：本地有则使用本地镜像，本地没有则从远程仓库拉取镜像（本地有就本地  本地没远程下载）</li>\n<li>Never：只使用本地镜像，从不去远程仓库拉取，本地没有就报错 （一直使用本地）</li>\n</ul>\n<blockquote>\n<p>默认值说明：</p>\n<p>​    如果镜像tag为具体版本号， 默认策略是：IfNotPresent</p>\n<p>​    如果镜像tag为：latest（最终版本） ，默认策略是always</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl create -f pod-imagepullpolicy.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-imagepullpolicy</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod详情</span></span><br><span class=\"line\"><span class=\"comment\"># 此时明显可以看到nginx镜像有一步Pulling image &quot;nginx:1.17.1&quot;的过程</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl describe pod pod-imagepullpolicy -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>     Reason     Age               From               Message</span><br><span class=\"line\">  ----     ------     ----              ----               -------</span><br><span class=\"line\">  Normal   Scheduled  &lt;unknown&gt;         default<span class=\"literal\">-scheduler</span>  Successfully assigned dev/pod<span class=\"literal\">-imagePullPolicy</span> to node1</span><br><span class=\"line\">  Normal   Pulling    <span class=\"number\">32</span>s               kubelet, node1     Pulling image <span class=\"string\">&quot;nginx:1.17.1&quot;</span></span><br><span class=\"line\">  Normal   Pulled     <span class=\"number\">26</span>s               kubelet, node1     Successfully pulled image <span class=\"string\">&quot;nginx:1.17.1&quot;</span></span><br><span class=\"line\">  Normal   Created    <span class=\"number\">26</span>s               kubelet, node1     Created container nginx</span><br><span class=\"line\">  Normal   Started    <span class=\"number\">25</span>s               kubelet, node1     Started container nginx</span><br><span class=\"line\">  Normal   Pulled     <span class=\"number\">7</span>s (x3 over <span class=\"number\">25</span>s)  kubelet, node1     Container image <span class=\"string\">&quot;busybox:1.30&quot;</span> already present on machine</span><br><span class=\"line\">  Normal   Created    <span class=\"number\">7</span>s (x3 over <span class=\"number\">25</span>s)  kubelet, node1     Created container busybox</span><br><span class=\"line\">  Normal   Started    <span class=\"number\">7</span>s (x3 over <span class=\"number\">25</span>s)  kubelet, node1     Started container busybox</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h3><p>​    在前面的案例中，一直有一个问题没有解决，就是的busybox容器一直没有成功运行，那么到底是什么原因导致这个容器的故障呢？</p>\n<p>​    原来busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command配置。</p>\n<p>创建pod-command.yaml文件，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-command</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;touch /tmp/hello.txt;while true;do /bin/echo $(date +%T) &gt;&gt; /tmp/hello.txt; sleep 3; done;&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>command，用于在pod中的容器初始化完毕之后运行一个命令。</p>\n<blockquote>\n<p>稍微解释下上面命令的意思：</p>\n<p>​    “/bin/sh”,”-c”,  使用sh执行命令</p>\n<p>​    touch /tmp/hello.txt;   创建一个/tmp/hello.txt 文件</p>\n<p>​    while true;do /bin/echo $(date +%T) &gt;&gt; /tmp/hello.txt; sleep 3; done;  每隔3秒向文件中写入当前时间</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl create  -f pod-command.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-command</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod状态</span></span><br><span class=\"line\"><span class=\"comment\"># 此时发现两个pod都正常运行了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl get pods pod-command -n dev</span></span><br><span class=\"line\">NAME          READY   STATUS   RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-command</span>   <span class=\"number\">2</span>/<span class=\"number\">2</span>     Runing   <span class=\"number\">0</span>          <span class=\"number\">2</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入pod中的busybox容器，查看文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 补充一个命令: kubectl exec  pod名称 -n 命名空间 -it -c 容器名称 /bin/sh  在容器内部执行命令</span></span><br><span class=\"line\"><span class=\"comment\"># 使用这个命令就可以进入某个容器的内部，然后进行相关操作了</span></span><br><span class=\"line\"><span class=\"comment\"># 比如，可以查看txt文件的内容</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pod</span>]<span class=\"comment\"># kubectl exec pod-command -n dev -it -c busybox /bin/sh</span></span><br><span class=\"line\">/ <span class=\"comment\"># tail -f /tmp/hello.txt</span></span><br><span class=\"line\"><span class=\"number\">13</span>:<span class=\"number\">35</span>:<span class=\"number\">35</span></span><br><span class=\"line\"><span class=\"number\">13</span>:<span class=\"number\">35</span>:<span class=\"number\">38</span></span><br><span class=\"line\"><span class=\"number\">13</span>:<span class=\"number\">35</span>:<span class=\"number\">41</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">特别说明：</span><br><span class=\"line\"><span class=\"code\">    通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。</span></span><br><span class=\"line\"><span class=\"code\"> 1 如果command和args均没有写，那么用Dockerfile的配置。</span></span><br><span class=\"line\"><span class=\"code\"> 2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command</span></span><br><span class=\"line\"><span class=\"code\"> 3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数</span></span><br><span class=\"line\"><span class=\"code\"> 4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>创建pod-env.yaml文件，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-env</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;while true;do /bin/echo $(date +%T);sleep 60; done;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"comment\"># 设置环境变量列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;password&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>env，环境变量，用于在pod中的容器设置环境变量。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-env.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-env</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器，输出环境变量</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl exec pod-env -n dev -c busybox -it /bin/sh</span></span><br><span class=\"line\">/ <span class=\"comment\"># echo $username</span></span><br><span class=\"line\">admin</span><br><span class=\"line\">/ <span class=\"comment\"># echo $password</span></span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>这种方式不是很推荐，推荐将这些配置单独存储在配置文件中，这种方式将在后面介绍。</p>\n<h3 id=\"端口设置\"><a href=\"#端口设置\" class=\"headerlink\" title=\"端口设置\"></a>端口设置</h3><p>本小节来介绍容器的端口设置，也就是containers的ports选项。</p>\n<p>首先看下ports支持的子选项：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl explain pod.spec.containers.ports</span></span><br><span class=\"line\">KIND:     Pod</span><br><span class=\"line\">VERSION:  v1</span><br><span class=\"line\">RESOURCE: ports &lt;[]Object&gt;</span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   name         &lt;string&gt;  <span class=\"comment\"># 端口名称，如果指定，必须保证name在pod中是唯一的\t\t</span></span><br><span class=\"line\">   containerPort&lt;integer&gt; <span class=\"comment\"># 容器要监听的端口(0&lt;x&lt;65536)</span></span><br><span class=\"line\">   hostPort     &lt;integer&gt; <span class=\"comment\"># 容器要在主机上公开的端口，如果设置，主机上只能运行容器的一个副本(一般省略) </span></span><br><span class=\"line\">   hostIP       &lt;string&gt;  <span class=\"comment\"># 要将外部端口绑定到的主机IP(一般省略)</span></span><br><span class=\"line\">   protocol     &lt;string&gt;  <span class=\"comment\"># 端口协议。必须是UDP、TCP或SCTP。默认为“TCP”。</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，编写一个测试案例，创建pod-ports.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-ports</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> <span class=\"comment\"># 设置容器暴露的端口列表</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-ports.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-ports</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\"><span class=\"comment\"># 在下面可以明显看到配置信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-ports -n dev -o yaml</span></span><br><span class=\"line\">......</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - image: nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span></span><br><span class=\"line\">    imagePullPolicy: IfNotPresent</span><br><span class=\"line\">    name: nginx</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - containerPort: <span class=\"number\">80</span></span><br><span class=\"line\">      name: nginx<span class=\"literal\">-port</span></span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>访问容器中的程序需要使用的是<code>podIp:containerPort</code></p>\n<h3 id=\"资源配额\"><a href=\"#资源配额\" class=\"headerlink\" title=\"资源配额\"></a>资源配额</h3><p>​    容器中的程序要运行，肯定是要占用一定资源的，比如cpu和内存等，如果不对某个容器的资源做限制，那么它就可能吃掉大量资源，导致其它容器无法运行。针对这种情况，kubernetes提供了对内存和cpu的资源进行配额的机制，这种机制主要通过resources选项实现，他有两个子选项：</p>\n<ul>\n<li><p>limits：用于限制运行时容器的最大占用资源，当容器占用资源超过limits时会被终止，并进行重启</p>\n</li>\n<li><p>requests ：用于设置容器需要的最小资源，如果环境资源不够，容器将无法启动</p>\n</li>\n</ul>\n<p>可以通过上面两个选项设置资源的上下限。</p>\n<p>接下来，编写一个测试案例，创建pod-resources.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-resources</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"comment\"># 资源配额</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span>  <span class=\"comment\"># 限制资源（上限）</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;2&quot;</span> <span class=\"comment\"># CPU限制，单位是core数</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">&quot;10Gi&quot;</span> <span class=\"comment\"># 内存限制</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span> <span class=\"comment\"># 请求资源（下限）</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;1&quot;</span>  <span class=\"comment\"># CPU限制，单位是core数</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">&quot;10Mi&quot;</span>  <span class=\"comment\"># 内存限制</span></span><br></pre></td></tr></table></figure>\n\n<p>在这对cpu和memory的单位做一个说明：</p>\n<ul>\n<li><p>cpu：core数，可以为整数或小数</p>\n</li>\n<li><p>memory： 内存大小，可以使用Gi、Mi、G、M等形式</p>\n</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create  -f pod-resources.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-resources</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看发现pod运行正常</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-resources -n dev</span></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE  </span><br><span class=\"line\">pod<span class=\"literal\">-resources</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">39</span>s   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来，停止Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete  -f pod-resources.yaml</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;pod-resources&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑pod，修改resources.requests.memory的值为10Gi</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># vim pod-resources.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次启动pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create  -f pod-resources.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-resources</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod状态，发现Pod启动失败</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-resources -n dev -o wide</span></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE          </span><br><span class=\"line\">pod<span class=\"literal\">-resources</span>   <span class=\"number\">0</span>/<span class=\"number\">2</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">20</span>s    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod详情会发现，如下提示</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pod pod-resources -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">Warning  FailedScheduling  &lt;unknown&gt;  default<span class=\"literal\">-scheduler</span>  <span class=\"number\">0</span>/<span class=\"number\">2</span> nodes are available: <span class=\"number\">2</span> Insufficient memory.(内存不足)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pod生命周期\"><a href=\"#Pod生命周期\" class=\"headerlink\" title=\"Pod生命周期\"></a>Pod生命周期</h2><p>我们一般将pod对象从创建至终的这段时间范围称为pod的生命周期，它主要包含下面的过程：</p>\n<ul>\n<li><p>pod创建过程</p>\n</li>\n<li><p>运行初始化容器（init container）过程</p>\n</li>\n<li><p>运行主容器（main container）</p>\n<ul>\n<li><p>容器启动后钩子（post start）、容器终止前钩子（pre stop）</p>\n</li>\n<li><p>容器的存活性探测（liveness probe）、就绪性探测（readiness probe）</p>\n</li>\n</ul>\n</li>\n<li><p>pod终止过程</p>\n</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day3/k8s_day3/image-20200412111402706.png\" alt=\"image-20200412111402706\" style=\"border:solid 1px\">\n\n\n<p>在整个生命周期中，Pod会出现5种<strong>状态</strong>（<strong>相位</strong>），分别如下：</p>\n<ul>\n<li>挂起（Pending）：apiserver已经创建了pod资源对象，但它尚未被调度完成或者仍处于下载镜像的过程中</li>\n<li>运行中（Running）：pod已经被调度至某节点，并且所有容器都已经被kubelet创建完成</li>\n<li>成功（Succeeded）：pod中的所有容器都已经成功终止并且不会被重启</li>\n<li>失败（Failed）：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非0值的退出状态</li>\n<li>未知（Unknown）：apiserver无法正常获取到pod对象的状态信息，通常由网络通信失败所导致</li>\n</ul>\n<h3 id=\"创建和终止\"><a href=\"#创建和终止\" class=\"headerlink\" title=\"创建和终止\"></a>创建和终止</h3><p><strong>pod的创建过程</strong></p>\n<ol>\n<li><p>用户通过kubectl或其他api客户端提交需要创建的pod信息给apiServer</p>\n</li>\n<li><p>apiServer开始生成pod对象的信息，并将信息存入etcd，然后返回确认信息至客户端</p>\n</li>\n<li><p>apiServer开始反映etcd中的pod对象的变化，其它组件使用watch机制来跟踪检查apiServer上的变动</p>\n</li>\n<li><p>scheduler发现有新的pod对象要创建，开始为Pod分配主机并将结果信息更新至apiServer</p>\n</li>\n<li><p>node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiServer</p>\n</li>\n<li><p>apiServer将接收到的pod状态信息存入etcd中</p>\n<img src=\"/2021/12/01/K8S/day3/k8s_day3/image-20200406184656917.png\" alt=\"image-20200406184656917\" style=\"zoom:100%;\"></li>\n</ol>\n<p><strong>pod的终止过程</strong></p>\n<ol>\n<li>用户向apiServer发送删除pod对象的命令</li>\n<li>apiServcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead</li>\n<li>将pod标记为terminating状态</li>\n<li>kubelet在监控到pod对象转为terminating状态的同时启动pod关闭过程</li>\n<li>端点控制器监控到pod对象的关闭行为时将其从所有匹配到此端点的service资源的端点列表中移除</li>\n<li>如果当前pod对象定义了preStop钩子处理器，则在其标记为terminating后即会以同步的方式启动执行</li>\n<li>pod对象中的容器进程收到停止信号</li>\n<li>宽限期结束后，若pod中还存在仍在运行的进程，那么pod对象会收到立即终止的信号</li>\n<li>kubelet请求apiServer将此pod资源的宽限期设置为0从而完成删除操作，此时pod对于用户已不可见</li>\n</ol>\n<h3 id=\"初始化容器\"><a href=\"#初始化容器\" class=\"headerlink\" title=\"初始化容器\"></a>初始化容器</h3><p>初始化容器是在pod的主容器启动之前要运行的容器，主要是做一些主容器的前置工作，它具有两大特征：</p>\n<ol>\n<li>初始化容器必须运行完成直至结束，若某初始化容器运行失败，那么kubernetes需要重启它直到成功完成</li>\n<li>初始化容器必须按照定义的顺序执行，当且仅当前一个成功之后，后面的一个才能运行</li>\n</ol>\n<p>初始化容器有很多的应用场景，下面列出的是最常见的几个：</p>\n<ul>\n<li>提供主容器镜像中不具备的工具程序或自定义代码</li>\n<li>初始化容器要先于应用容器串行启动并运行完成，因此可用于延后应用容器的启动直至其依赖的条件得到满足</li>\n</ul>\n<p>接下来做一个案例，模拟下面这个需求：</p>\n<p>​    假设要以主容器来运行nginx，但是要求在运行nginx之前先要能够连接上mysql和redis所在服务器</p>\n<p>​    为了简化测试，事先规定好mysql<code>(192.168.109.201)</code>和redis<code>(192.168.109.202)</code>服务器的地址</p>\n<p>创建pod-initcontainer.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-initcontainer</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">main-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;until ping 192.168.109.201 -c 1 ; do echo waiting for mysql...; sleep 2; done;&#x27;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test-redis</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&#x27;sh&#x27;</span>, <span class=\"string\">&#x27;-c&#x27;</span>, <span class=\"string\">&#x27;until ping 192.168.109.202 -c 1 ; do echo waiting for reids...; sleep 2; done;&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-initcontainer.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-initcontainer</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod状态</span></span><br><span class=\"line\"><span class=\"comment\"># 发现pod卡在启动第一个初始化容器过程中，后面的容器不会运行</span></span><br><span class=\"line\">root@master ~]<span class=\"comment\"># kubectl describe pod  pod-initcontainer -n dev</span></span><br><span class=\"line\">........</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>    Reason     Age   From               Message</span><br><span class=\"line\">  ----    ------     ----  ----               -------</span><br><span class=\"line\">  Normal  Scheduled  <span class=\"number\">49</span>s   default<span class=\"literal\">-scheduler</span>  Successfully assigned dev/pod<span class=\"literal\">-initcontainer</span> to node1</span><br><span class=\"line\">  Normal  Pulled     <span class=\"number\">48</span>s   kubelet, node1     Container image <span class=\"string\">&quot;busybox:1.30&quot;</span> already present on machine</span><br><span class=\"line\">  Normal  Created    <span class=\"number\">48</span>s   kubelet, node1     Created container <span class=\"built_in\">test-mysql</span></span><br><span class=\"line\">  Normal  Started    <span class=\"number\">48</span>s   kubelet, node1     Started container <span class=\"built_in\">test-mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-initcontainer -n dev -w</span></span><br><span class=\"line\">NAME                             READY   STATUS     RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-initcontainer</span>                <span class=\"number\">0</span>/<span class=\"number\">1</span>     Init:<span class=\"number\">0</span>/<span class=\"number\">2</span>   <span class=\"number\">0</span>          <span class=\"number\">15</span>s</span><br><span class=\"line\">pod<span class=\"literal\">-initcontainer</span>                <span class=\"number\">0</span>/<span class=\"number\">1</span>     Init:<span class=\"number\">1</span>/<span class=\"number\">2</span>   <span class=\"number\">0</span>          <span class=\"number\">52</span>s</span><br><span class=\"line\">pod<span class=\"literal\">-initcontainer</span>                <span class=\"number\">0</span>/<span class=\"number\">1</span>     Init:<span class=\"number\">1</span>/<span class=\"number\">2</span>   <span class=\"number\">0</span>          <span class=\"number\">53</span>s</span><br><span class=\"line\">pod<span class=\"literal\">-initcontainer</span>                <span class=\"number\">0</span>/<span class=\"number\">1</span>     PodInitializing   <span class=\"number\">0</span>          <span class=\"number\">89</span>s</span><br><span class=\"line\">pod<span class=\"literal\">-initcontainer</span>                <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running           <span class=\"number\">0</span>          <span class=\"number\">90</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来新开一个shell，为当前服务器新增两个ip，观察pod的变化</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># ifconfig ens33:1 192.168.109.201 netmask 255.255.255.0 up</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># ifconfig ens33:2 192.168.109.202 netmask 255.255.255.0 up</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h3><p>钩子函数能够感知自身生命周期中的事件，并在相应的时刻到来时运行用户指定的程序代码。</p>\n<p>kubernetes在主容器的启动之后和停止之前提供了两个钩子函数：</p>\n<ul>\n<li>post start：容器创建之后执行，如果失败了会重启容器</li>\n<li>pre stop  ：容器终止之前执行，执行完成之后容器将成功终止，在其完成之前会阻塞删除容器的操作</li>\n</ul>\n<p>钩子处理器支持使用下面三种方式定义动作：</p>\n<ul>\n<li><p>Exec命令：在容器内执行一次命令</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\">  <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">    <span class=\"attr\">postStart:</span> </span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/tmp/healthy</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br></pre></td></tr></table></figure></li>\n<li><p>TCPSocket：在当前容器尝试访问指定的socket</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">……</span>      </span><br><span class=\"line\">  <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">    <span class=\"attr\">postStart:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br></pre></td></tr></table></figure></li>\n<li><p>HTTPGet：在当前容器中向某url发起http请求</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\">  <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">    <span class=\"attr\">postStart:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span> <span class=\"comment\">#URI地址</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span> <span class=\"comment\">#端口号</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.109</span><span class=\"number\">.100</span> <span class=\"comment\">#主机地址</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span> <span class=\"comment\">#支持的协议，http或者https</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来，以exec方式为例，演示下钩子函数的使用，创建pod-hook-exec.yaml文件，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-hook-exec</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">main-container</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">lifecycle:</span></span><br><span class=\"line\">      <span class=\"attr\">postStart:</span> </span><br><span class=\"line\">        <span class=\"attr\">exec:</span> <span class=\"comment\"># 在容器启动的时候执行一个命令，修改掉nginx的默认首页内容</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;echo postStart... &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">preStop:</span></span><br><span class=\"line\">        <span class=\"attr\">exec:</span> <span class=\"comment\"># 在容器停止之前停止nginx服务</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/usr/sbin/nginx&quot;</span>,<span class=\"string\">&quot;-s&quot;</span>,<span class=\"string\">&quot;quit&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-hook-exec.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-hook</span><span class=\"literal\">-exec</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods  pod-hook-exec -n dev -o wide</span></span><br><span class=\"line\">NAME           READY   STATUS     RESTARTS   AGE    IP            NODE    </span><br><span class=\"line\">pod<span class=\"literal\">-hook</span><span class=\"literal\">-exec</span>  <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running    <span class=\"number\">0</span>          <span class=\"number\">29</span>s    <span class=\"number\">10.244</span>.<span class=\"number\">2.48</span>   node2   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.244.2.48</span></span><br><span class=\"line\">postStart...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器探测\"><a href=\"#容器探测\" class=\"headerlink\" title=\"容器探测\"></a>容器探测</h3><p>​    容器探测用于检测容器中的应用实例是否正常工作，是保障业务可用性的一种传统机制。如果经过探测，实例的状态不符合预期，那么kubernetes就会把该问题实例” 摘除 “，不承担业务流量。kubernetes提供了两种探针来实现容器探测，分别是：</p>\n<ul>\n<li><p>liveness probes：存活性探针，用于检测应用实例当前是否处于正常运行状态，如果不是，k8s会重启容器</p>\n</li>\n<li><p>readiness probes：就绪性探针，用于检测应用实例当前是否可以接收请求，如果不能，k8s不会转发流量</p>\n</li>\n</ul>\n<blockquote>\n<p>livenessProbe 决定是否重启容器，readinessProbe 决定是否将请求转发给容器。</p>\n</blockquote>\n<p>上面两种探针目前均支持三种探测方式：</p>\n<ul>\n<li><p>Exec命令：在容器内执行一次命令，如果命令执行的退出码为0，则认为程序正常，否则不正常</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\">  <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">    <span class=\"attr\">exec:</span></span><br><span class=\"line\">      <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/tmp/healthy</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br></pre></td></tr></table></figure></li>\n<li><p>TCPSocket：将会尝试访问一个用户容器的端口，如果能够建立这条连接，则认为程序正常，否则不正常</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">……</span>      </span><br><span class=\"line\">  <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">    <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br></pre></td></tr></table></figure></li>\n<li><p>HTTPGet：调用容器内Web应用的URL，如果返回的状态码在200和399之间，则认为程序正常，否则不正常</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">……</span></span><br><span class=\"line\">  <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">    <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/</span> <span class=\"comment\">#URI地址</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span> <span class=\"comment\">#端口号</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"comment\">#主机地址</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span> <span class=\"comment\">#支持的协议，http或者https</span></span><br><span class=\"line\"><span class=\"string\">……</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>下面以liveness probes为例，做几个演示：</p>\n<p><strong>方式一：Exec</strong></p>\n<p>创建pod-liveness-exec.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-liveness-exec</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">exec:</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/cat&quot;</span>,<span class=\"string\">&quot;/tmp/hello.txt&quot;</span>] <span class=\"comment\"># 执行一个查看文件的命令</span></span><br></pre></td></tr></table></figure>\n\n<p> 创建pod，观察效果</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-liveness-exec.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-liveness</span><span class=\"literal\">-exec</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pods pod-liveness-exec -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">  Normal   Created    <span class=\"number\">20</span>s (x2 over <span class=\"number\">50</span>s)  kubelet, node1     Created container nginx</span><br><span class=\"line\">  Normal   Started    <span class=\"number\">20</span>s (x2 over <span class=\"number\">50</span>s)  kubelet, node1     Started container nginx</span><br><span class=\"line\">  Normal   Killing    <span class=\"number\">20</span>s                kubelet, node1     Container nginx failed liveness probe, will be restarted</span><br><span class=\"line\">  Warning  Unhealthy  <span class=\"number\">0</span>s (x5 over <span class=\"number\">40</span>s)   kubelet, node1     Liveness probe failed: <span class=\"built_in\">cat</span>: can<span class=\"string\">&#x27;t open &#x27;</span>/tmp/hello11.txt<span class=\"string\">&#x27;: No such file or directory</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\"># 观察上面的信息就会发现nginx容器启动之后就进行了健康检查</span></span><br><span class=\"line\"><span class=\"string\"># 检查失败之后，容器被kill掉，然后尝试进行重启（这是重启策略的作用，后面讲解）</span></span><br><span class=\"line\"><span class=\"string\"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span></span><br><span class=\"line\"><span class=\"string\">[root@master ~]# kubectl get pods pod-liveness-exec -n dev</span></span><br><span class=\"line\"><span class=\"string\">NAME                READY   STATUS             RESTARTS   AGE</span></span><br><span class=\"line\"><span class=\"string\">pod-liveness-exec   0/1     CrashLoopBackOff   2          3m19s</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 当然接下来，可以修改成一个存在的文件，比如/tmp/hello.txt，再试，结果就正常了......</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式二：TCPSocket</strong></p>\n<p>创建pod-liveness-tcpsocket.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-liveness-tcpsocket</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">tcpSocket:</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span> <span class=\"comment\"># 尝试访问8080端口</span></span><br></pre></td></tr></table></figure>\n\n<p> 创建pod，观察效果</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-liveness-tcpsocket.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-liveness</span><span class=\"literal\">-tcpsocket</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pods pod-liveness-tcpsocket -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">  Normal   Scheduled  <span class=\"number\">31</span>s                            default<span class=\"literal\">-scheduler</span>  Successfully assigned dev/pod<span class=\"literal\">-liveness</span><span class=\"literal\">-tcpsocket</span> to node2</span><br><span class=\"line\">  Normal   Pulled     &lt;invalid&gt;                      kubelet, node2     Container image <span class=\"string\">&quot;nginx:1.17.1&quot;</span> already present on machine</span><br><span class=\"line\">  Normal   Created    &lt;invalid&gt;                      kubelet, node2     Created container nginx</span><br><span class=\"line\">  Normal   Started    &lt;invalid&gt;                      kubelet, node2     Started container nginx</span><br><span class=\"line\">  Warning  Unhealthy  &lt;invalid&gt; (x2 over &lt;invalid&gt;)  kubelet, node2     Liveness probe failed: dial tcp <span class=\"number\">10.244</span>.<span class=\"number\">2.44</span>:<span class=\"number\">8080</span>: connect: connection refused</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 观察上面的信息，发现尝试访问8080端口,但是失败了</span></span><br><span class=\"line\"><span class=\"comment\"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-liveness-tcpsocket  -n dev</span></span><br><span class=\"line\">NAME                     READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-liveness</span><span class=\"literal\">-tcpsocket</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     CrashLoopBackOff   <span class=\"number\">2</span>          <span class=\"number\">3</span>m19s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然接下来，可以修改成一个可以访问的端口，比如80，再试，结果就正常了......</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>方式三：HTTPGet</strong></p>\n<p>创建pod-liveness-httpget.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-liveness-httpget</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>  <span class=\"comment\"># 其实就是访问http://127.0.0.1:80/hello  </span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span> <span class=\"comment\">#支持的协议，http或者https</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span> <span class=\"comment\">#端口号</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/hello</span> <span class=\"comment\">#URI地址</span></span><br></pre></td></tr></table></figure>\n\n<p> 创建pod，观察效果</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-liveness-httpget.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-liveness</span><span class=\"literal\">-httpget</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pod pod-liveness-httpget -n dev</span></span><br><span class=\"line\">.......</span><br><span class=\"line\">  Normal   Pulled     <span class=\"number\">6</span>s (x3 over <span class=\"number\">64</span>s)  kubelet, node1     Container image <span class=\"string\">&quot;nginx:1.17.1&quot;</span> already present on machine</span><br><span class=\"line\">  Normal   Created    <span class=\"number\">6</span>s (x3 over <span class=\"number\">64</span>s)  kubelet, node1     Created container nginx</span><br><span class=\"line\">  Normal   Started    <span class=\"number\">6</span>s (x3 over <span class=\"number\">63</span>s)  kubelet, node1     Started container nginx</span><br><span class=\"line\">  Warning  Unhealthy  <span class=\"number\">6</span>s (x6 over <span class=\"number\">56</span>s)  kubelet, node1     Liveness probe failed: HTTP probe failed with statuscode: <span class=\"number\">404</span></span><br><span class=\"line\">  Normal   Killing    <span class=\"number\">6</span>s (x2 over <span class=\"number\">36</span>s)  kubelet, node1     Container nginx failed liveness probe, will be restarted</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 观察上面信息，尝试访问路径，但是未找到,出现404错误</span></span><br><span class=\"line\"><span class=\"comment\"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-liveness-httpget -n dev</span></span><br><span class=\"line\">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-liveness</span><span class=\"literal\">-httpget</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">5</span>          <span class=\"number\">3</span>m17s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然接下来，可以修改成一个可以访问的路径path，比如/，再试，结果就正常了......</span></span><br></pre></td></tr></table></figure>\n\n<p>​    至此，已经使用liveness Probe演示了三种探测方式，但是查看livenessProbe的子属性，会发现除了这三种方式，还有一些其他的配置，在这里一并解释下：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl explain pod.spec.containers.livenessProbe</span></span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   exec &lt;Object&gt;  </span><br><span class=\"line\">   tcpSocket    &lt;Object&gt;</span><br><span class=\"line\">   httpGet      &lt;Object&gt;</span><br><span class=\"line\">   initialDelaySeconds  &lt;integer&gt;  <span class=\"comment\"># 容器启动后等待多少秒执行第一次探测</span></span><br><span class=\"line\">   timeoutSeconds       &lt;integer&gt;  <span class=\"comment\"># 探测超时时间。默认1秒，最小1秒</span></span><br><span class=\"line\">   periodSeconds        &lt;integer&gt;  <span class=\"comment\"># 执行探测的频率。默认是10秒，最小1秒</span></span><br><span class=\"line\">   failureThreshold     &lt;integer&gt;  <span class=\"comment\"># 连续探测失败多少次才被认定为失败。默认是3。最小值是1</span></span><br><span class=\"line\">   successThreshold     &lt;integer&gt;  <span class=\"comment\"># 连续探测成功多少次才被认定为成功。默认是1</span></span><br></pre></td></tr></table></figure>\n\n<p>下面稍微配置两个，演示下效果即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@master</span> <span class=\"string\">~</span>]<span class=\"comment\"># more pod-liveness-httpget.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-liveness-httpget</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span> </span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span> <span class=\"comment\"># 容器启动后30s开始探测</span></span><br><span class=\"line\">      <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span> <span class=\"comment\"># 探测超时时间为5s</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启策略\"><a href=\"#重启策略\" class=\"headerlink\" title=\"重启策略\"></a>重启策略</h3><p>​    在上一节中，一旦容器探测出现了问题，kubernetes就会对容器所在的Pod进行重启，其实这是由pod的重启策略决定的，pod的重启策略有 3 种，分别如下：</p>\n<ul>\n<li>Always ：容器失效时，自动重启该容器，这也是默认值。</li>\n<li>OnFailure ： 容器终止运行且退出码不为0时重启</li>\n<li>Never ： 不论状态为何，都不重启该容器</li>\n</ul>\n<p>​    重启策略适用于pod对象中的所有容器，首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作将由kubelet延迟一段时间后进行，且反复的重启操作的延迟时长以此为10s、20s、40s、80s、160s和300s，300s是最大延迟时长。</p>\n<p>创建pod-restartpolicy.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-restartpolicy</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-port</span></span><br><span class=\"line\">      <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">        <span class=\"attr\">scheme:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/hello</span></span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span> <span class=\"comment\"># 设置重启策略为Never</span></span><br></pre></td></tr></table></figure>\n\n<p>运行Pod测试</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-restartpolicy.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-restartpolicy</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod详情，发现nginx容器失败</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl  describe pods pod-restartpolicy  -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">  Warning  Unhealthy  <span class=\"number\">15</span>s (x3 over <span class=\"number\">35</span>s)  kubelet, node1     Liveness probe failed: HTTP probe failed with statuscode: <span class=\"number\">404</span></span><br><span class=\"line\">  Normal   Killing    <span class=\"number\">15</span>s                kubelet, node1     Container nginx failed liveness probe</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 多等一会，再观察pod的重启次数，发现一直是0，并未重启   </span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl  get pods pod-restartpolicy -n dev</span></span><br><span class=\"line\">NAME                   READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-restartpolicy</span>      <span class=\"number\">0</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>min42s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pod调度\"><a href=\"#Pod调度\" class=\"headerlink\" title=\"Pod调度\"></a>Pod调度</h2><p>​    在默认情况下，一个Pod在哪个Node节点上运行，是由Scheduler组件采用相应的算法计算出来的，这个过程是不受人工控制的。但是在实际使用中，这并不满足的需求，因为很多情况下，我们想控制某些Pod到达某些节点上，那么应该怎么做呢？这就要求了解kubernetes对Pod的调度规则，kubernetes提供了四大类调度方式：</p>\n<ul>\n<li>自动调度：运行在哪个节点上完全由Scheduler经过一系列的算法计算得出</li>\n<li>定向调度：NodeName、NodeSelector</li>\n<li>亲和性调度：NodeAffinity、PodAffinity、PodAntiAffinity</li>\n<li>污点（容忍）调度：Taints、Toleration</li>\n</ul>\n<h3 id=\"定向调度\"><a href=\"#定向调度\" class=\"headerlink\" title=\"定向调度\"></a>定向调度</h3><p>​    定向调度，指的是利用在pod上声明nodeName或者nodeSelector，以此将Pod调度到期望的node节点上。注意，这里的调度是强制的，这就意味着即使要调度的目标Node不存在，也会向上面进行调度，只不过pod运行失败而已。</p>\n<p><strong>NodeName</strong></p>\n<p>​    NodeName用于强制约束将Pod调度到指定的Name的Node节点上。这种方式，其实是直接跳过Scheduler的调度逻辑，直接将Pod调度到指定名称的节点。</p>\n<p>接下来，实验一下：创建一个pod-nodename.yaml文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodename</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">nodeName:</span> <span class=\"string\">node1</span> <span class=\"comment\"># 指定调度到node1节点上</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodename.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodename</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看Pod调度到NODE属性，确实是调度到了node1节点上</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-nodename -n dev -o wide</span></span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE   IP            NODE      ......</span><br><span class=\"line\">pod<span class=\"literal\">-nodename</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">56</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.87</span>   node1     ......   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来，删除pod，修改nodeName的值为node3（并没有node3节点）</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pod-nodename.yaml</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;pod-nodename&quot;</span> deleted</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># vim pod-nodename.yaml</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodename.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodename</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次查看，发现已经向Node3节点调度，但是由于不存在node3节点，所以pod无法正常运行</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-nodename -n dev -o wide</span></span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE   IP       NODE    ......</span><br><span class=\"line\">pod<span class=\"literal\">-nodename</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">6</span>s    &lt;none&gt;   node3   ......           </span><br></pre></td></tr></table></figure>\n\n<p><strong>NodeSelector</strong></p>\n<p>​    NodeSelector用于将pod调度到添加了指定标签的node节点上。它是通过kubernetes的label-selector机制实现的，也就是说，在pod创建之前，会由scheduler使用MatchNodeSelector调度策略进行label匹配，找出目标node，然后将pod调度到目标节点，该匹配规则是强制约束。</p>\n<p>接下来，实验一下：</p>\n<p>1 首先分别为node节点添加标签</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl label nodes node1 nodeenv=pro</span></span><br><span class=\"line\">node/node2 labeled</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl label nodes node2 nodeenv=test</span></span><br><span class=\"line\">node/node2 labeled</span><br></pre></td></tr></table></figure>\n\n<p>2 创建一个pod-nodeselector.yaml文件，并使用它创建Pod</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodeselector</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span> </span><br><span class=\"line\">    <span class=\"attr\">nodeenv:</span> <span class=\"string\">pro</span> <span class=\"comment\"># 指定调度到具有nodeenv=pro标签的节点上</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodeselector.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodeselector</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看Pod调度到NODE属性，确实是调度到了node1节点上</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-nodeselector -n dev -o wide</span></span><br><span class=\"line\">NAME               READY   STATUS    RESTARTS   AGE     IP          NODE    ......</span><br><span class=\"line\">pod<span class=\"literal\">-nodeselector</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">47</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.87</span>   node1   ......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来，删除pod，修改nodeSelector的值为nodeenv: xxxx（不存在打有此标签的节点）</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pod-nodeselector.yaml</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;pod-nodeselector&quot;</span> deleted</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># vim pod-nodeselector.yaml</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodeselector.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodeselector</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次查看，发现pod无法正常运行,Node的值为none</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME               READY   STATUS    RESTARTS   AGE     IP       NODE    </span><br><span class=\"line\">pod<span class=\"literal\">-nodeselector</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">2</span>m20s   &lt;none&gt;   &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看详情,发现node selector匹配失败的提示</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pods pod-nodeselector -n dev</span></span><br><span class=\"line\">.......</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>     Reason            Age        From               Message</span><br><span class=\"line\">  ----     ------            ----       ----               -------</span><br><span class=\"line\">  Warning  FailedScheduling  &lt;unknown&gt;  default<span class=\"literal\">-scheduler</span>  <span class=\"number\">0</span>/<span class=\"number\">3</span> nodes are available: <span class=\"number\">3</span> node(s) didn<span class=\"string\">&#x27;t match node selector.</span></span><br><span class=\"line\"><span class=\"string\">  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn&#x27;</span>t match node selector.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"亲和性调度\"><a href=\"#亲和性调度\" class=\"headerlink\" title=\"亲和性调度\"></a>亲和性调度</h3><p>​    上一节，介绍了两种定向调度的方式，使用起来非常方便，但是也有一定的问题，那就是如果没有满足条件的Node，那么Pod将不会被运行，即使在集群中还有可用Node列表也不行，这就限制了它的使用场景。</p>\n<p>​    基于上面的问题，kubernetes还提供了一种亲和性调度（Affinity）。它在NodeSelector的基础之上的进行了扩展，可以通过配置的形式，实现优先选择满足条件的Node进行调度，如果没有，也可以调度到不满足条件的节点上，使调度更加灵活。</p>\n<p>Affinity主要分为三类：</p>\n<ul>\n<li><p>nodeAffinity(node亲和性）: 以node为目标，解决pod可以调度到哪些node的问题</p>\n</li>\n<li><p>podAffinity(pod亲和性) :  以pod为目标，解决pod可以和哪些已存在的pod部署在同一个拓扑域中的问题</p>\n</li>\n<li><p>podAntiAffinity(pod反亲和性) :  以pod为目标，解决pod不能和哪些已存在pod部署在同一个拓扑域中的问题</p>\n</li>\n</ul>\n<blockquote>\n<p>关于亲和性(反亲和性)使用场景的说明：</p>\n<p><strong>亲和性</strong>：如果两个应用频繁交互，那就有必要利用亲和性让两个应用的尽可能的靠近，这样可以减少因网络通信而带来的性能损耗。</p>\n<p><strong>反亲和性</strong>：当应用的采用多副本部署时，有必要采用反亲和性让各个应用实例打散分布在各个node上，这样可以提高服务的高可用性。</p>\n</blockquote>\n<p><strong>NodeAffinity</strong></p>\n<p>首先来看一下<code>NodeAffinity</code>的可配置项：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod.spec.affinity.nodeAffinity</span><br><span class=\"line\">  requiredDuringSchedulingIgnoredDuringExecution  Node节点必须满足指定的所有规则才可以，相当于硬限制</span><br><span class=\"line\"><span class=\"code\">    nodeSelectorTerms  节点选择列表</span></span><br><span class=\"line\"><span class=\"code\">      matchFields   按节点字段列出的节点选择器要求列表</span></span><br><span class=\"line\"><span class=\"code\">      matchExpressions   按节点标签列出的节点选择器要求列表(推荐)</span></span><br><span class=\"line\"><span class=\"code\">        key    键</span></span><br><span class=\"line\"><span class=\"code\">        values 值</span></span><br><span class=\"line\"><span class=\"code\">        operator 关系符 支持Exists, DoesNotExist, In, NotIn, Gt, Lt</span></span><br><span class=\"line\"><span class=\"code\">  preferredDuringSchedulingIgnoredDuringExecution 优先调度到满足指定的规则的Node，相当于软限制 (倾向)</span></span><br><span class=\"line\"><span class=\"code\">    preference   一个节点选择器项，与相应的权重相关联</span></span><br><span class=\"line\"><span class=\"code\">      matchFields   按节点字段列出的节点选择器要求列表</span></span><br><span class=\"line\"><span class=\"code\">      matchExpressions   按节点标签列出的节点选择器要求列表(推荐)</span></span><br><span class=\"line\"><span class=\"code\">        key    键</span></span><br><span class=\"line\"><span class=\"code\">        values 值</span></span><br><span class=\"line\"><span class=\"code\">        operator 关系符 支持In, NotIn, Exists, DoesNotExist, Gt, Lt</span></span><br><span class=\"line\"><span class=\"code\">\tweight 倾向权重，在范围1-100。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">关系符的使用说明:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> matchExpressions:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> key: nodeenv              # 匹配存在标签的key为nodeenv的节点</span><br><span class=\"line\"><span class=\"code\">    operator: Exists</span></span><br><span class=\"line\"><span class=\"code\">  - key: nodeenv              # 匹配标签的key为nodeenv,且value是&quot;xxx&quot;或&quot;yyy&quot;的节点</span></span><br><span class=\"line\"><span class=\"code\">    operator: In</span></span><br><span class=\"line\"><span class=\"code\">    values: [&quot;xxx&quot;,&quot;yyy&quot;]</span></span><br><span class=\"line\"><span class=\"code\">  - key: nodeenv              # 匹配标签的key为nodeenv,且value大于&quot;xxx&quot;的节点</span></span><br><span class=\"line\"><span class=\"code\">    operator: Gt</span></span><br><span class=\"line\"><span class=\"code\">    values: &quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来首先演示一下<code>requiredDuringSchedulingIgnoredDuringExecution</code> ,</p>\n<p>创建pod-nodeaffinity-required.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodeaffinity-required</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span>  <span class=\"comment\">#亲和性设置</span></span><br><span class=\"line\">    <span class=\"attr\">nodeAffinity:</span> <span class=\"comment\">#设置node亲和性</span></span><br><span class=\"line\">      <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\"># 硬限制</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># 匹配env的值在[&quot;xxx&quot;,&quot;yyy&quot;]中的标签</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">nodeenv</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span> [<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;yyy&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodeaffinity-required.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodeaffinity</span><span class=\"literal\">-required</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod状态 （运行失败）</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-nodeaffinity-required -n dev -o wide</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE   IP       NODE    ...... </span><br><span class=\"line\">pod<span class=\"literal\">-nodeaffinity</span><span class=\"literal\">-required</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">16</span>s   &lt;none&gt;   &lt;none&gt;  ......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod的详情</span></span><br><span class=\"line\"><span class=\"comment\"># 发现调度失败，提示node选择失败</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pod pod-nodeaffinity-required -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">  Warning  FailedScheduling  &lt;unknown&gt;  default<span class=\"literal\">-scheduler</span>  <span class=\"number\">0</span>/<span class=\"number\">3</span> nodes are available: <span class=\"number\">3</span> node(s) didn<span class=\"string\">&#x27;t match node selector.</span></span><br><span class=\"line\"><span class=\"string\">  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn&#x27;</span>t match node selector.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#接下来，停止pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pod-nodeaffinity-required.yaml</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;pod-nodeaffinity-required&quot;</span> deleted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改文件，将values: [&quot;xxx&quot;,&quot;yyy&quot;]------&gt; [&quot;pro&quot;,&quot;yyy&quot;]</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># vim pod-nodeaffinity-required.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次启动</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodeaffinity-required.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodeaffinity</span><span class=\"literal\">-required</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时查看，发现调度成功，已经将pod调度到了node1上</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-nodeaffinity-required -n dev -o wide</span></span><br><span class=\"line\">NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE  ...... </span><br><span class=\"line\">pod<span class=\"literal\">-nodeaffinity</span><span class=\"literal\">-required</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">11</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.89</span>   node1 ......</span><br></pre></td></tr></table></figure>\n\n<p>接下来再演示一下<code>requiredDuringSchedulingIgnoredDuringExecution</code> ,</p>\n<p>创建pod-nodeaffinity-preferred.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-nodeaffinity-preferred</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span>  <span class=\"comment\">#亲和性设置</span></span><br><span class=\"line\">    <span class=\"attr\">nodeAffinity:</span> <span class=\"comment\">#设置node亲和性</span></span><br><span class=\"line\">      <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\"># 软限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">preference:</span></span><br><span class=\"line\">          <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># 匹配env的值在[&quot;xxx&quot;,&quot;yyy&quot;]中的标签(当前环境没有)</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">nodeenv</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span> [<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;yyy&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-nodeaffinity-preferred.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-nodeaffinity</span><span class=\"literal\">-preferred</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod状态 （运行成功）</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-nodeaffinity-preferred -n dev</span></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-nodeaffinity</span><span class=\"literal\">-preferred</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">40</span>s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">NodeAffinity规则设置的注意事项：</span><br><span class=\"line\"><span class=\"code\">    1 如果同时定义了nodeSelector和nodeAffinity，那么必须两个条件都得到满足，Pod才能运行在指定的Node上</span></span><br><span class=\"line\"><span class=\"code\">    2 如果nodeAffinity指定了多个nodeSelectorTerms，那么只需要其中一个能够匹配成功即可</span></span><br><span class=\"line\"><span class=\"code\">    3 如果一个nodeSelectorTerms中有多个matchExpressions ，则一个节点必须满足所有的才能匹配成功</span></span><br><span class=\"line\"><span class=\"code\">    4 如果一个pod所在的Node在Pod运行期间其标签发生了改变，不再符合该Pod的节点亲和性需求，则系统将忽略此变化(意思是亲和性只有在调度的时候才会生效，当调度已完成，其他match标签发生变化，pod也不会再根据新的标签进行移动)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>PodAffinity</strong></p>\n<p>PodAffinity主要实现以运行的Pod为参照，实现让新创建的Pod跟参照pod在一个区域的功能。</p>\n<p>首先来看一下<code>PodAffinity</code>的可配置项：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">pod.spec.affinity.podAffinity</span><br><span class=\"line\">  requiredDuringSchedulingIgnoredDuringExecution  硬限制</span><br><span class=\"line\"><span class=\"code\">    namespaces       指定参照pod的namespace</span></span><br><span class=\"line\"><span class=\"code\">    topologyKey      指定调度作用域</span></span><br><span class=\"line\"><span class=\"code\">    labelSelector    标签选择器</span></span><br><span class=\"line\"><span class=\"code\">      matchExpressions  按节点标签列出的节点选择器要求列表(推荐)</span></span><br><span class=\"line\"><span class=\"code\">        key    键</span></span><br><span class=\"line\"><span class=\"code\">        values 值</span></span><br><span class=\"line\"><span class=\"code\">        operator 关系符 支持In, NotIn, Exists, DoesNotExist.</span></span><br><span class=\"line\"><span class=\"code\">      matchLabels    指多个matchExpressions映射的内容</span></span><br><span class=\"line\"><span class=\"code\">  preferredDuringSchedulingIgnoredDuringExecution 软限制</span></span><br><span class=\"line\"><span class=\"code\">    podAffinityTerm  选项</span></span><br><span class=\"line\"><span class=\"code\">      namespaces      </span></span><br><span class=\"line\"><span class=\"code\">      topologyKey</span></span><br><span class=\"line\"><span class=\"code\">      labelSelector</span></span><br><span class=\"line\"><span class=\"code\">        matchExpressions  </span></span><br><span class=\"line\"><span class=\"code\">          key    键</span></span><br><span class=\"line\"><span class=\"code\">          values 值</span></span><br><span class=\"line\"><span class=\"code\">          operator</span></span><br><span class=\"line\"><span class=\"code\">        matchLabels </span></span><br><span class=\"line\"><span class=\"code\">    weight 倾向权重，在范围1-100</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">topologyKey用于指定调度时作用域,例如:</span><br><span class=\"line\"><span class=\"code\">    如果指定为kubernetes.io/hostname，那就是以Node节点为区分范围, 即调度到同一node节点</span></span><br><span class=\"line\"><span class=\"code\">    如果指定为beta.kubernetes.io/os,则以Node节点的操作系统类型来区分</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，演示下<code>requiredDuringSchedulingIgnoredDuringExecution</code>,</p>\n<p>1）首先创建一个参照Pod，pod-podaffinity-target.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-podaffinity-target</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">podenv:</span> <span class=\"string\">pro</span> <span class=\"comment\">#设置标签</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">nodeName:</span> <span class=\"string\">node1</span> <span class=\"comment\"># 将目标pod名确指定到node1上</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动目标pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-podaffinity-target.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-target</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod状况</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods  pod-podaffinity-target -n dev</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-target</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">4</span>s</span><br></pre></td></tr></table></figure>\n\n<p>2）创建pod-podaffinity-required.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-podaffinity-required</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span>  <span class=\"comment\">#亲和性设置</span></span><br><span class=\"line\">    <span class=\"attr\">podAffinity:</span> <span class=\"comment\">#设置pod亲和性</span></span><br><span class=\"line\">      <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\"># 硬限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">          <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># 匹配env的值在[&quot;xxx&quot;,&quot;yyy&quot;]中的标签</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">podenv</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span> [<span class=\"string\">&quot;xxx&quot;</span>,<span class=\"string\">&quot;yyy&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置表达的意思是：新Pod必须要与拥有标签podenv=xxx或者podenv=yyy的pod在同一Node上，显然现在没有这样pod，接下来，运行测试一下。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-podaffinity-required.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-required</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod状态，发现未运行</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-podaffinity-required -n dev</span></span><br><span class=\"line\">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-required</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">9</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看详细信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe pods pod-podaffinity-required  -n dev</span></span><br><span class=\"line\">......</span><br><span class=\"line\">Events:</span><br><span class=\"line\">  <span class=\"built_in\">Type</span>     Reason            Age        From               Message</span><br><span class=\"line\">  ----     ------            ----       ----               -------</span><br><span class=\"line\">  Warning  FailedScheduling  &lt;unknown&gt;  default<span class=\"literal\">-scheduler</span>  <span class=\"number\">0</span>/<span class=\"number\">3</span> nodes are available: <span class=\"number\">2</span> node(s) didn<span class=\"string\">&#x27;t match pod affinity rules, 1 node(s) had taints that the pod didn&#x27;</span>t tolerate.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来修改  values: [&quot;xxx&quot;,&quot;yyy&quot;]-----&gt;values:[&quot;pro&quot;,&quot;yyy&quot;]</span></span><br><span class=\"line\"><span class=\"comment\"># 意思是：新Pod必须要与拥有标签podenv=xxx或者podenv=yyy的pod在同一Node上</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># vim pod-podaffinity-required.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后重新创建pod，查看效果</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f  pod-podaffinity-required.yaml</span></span><br><span class=\"line\">pod <span class=\"string\">&quot;pod-podaffinity-required&quot;</span> deleted</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-podaffinity-required.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-required</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发现此时Pod运行正常</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-podaffinity-required -n dev</span></span><br><span class=\"line\">NAME                       READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class=\"line\">pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-required</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>s    &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p>关于<code>PodAffinity</code>的 <code>preferredDuringSchedulingIgnoredDuringExecution</code>，这里不再演示。</p>\n<p><strong>PodAntiAffinity</strong></p>\n<p>PodAntiAffinity主要实现以运行的Pod为参照，让新创建的Pod跟参照pod不在一个区域中的功能。</p>\n<p>它的配置方式和选项跟PodAffinty是一样的，这里不再做详细解释，直接做一个测试案例。</p>\n<p>1）继续使用上个案例中目标pod</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide --show-labels</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE    LABELS</span><br><span class=\"line\">pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-required</span> <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">3</span>m29s   <span class=\"number\">10.244</span>.<span class=\"number\">1.38</span>   node1   &lt;none&gt;     </span><br><span class=\"line\">pod<span class=\"literal\">-podaffinity</span><span class=\"literal\">-target</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">9</span>m25s   <span class=\"number\">10.244</span>.<span class=\"number\">1.37</span>   node1   podenv=pro</span><br></pre></td></tr></table></figure>\n\n<p>2）创建pod-podantiaffinity-required.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-podantiaffinity-required</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">affinity:</span>  <span class=\"comment\">#亲和性设置</span></span><br><span class=\"line\">    <span class=\"attr\">podAntiAffinity:</span> <span class=\"comment\">#设置pod亲和性(反亲和性)</span></span><br><span class=\"line\">      <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span> <span class=\"comment\"># 硬限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">labelSelector:</span></span><br><span class=\"line\">          <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># 匹配podenv的值在[&quot;pro&quot;]中的标签</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">podenv</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span> [<span class=\"string\">&quot;pro&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">topologyKey:</span> <span class=\"string\">kubernetes.io/hostname</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置表达的意思是：新Pod必须要与拥有标签podenv=pro的pod不在同一Node上，运行测试一下。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-podantiaffinity-required.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-podantiaffinity</span><span class=\"literal\">-required</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\"><span class=\"comment\"># 发现调度到了node2上</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods pod-podantiaffinity-required -n dev -o wide</span></span><br><span class=\"line\">NAME                           READY   STATUS    RESTARTS   AGE   IP            NODE   .. </span><br><span class=\"line\">pod<span class=\"literal\">-podantiaffinity</span><span class=\"literal\">-required</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">30</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.96</span>   node2  ..</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"污点和容忍\"><a href=\"#污点和容忍\" class=\"headerlink\" title=\"污点和容忍\"></a>污点和容忍</h3><p><strong>污点（Taints）</strong></p>\n<p>​    前面的调度方式都是站在Pod的角度上，通过在Pod上添加属性，来确定Pod是否要调度到指定的Node上，其实我们也可以站在Node的角度上，通过在Node上添加<strong>污点</strong>属性，来决定是否允许Pod调度过来。</p>\n<p>​    Node被设置上污点之后就和Pod之间存在了一种相斥的关系，进而拒绝Pod调度进来，甚至可以将已经存在的Pod驱逐出去。</p>\n<p>污点的格式为：<code>key=value:effect</code>, key和value是污点的标签，effect描述污点的作用，支持如下三个选项：</p>\n<ul>\n<li>PreferNoSchedule：kubernetes将尽量避免把Pod调度到具有该污点的Node上，除非没有其他节点可调度</li>\n<li>NoSchedule：kubernetes将不会把Pod调度到具有该污点的Node上，但不会影响当前Node上已存在的Pod</li>\n<li>NoExecute：kubernetes将不会把Pod调度到具有该污点的Node上，同时也会将Node上已存在的Pod驱离</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day3/k8s_day3/image-20200605021831545.png\" alt=\"image-20200605021606508\" style=\"border:1px solid\">\n\n<p>使用kubectl设置和去除污点的命令示例如下：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置污点</span></span><br><span class=\"line\">kubectl taint nodes node1 key=value:effect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 去除污点</span></span><br><span class=\"line\">kubectl taint nodes node1 key:effect-</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 去除所有污点</span></span><br><span class=\"line\">kubectl taint nodes node1 key-</span><br></pre></td></tr></table></figure>\n\n<p>接下来，演示下污点的效果：</p>\n<ol>\n<li>准备节点node1（为了演示效果更加明显，暂时停止node2节点）</li>\n<li>为node1节点设置一个污点: <code>tag=heima:PreferNoSchedule</code>；然后创建pod1( pod1 可以 )</li>\n<li>修改为node1节点设置一个污点: <code>tag=heima:NoSchedule</code>；然后创建pod2( pod1 正常  pod2 失败 )</li>\n<li>修改为node1节点设置一个污点: <code>tag=heima:NoExecute</code>；然后创建pod3 ( 3个pod都失败 )</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为node1设置污点(PreferNoSchedule)</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl taint nodes node1 tag=heima:PreferNoSchedule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pod1</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl run taint1 --image=nginx:1.17.1 -n dev</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE     IP           NODE   </span><br><span class=\"line\">taint1<span class=\"literal\">-7665f7fd85</span><span class=\"literal\">-574h4</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>m24s   <span class=\"number\">10.244</span>.<span class=\"number\">1.59</span>   node1    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为node1设置污点(取消PreferNoSchedule，设置NoSchedule)</span></span><br><span class=\"line\"><span class=\"comment\"># tag:PreferNoSchedule-  “—”代表要取消污点</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl taint nodes node1 tag:PreferNoSchedule-</span></span><br><span class=\"line\">node/node1 untainted</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl taint nodes node1 tag=heima:NoSchedule</span></span><br><span class=\"line\">node/node1 tainted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pod2</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl run taint2 --image=nginx:1.17.1 -n dev</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods taint2 -n dev -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE     IP            NODE</span><br><span class=\"line\">taint1<span class=\"literal\">-7665f7fd85</span><span class=\"literal\">-574h4</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>m24s   <span class=\"number\">10.244</span>.<span class=\"number\">1.59</span>   node1 </span><br><span class=\"line\">taint2<span class=\"literal\">-544694789</span><span class=\"literal\">-6zmlf</span>    <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">21</span>s     &lt;none&gt;        &lt;none&gt;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为node1设置污点(取消NoSchedule，设置NoExecute)</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl taint nodes node1 tag:NoSchedule-</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl taint nodes node1 tag=heima:NoExecute</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建pod3</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl run taint3 --image=nginx:1.17.1 -n dev</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED </span><br><span class=\"line\">taint1<span class=\"literal\">-7665f7fd85</span><span class=\"literal\">-htkmp</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">35</span>s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;    </span><br><span class=\"line\">taint2<span class=\"literal\">-544694789</span><span class=\"literal\">-bn7wb</span>    <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">35</span>s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;     </span><br><span class=\"line\">taint3<span class=\"literal\">-6d78dbd749</span><span class=\"literal\">-tktkq</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">6</span>s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;     </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">小提示：</span><br><span class=\"line\"><span class=\"code\">    使用kubeadm搭建的集群，默认就会给master节点添加一个污点标记,所以pod就不会调度到master节点上.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>容忍（Toleration）</strong></p>\n<p>​    上面介绍了污点的作用，我们可以在node上添加污点用于拒绝pod调度上来，但是如果就是想将一个pod调度到一个有污点的node上去，这时候应该怎么做呢？这就要使用到<strong>容忍</strong>。</p>\n<p><img src=\"/2021/12/01/K8S/day3/k8s_day3/image-20200514095913741.png\" alt=\"image-20200514095913741\"></p>\n<blockquote>\n<p>污点就是拒绝，容忍就是忽略，Node通过污点拒绝pod调度上去，Pod通过容忍忽略拒绝</p>\n</blockquote>\n<p>下面先通过一个案例看下效果：</p>\n<ol>\n<li>上一小节，已经在node1节点上打上了<code>NoExecute</code>的污点，此时pod是调度不上去的</li>\n<li>本小节，可以通过给pod添加容忍，然后将其调度上去</li>\n</ol>\n<p>创建pod-toleration.yaml,内容如下 </p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-toleration</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">  <span class=\"attr\">tolerations:</span>      <span class=\"comment\"># 添加容忍</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">&quot;tag&quot;</span>        <span class=\"comment\"># 要容忍的污点的key</span></span><br><span class=\"line\">    <span class=\"attr\">operator:</span> <span class=\"string\">&quot;Equal&quot;</span> <span class=\"comment\"># 操作符</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">&quot;heima&quot;</span>    <span class=\"comment\"># 容忍的污点的value</span></span><br><span class=\"line\">    <span class=\"attr\">effect:</span> <span class=\"string\">&quot;NoExecute&quot;</span>   <span class=\"comment\"># 添加容忍的规则，这里必须和标记的污点规则相同</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加容忍之前的pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME             READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED </span><br><span class=\"line\">pod<span class=\"literal\">-toleration</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">3</span>s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加容忍之后的pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME             READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED</span><br><span class=\"line\">pod<span class=\"literal\">-toleration</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">3</span>s    <span class=\"number\">10.244</span>.<span class=\"number\">1.62</span>   node1   &lt;none&gt;        </span><br></pre></td></tr></table></figure>\n\n<p>下面看一下容忍的详细配置:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl explain pod.spec.tolerations</span></span><br><span class=\"line\">......</span><br><span class=\"line\">FIELDS:</span><br><span class=\"line\">   key       <span class=\"comment\"># 对应着要容忍的污点的键，空意味着匹配所有的键</span></span><br><span class=\"line\">   value     <span class=\"comment\"># 对应着要容忍的污点的值</span></span><br><span class=\"line\">   operator  <span class=\"comment\"># key-value的运算符，支持Equal和Exists（默认）</span></span><br><span class=\"line\">   effect    <span class=\"comment\"># 对应污点的effect，空意味着匹配所有影响</span></span><br><span class=\"line\">   tolerationSeconds   <span class=\"comment\"># 容忍时间, 当effect为NoExecute时生效，表示pod在Node上的停留时间</span></span><br></pre></td></tr></table></figure>\n\n","categories":["k8s"],"tags":["k8s 教程"]},{"title":"k8s教程day5-数据存储、安全认证和dashboard","url":"/2021/12/01/K8S/day5/k8s_day5/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>k8s 课程规划<br><img src=\"https://user-images.githubusercontent.com/28568478/144197771-e2ed53bf-bb06-46a8-af7b-8ac948fc2cf1.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"第八章-数据存储\"><a href=\"#第八章-数据存储\" class=\"headerlink\" title=\"第八章 数据存储\"></a>第八章 数据存储</h1><p>​    在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器的数据，kubernetes引入了Volume的概念。</p>\n<p>​    Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命容器不与Pod中单个容器的生命周期相关，当容器终止或者重启时，Volume中的数据也不会丢失。</p>\n<p>kubernetes的Volume支持多种类型，比较常见的有下面几个：</p>\n<ul>\n<li>简单存储：EmptyDir、HostPath、NFS</li>\n<li>高级存储：PV、PVC</li>\n<li>配置存储：ConfigMap、Secret</li>\n</ul>\n<h2 id=\"基本存储\"><a href=\"#基本存储\" class=\"headerlink\" title=\"基本存储\"></a>基本存储</h2><h3 id=\"EmptyDir\"><a href=\"#EmptyDir\" class=\"headerlink\" title=\"EmptyDir\"></a>EmptyDir</h3><p>​    EmptyDir是最基础的Volume类型，一个EmptyDir就是Host上的一个空目录。</p>\n<p>​    EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时， EmptyDir中的数据也会被永久删除。 EmptyDir用途如下：</p>\n<ul>\n<li><p>临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留</p>\n</li>\n<li><p>一个容器需要从另一个容器中获取数据的目录（多容器共享目录）</p>\n</li>\n</ul>\n<p>接下来，通过一个容器之间文件共享的案例来使用一下EmptyDir。</p>\n<p>​    在一个Pod中准备两个容器nginx和busybox，然后声明一个Volume分别挂在到两个容器的目录中，然后nginx容器负责向Volume中写日志，busybox中通过命令将日志内容读到控制台。</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200413174713773.png\" style=\"zoom:80%;border:solid 1px\">\n\n<p>创建一个volume-emptydir.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">volume-emptydir</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.14-alpine</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>  <span class=\"comment\"># 将logs-volume挂在到nginx容器中，对应的目录为 /var/log/nginx</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/nginx</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;tail -f /logs/access.log&quot;</span>] <span class=\"comment\"># 初始命令，动态读取指定文件中内容</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span>  <span class=\"comment\"># 将logs-volume 挂在到busybox容器中，对应的目录为 /logs</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/logs</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> <span class=\"comment\"># 声明volume， name为logs-volume，类型为emptyDir</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">    <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f volume-emptydir.yaml</span></span><br><span class=\"line\">pod/volume<span class=\"literal\">-emptydir</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods volume-emptydir -n dev -o wide</span></span><br><span class=\"line\">NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE   ...... </span><br><span class=\"line\">volume<span class=\"literal\">-emptydir</span>   <span class=\"number\">2</span>/<span class=\"number\">2</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">97</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.100</span>   node1  ......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过podIp访问nginx</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.244.1.100</span></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过kubectl logs命令查看指定容器的标准输出</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl logs -f volume-emptydir -n dev -c busybox</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">0.0</span> - - [<span class=\"number\">13</span>/<span class=\"type\">Apr</span>/<span class=\"number\">2020</span>:<span class=\"number\">10</span>:<span class=\"number\">58</span>:<span class=\"number\">47</span> +<span class=\"number\">0000</span>] <span class=\"string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">612</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&quot;curl/7.29.0&quot;</span> <span class=\"string\">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HostPath\"><a href=\"#HostPath\" class=\"headerlink\" title=\"HostPath\"></a>HostPath</h3><p>​    上节课提到，EmptyDir中数据不会被持久化，它会随着Pod的结束而销毁，如果想简单的将数据持久化到主机中，可以选择HostPath。</p>\n<p>​    HostPath就是将Node主机中一个实际目录挂在到Pod中，以供容器使用，这样的设计就可以保证Pod销毁了，但是数据依据可以存在于Node主机上。</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200413214031331.png\" style=\"zoom:100%;border:1px solid\">\n\n<p>创建一个volume-hostpath.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">volume-hostpath</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/nginx</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;tail -f /logs/access.log&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/logs</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">    <span class=\"attr\">hostPath:</span> </span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/root/logs</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">DirectoryOrCreate</span>  <span class=\"comment\"># 目录存在就使用，不存在就先创建后使用</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">关于type的值的一点说明：</span><br><span class=\"line\"><span class=\"code\">\tDirectoryOrCreate 目录存在就使用，不存在就先创建后使用</span></span><br><span class=\"line\"><span class=\"code\">\tDirectory\t目录必须存在</span></span><br><span class=\"line\"><span class=\"code\">\tFileOrCreate  文件存在就使用，不存在就先创建后使用</span></span><br><span class=\"line\"><span class=\"code\">\tFile 文件必须存在\t</span></span><br><span class=\"line\"><span class=\"code\">    Socket\tunix套接字必须存在</span></span><br><span class=\"line\"><span class=\"code\">\tCharDevice\t字符设备必须存在</span></span><br><span class=\"line\"><span class=\"code\">\tBlockDevice 块设备必须存在</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f volume-hostpath.yaml</span></span><br><span class=\"line\">pod/volume<span class=\"literal\">-hostpath</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods volume-hostpath -n dev -o wide</span></span><br><span class=\"line\">NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE   ......</span><br><span class=\"line\">pod<span class=\"literal\">-volume</span><span class=\"literal\">-hostpath</span>   <span class=\"number\">2</span>/<span class=\"number\">2</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">16</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.104</span>   node1  ......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#访问nginx</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.244.1.104</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来就可以去host的/root/logs目录下查看存储的文件了</span></span><br><span class=\"line\"><span class=\"comment\">###  注意: 下面的操作需要到Pod所在的节点运行（案例中是node1）</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">node1</span> ~]<span class=\"comment\"># ls /root/logs/</span></span><br><span class=\"line\">access.log  error.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同样的道理，如果在此目录下创建一个文件，到容器中也是可以看到的</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h3><p>​    HostPath可以解决数据持久化的问题，但是一旦Node节点故障了，Pod如果转移到了别的节点，又会出现问题了，此时需要准备单独的网络存储系统，比较常用的用NFS、CIFS。</p>\n<p>​    NFS是一个网络文件存储系统，可以搭建一台NFS服务器，然后将Pod中的存储直接连接到NFS系统上，这样的话，无论Pod在节点上怎么转移，只要Node跟NFS的对接没问题，数据就可以成功访问。</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200413215133559.png\" style=\"zoom:100%;border:1px solid\">\n\n<p>1）首先要准备nfs的服务器，这里为了简单，直接是master节点做nfs服务器</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在master上安装nfs服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum install nfs-utils -y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 准备一个共享目录</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># mkdir /root/data/nfs -pv</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将共享目录以读写权限暴露给192.168.109.0/24网段中的所有主机</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># vim /etc/exports</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># more /etc/exports</span></span><br><span class=\"line\">/root/<span class=\"keyword\">data</span>/nfs     <span class=\"number\">192.168</span>.<span class=\"number\">109.0</span>/<span class=\"number\">24</span>(rw,no_root_squash)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动nfs服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># systemctl start nfs</span></span><br></pre></td></tr></table></figure>\n\n<p>2）接下来，要在的每个node节点上都安装下nfs，这样的目的是为了node节点可以驱动nfs设备</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在node上安装nfs服务，注意不需要启动</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum install nfs-utils -y</span></span><br></pre></td></tr></table></figure>\n\n<p>3）接下来，就可以编写pod的配置文件了，创建volume-nfs.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">volume-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/nginx</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;tail -f /logs/access.log&quot;</span>] </span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/logs</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">logs-volume</span></span><br><span class=\"line\">    <span class=\"attr\">nfs:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.109</span><span class=\"number\">.100</span>  <span class=\"comment\">#nfs服务器地址</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/root/data/nfs</span> <span class=\"comment\">#共享文件路径</span></span><br></pre></td></tr></table></figure>\n\n<p>4）最后，运行下pod，观察结果</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f volume-nfs.yaml</span></span><br><span class=\"line\">pod/volume<span class=\"literal\">-nfs</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods volume-nfs -n dev</span></span><br><span class=\"line\">NAME                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">volume<span class=\"literal\">-nfs</span>        <span class=\"number\">2</span>/<span class=\"number\">2</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>m9s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nfs服务器上的共享目录，发现已经有文件了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># ls /root/data/</span></span><br><span class=\"line\">access.log  error.log</span><br></pre></td></tr></table></figure>\n\n<p>##高级存储</p>\n<h3 id=\"PV和PVC\"><a href=\"#PV和PVC\" class=\"headerlink\" title=\"PV和PVC\"></a>PV和PVC</h3><p>​    前面已经学习了使用NFS提供存储，此时就要求用户会搭建NFS系统，并且会在yaml配置nfs。由于kubernetes支持的存储系统有很多，要求客户全都掌握，显然不现实。为了能够屏蔽底层存储实现的细节，方便用户使用， kubernetes引入PV和PVC两种资源对象。</p>\n<p>​    PV（Persistent Volume）是持久化卷的意思，是对底层的共享存储的一种抽象。一般情况下PV由kubernetes管理员进行创建和配置，它与底层具体的共享存储技术有关，并通过插件完成与共享存储的对接。</p>\n<p>​    PVC（Persistent Volume Claim）是持久卷声明的意思，是用户对于存储需求的一种声明。换句话说，PVC其实就是用户向kubernetes系统发出的一种资源需求申请。</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200514194111567.png\" style=\"zoom:100%;border:1px solid\">\n\n<p>使用了PV和PVC之后，工作可以得到进一步的细分：</p>\n<ul>\n<li>存储：存储工程师维护</li>\n<li>PV：  kubernetes管理员维护</li>\n<li>PVC：kubernetes用户维护</li>\n</ul>\n<h3 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h3><p>PV是存储资源的抽象，下面是资源清单文件:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>  </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span> <span class=\"comment\"># 存储类型，与底层真正存储对应</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span>  <span class=\"comment\"># 存储能力，目前只支持存储空间的设置</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span>  <span class=\"comment\"># 访问模式</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"comment\"># 存储类别</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"comment\"># 回收策略</span></span><br></pre></td></tr></table></figure>\n\n<p>PV 的关键配置参数说明：</p>\n<ul>\n<li><p><strong>存储类型</strong></p>\n<p>底层实际存储的类型，kubernetes支持多种存储类型，每种存储类型的配置都有所差异</p>\n</li>\n<li><p><strong>存储能力（capacity）</strong></p>\n</li>\n</ul>\n<p>​      目前只支持存储空间的设置( storage=1Gi )，不过未来可能会加入IOPS、吞吐量等指标的配置</p>\n<ul>\n<li><p><strong>访问模式（accessModes）</strong></p>\n<p>用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：</p>\n<ul>\n<li>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</li>\n<li>ReadOnlyMany（ROX）：  只读权限，可以被多个节点挂载</li>\n<li>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</li>\n</ul>\n<p><code>需要注意的是，底层不同的存储类型可能支持的访问模式不同</code></p>\n</li>\n<li><p><strong>回收策略（persistentVolumeReclaimPolicy）</strong></p>\n<p>当PV不再被使用了之后，对其的处理方式。目前支持三种策略：</p>\n<ul>\n<li>Retain  （保留）  保留数据，需要管理员手工清理数据</li>\n<li>Recycle（回收）  清除 PV 中的数据，效果相当于执行 rm -rf /thevolume/*</li>\n<li>Delete  （删除） 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务</li>\n</ul>\n<p><code>需要注意的是，底层不同的存储类型可能支持的回收策略不同</code></p>\n</li>\n<li><p><strong>存储类别</strong></p>\n<p>PV可以通过storageClassName参数指定一个存储类别</p>\n<ul>\n<li><p>具有特定类别的PV只能与请求了该类别的PVC进行绑定</p>\n</li>\n<li><p>未设定类别的PV则只能与不请求任何类别的PVC进行绑定</p>\n</li>\n</ul>\n</li>\n<li><p><strong>状态（status）</strong></p>\n<p>一个 PV 的生命周期中，可能会处于4中不同的阶段：</p>\n<ul>\n<li>Available（可用）：     表示可用状态，还未被任何 PVC 绑定</li>\n<li>Bound（已绑定）：     表示 PV 已经被 PVC 绑定</li>\n<li>Released（已释放）： 表示 PVC 被删除，但是资源还未被集群重新声明</li>\n<li>Failed（失败）：         表示该 PV 的自动回收失败</li>\n</ul>\n</li>\n</ul>\n<p><strong>实验</strong></p>\n<p>使用NFS作为存储，来演示PV的使用，创建3个PV，对应NFS中的3个暴露的路径。</p>\n<ol>\n<li>准备NFS环境</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># mkdir /root/data/&#123;pv1,pv2,pv3&#125; -pv</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># more /etc/exports</span></span><br><span class=\"line\">/root/<span class=\"keyword\">data</span>/pv1     <span class=\"number\">192.168</span>.<span class=\"number\">109.0</span>/<span class=\"number\">24</span>(rw,no_root_squash)</span><br><span class=\"line\">/root/<span class=\"keyword\">data</span>/pv2     <span class=\"number\">192.168</span>.<span class=\"number\">109.0</span>/<span class=\"number\">24</span>(rw,no_root_squash)</span><br><span class=\"line\">/root/<span class=\"keyword\">data</span>/pv3     <span class=\"number\">192.168</span>.<span class=\"number\">109.0</span>/<span class=\"number\">24</span>(rw,no_root_squash)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启服务</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  systemctl restart nfs</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建pv.yaml</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">pv1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span> </span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/root/data/pv1</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.109</span><span class=\"number\">.100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">pv2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span> </span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/root/data/pv2</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.109</span><span class=\"number\">.100</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">pv3</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span> </span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">3Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/root/data/pv3</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.109</span><span class=\"number\">.100</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 pv</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pv.yaml</span></span><br><span class=\"line\">persistentvolume/pv1 created</span><br><span class=\"line\">persistentvolume/pv2 created</span><br><span class=\"line\">persistentvolume/pv3 created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pv</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pv -o wide</span></span><br><span class=\"line\">NAME   CAPACITY   ACCESS MODES  RECLAIM POLICY  STATUS      AGE   VOLUMEMODE</span><br><span class=\"line\">pv1    <span class=\"number\">1</span><span class=\"built_in\">Gi</span>        RWX            Retain        Available    <span class=\"number\">10</span>s   Filesystem</span><br><span class=\"line\">pv2    <span class=\"number\">2</span><span class=\"built_in\">Gi</span>        RWX            Retain        Available    <span class=\"number\">10</span>s   Filesystem</span><br><span class=\"line\">pv3    <span class=\"number\">3</span><span class=\"built_in\">Gi</span>        RWX            Retain        Available    <span class=\"number\">9</span>s    Filesystem</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PVC\"><a href=\"#PVC\" class=\"headerlink\" title=\"PVC\"></a>PVC</h3><p>PVC是资源的申请，用来声明对存储空间、访问模式、存储类别需求信息。下面是资源清单文件:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span> <span class=\"comment\"># 访问模式</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 采用标签对PV选择</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"comment\"># 存储类别</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span> <span class=\"comment\"># 请求空间</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br></pre></td></tr></table></figure>\n\n<p>PVC 的关键配置参数说明：</p>\n<ul>\n<li><strong>访问模式（accessModes）</strong></li>\n</ul>\n<p>​       用于描述用户应用对存储资源的访问权限</p>\n<ul>\n<li><p><strong>选择条件（selector）</strong></p>\n<p>通过Label Selector的设置，可使PVC对于系统中己存在的PV进行筛选</p>\n</li>\n<li><p><strong>存储类别（storageClassName）</strong></p>\n<p>PVC在定义时可以设定需要的后端存储的类别，只有设置了该class的pv才能被系统选出</p>\n</li>\n<li><p><strong>资源请求（Resources ）</strong></p>\n<p>描述对存储资源的请求</p>\n</li>\n</ul>\n<p><strong>实验</strong></p>\n<ol>\n<li> 创建pvc.yaml，申请pv</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc3</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pvc</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pvc.yaml</span></span><br><span class=\"line\">persistentvolumeclaim/pvc1 created</span><br><span class=\"line\">persistentvolumeclaim/pvc2 created</span><br><span class=\"line\">persistentvolumeclaim/pvc3 created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pvc</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pvc  -n dev -o wide</span></span><br><span class=\"line\">NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE   VOLUMEMODE</span><br><span class=\"line\">pvc1   Bound    pv1      <span class=\"number\">1</span><span class=\"built_in\">Gi</span>        RWX                           <span class=\"number\">15</span>s   Filesystem</span><br><span class=\"line\">pvc2   Bound    pv2      <span class=\"number\">2</span><span class=\"built_in\">Gi</span>        RWX                           <span class=\"number\">15</span>s   Filesystem</span><br><span class=\"line\">pvc3   Bound    pv3      <span class=\"number\">3</span><span class=\"built_in\">Gi</span>        RWX                           <span class=\"number\">15</span>s   Filesystem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pv</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pv -o wide</span></span><br><span class=\"line\">NAME  CAPACITY ACCESS MODES  RECLAIM POLICY  STATUS    CLAIM       AGE     VOLUMEMODE</span><br><span class=\"line\">pv1    <span class=\"number\">1</span><span class=\"built_in\">Gi</span>        RWx        Retain          Bound    dev/pvc1    <span class=\"number\">3</span>h37m    Filesystem</span><br><span class=\"line\">pv2    <span class=\"number\">2</span><span class=\"built_in\">Gi</span>        RWX        Retain          Bound    dev/pvc2    <span class=\"number\">3</span>h37m    Filesystem</span><br><span class=\"line\">pv3    <span class=\"number\">3</span><span class=\"built_in\">Gi</span>        RWX        Retain          Bound    dev/pvc3    <span class=\"number\">3</span>h37m    Filesystem   </span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 创建pods.yaml, 使用pv</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;while true;do echo pod1 &gt;&gt; /root/out.txt; sleep 10; done;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/root/</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume</span></span><br><span class=\"line\">      <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">        <span class=\"attr\">claimName:</span> <span class=\"string\">pvc1</span></span><br><span class=\"line\">        <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;while true;do echo pod2 &gt;&gt; /root/out.txt; sleep 10; done;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/root/</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">volume</span></span><br><span class=\"line\">      <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">        <span class=\"attr\">claimName:</span> <span class=\"string\">pvc2</span></span><br><span class=\"line\">        <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span>        </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pods.yaml</span></span><br><span class=\"line\">pod/pod1 created</span><br><span class=\"line\">pod/pod2 created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME   READY   STATUS    RESTARTS   AGE   IP            NODE   </span><br><span class=\"line\">pod1   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">14</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.69</span>   node1   </span><br><span class=\"line\">pod2   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">14</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.70</span>   node1  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pvc</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pvc -n dev -o wide</span></span><br><span class=\"line\">NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES      AGE   VOLUMEMODE</span><br><span class=\"line\">pvc1   Bound    pv1      <span class=\"number\">1</span><span class=\"built_in\">Gi</span>        RWX               <span class=\"number\">94</span>m   Filesystem</span><br><span class=\"line\">pvc2   Bound    pv2      <span class=\"number\">2</span><span class=\"built_in\">Gi</span>        RWX               <span class=\"number\">94</span>m   Filesystem</span><br><span class=\"line\">pvc3   Bound    pv3      <span class=\"number\">3</span><span class=\"built_in\">Gi</span>        RWX               <span class=\"number\">94</span>m   Filesystem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pv</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pv -n dev -o wide</span></span><br><span class=\"line\">NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM       AGE     VOLUMEMODE</span><br><span class=\"line\">pv1    <span class=\"number\">1</span><span class=\"built_in\">Gi</span>        RWX            Retain           Bound    dev/pvc1    <span class=\"number\">5</span>h11m   Filesystem</span><br><span class=\"line\">pv2    <span class=\"number\">2</span><span class=\"built_in\">Gi</span>        RWX            Retain           Bound    dev/pvc2    <span class=\"number\">5</span>h11m   Filesystem</span><br><span class=\"line\">pv3    <span class=\"number\">3</span><span class=\"built_in\">Gi</span>        RWX            Retain           Bound    dev/pvc3    <span class=\"number\">5</span>h11m   Filesystem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nfs中的文件存储</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># more /root/data/pv1/out.txt</span></span><br><span class=\"line\">node1</span><br><span class=\"line\">node1</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># more /root/data/pv2/out.txt</span></span><br><span class=\"line\">node2</span><br><span class=\"line\">node2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p>PVC和PV是一一对应的，PV和PVC之间的相互作用遵循以下生命周期：</p>\n<ul>\n<li><p><strong>资源供应</strong>：管理员手动创建底层存储和PV</p>\n</li>\n<li><p><strong>资源绑定</strong>：用户创建PVC，kubernetes负责根据PVC的声明去寻找PV，并绑定</p>\n<p>在用户定义好PVC之后，系统将根据PVC对存储资源的请求在已存在的PV中选择一个满足条件的</p>\n<ul>\n<li><p>一旦找到，就将该PV与用户定义的PVC进行绑定，用户的应用就可以使用这个PVC了</p>\n</li>\n<li><p>如果找不到，PVC则会无限期处于Pending状态，直到等到系统管理员创建了一个符合其要求的PV</p>\n</li>\n</ul>\n<p>PV一旦绑定到某个PVC上，就会被这个PVC独占，不能再与其他PVC进行绑定了</p>\n</li>\n<li><p><strong>资源使用</strong>：用户可在pod中像volume一样使用pvc</p>\n<p>Pod使用Volume的定义，将PVC挂载到容器内的某个路径进行使用。</p>\n</li>\n<li><p><strong>资源释放</strong>：用户删除pvc来释放pv</p>\n<p>当存储资源使用完毕后，用户可以删除PVC，与该PVC绑定的PV将会被标记为“已释放”，但还不能立刻与其他PVC进行绑定。通过之前PVC写入的数据可能还被留在存储设备上，只有在清除之后该PV才能再次使用。</p>\n</li>\n<li><p><strong>资源回收</strong>：kubernetes根据pv设置的回收策略进行资源的回收</p>\n<p>对于PV，管理员可以设定回收策略，用于设置与之绑定的PVC释放资源之后如何处理遗留数据的问题。只有PV的存储空间完成回收，才能供新的PVC绑定和使用</p>\n</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200515002806726.png\" style=\"zoom:100%;border:1px solid\">\n\n<h2 id=\"配置存储\"><a href=\"#配置存储\" class=\"headerlink\" title=\"配置存储\"></a>配置存储</h2><h3 id=\"ConfigMap\"><a href=\"#ConfigMap\" class=\"headerlink\" title=\"ConfigMap\"></a>ConfigMap</h3><p>ConfigMap是一种比较特殊的存储卷，它的主要作用是用来存储配置信息的。</p>\n<p>创建configmap.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">configmap</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">info:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"string\">username:admin</span></span><br><span class=\"line\">    <span class=\"string\">password:123456</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，使用此配置文件创建configmap</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建configmap</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f configmap.yaml</span></span><br><span class=\"line\">configmap/configmap created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看configmap详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe cm configmap -n dev</span></span><br><span class=\"line\">Name:         configmap</span><br><span class=\"line\">Namespace:    dev</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Data</span></span><br><span class=\"line\">====</span><br><span class=\"line\">info:</span><br><span class=\"line\">----</span><br><span class=\"line\">username:admin</span><br><span class=\"line\">password:<span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">Events:  &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来创建一个pod-configmap.yaml，将上面创建的configmap挂载进去</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-configmap</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span> <span class=\"comment\"># 将configmap挂载到目录</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/configmap/config</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span> <span class=\"comment\"># 引用configmap</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">    <span class=\"attr\">configMap:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">configmap</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-configmap.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-configmap</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-configmap -n dev</span></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-configmap</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">6</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入容器</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl exec -it pod-configmap -n dev /bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># cd /configmap/config/</span></span><br><span class=\"line\"><span class=\"comment\"># ls</span></span><br><span class=\"line\">info</span><br><span class=\"line\"><span class=\"comment\"># more info</span></span><br><span class=\"line\">username:admin</span><br><span class=\"line\">password:<span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到映射已经成功，每个configmap都映射成了一个目录</span></span><br><span class=\"line\"><span class=\"comment\"># key---&gt;文件     value----&gt;文件中的内容</span></span><br><span class=\"line\"><span class=\"comment\"># 此时如果更新configmap的内容, 容器中的值也会动态更新</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Secret\"><a href=\"#Secret\" class=\"headerlink\" title=\"Secret\"></a>Secret</h3><p>​    在kubernetes中，还存在一种和ConfigMap非常类似的对象，称为Secret对象。它主要用于存储敏感信息，例如密码、秘钥、证书等等。</p>\n<ol>\n<li> 首先使用base64对数据进行编码</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">root@master</span> <span class=\"string\">~</span>]<span class=\"comment\"># echo -n &#x27;admin&#x27; | base64 #准备username</span></span><br><span class=\"line\"><span class=\"string\">YWRtaW4=</span></span><br><span class=\"line\">[<span class=\"string\">root@master</span> <span class=\"string\">~</span>]<span class=\"comment\"># echo -n &#x27;123456&#x27; | base64 #准备password</span></span><br><span class=\"line\"><span class=\"string\">MTIzNDU2</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 接下来编写secret.yaml，并创建Secret</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">secret</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">YWRtaW4=</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">MTIzNDU2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建secret</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f secret.yaml</span></span><br><span class=\"line\">secret/secret created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看secret详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe secret secret -n dev</span></span><br><span class=\"line\">Name:         secret</span><br><span class=\"line\">Namespace:    dev</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  &lt;none&gt;</span><br><span class=\"line\"><span class=\"built_in\">Type</span>:  Opaque</span><br><span class=\"line\"><span class=\"keyword\">Data</span></span><br><span class=\"line\">====</span><br><span class=\"line\">password:  <span class=\"number\">6</span> bytes</span><br><span class=\"line\">username:  <span class=\"number\">5</span> bytes</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建pod-secret.yaml，将上面创建的secret挂载进去：</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-secret</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span> <span class=\"comment\"># 将secret挂载到目录</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/secret/config</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">    <span class=\"attr\">secret:</span></span><br><span class=\"line\">      <span class=\"attr\">secretName:</span> <span class=\"string\">secret</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pod-secret.yaml</span></span><br><span class=\"line\">pod/pod<span class=\"literal\">-secret</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod pod-secret -n dev</span></span><br><span class=\"line\">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod<span class=\"literal\">-secret</span>      <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>m28s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入容器，查看secret信息，发现已经自动解码了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl exec -it pod-secret /bin/sh -n dev</span></span><br><span class=\"line\">/ <span class=\"comment\"># ls /secret/config/</span></span><br><span class=\"line\">password  username</span><br><span class=\"line\">/ <span class=\"comment\"># more /secret/config/username</span></span><br><span class=\"line\">admin</span><br><span class=\"line\">/ <span class=\"comment\"># more /secret/config/password</span></span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，已经实现了利用secret实现了信息的编码。</p>\n<h1 id=\"第九章-安全认证\"><a href=\"#第九章-安全认证\" class=\"headerlink\" title=\"第九章 安全认证\"></a>第九章 安全认证</h1><p>本章节主要介绍Kubernetes的安全认证机制。</p>\n<h2 id=\"访问控制概述\"><a href=\"#访问控制概述\" class=\"headerlink\" title=\"访问控制概述\"></a>访问控制概述</h2><p>​    Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubernetes的各种<strong>客户端</strong>进行<strong>认证和鉴权</strong>操作。</p>\n<p><strong>客户端</strong></p>\n<p>在Kubernetes集群中，客户端通常有两类：</p>\n<ul>\n<li><p><strong>User Account</strong>：一般是独立于kubernetes之外的其他服务管理的用户账号。</p>\n</li>\n<li><p><strong>Service Account</strong>：kubernetes管理的账号，用于为Pod中的服务进程在访问Kubernetes时提供身份标识。</p>\n</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520102949189.png\" style=\"zoom:100%;border:1px solid\">\n\n<p><strong>认证、授权与准入控制</strong>   </p>\n<p>ApiServer是访问及管理资源对象的唯一入口。任何一个请求访问ApiServer，都要经过下面三个流程：</p>\n<ul>\n<li>Authentication（认证）：身份鉴别，只有正确的账号才能够通过认证</li>\n<li>Authorization（授权）：  判断用户是否有权限对访问的资源执行特定的动作</li>\n<li>Admission Control（准入控制）：用于补充授权机制以实现更加精细的访问控制功能。</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520103942580.png\" style=\"zoom:100%; border:1px solid\">\n\n<h2 id=\"认证管理\"><a href=\"#认证管理\" class=\"headerlink\" title=\"认证管理\"></a>认证管理</h2><p>Kubernetes集群安全的最关键点在于如何识别并认证客户端身份，它提供了3种客户端身份认证方式：</p>\n<ul>\n<li><p>HTTP Base认证：通过用户名+密码的方式认证</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">这种认证方式是把“用户名:密码”用BASE64算法进行编码后的字符串放在HTTP请求中的Header Authorization域里发送给服务端。服务端收到后进行解码，获取用户名及密码，然后进行用户身份认证的过程。</span><br></pre></td></tr></table></figure></li>\n<li><p>HTTP Token认证：通过一个Token来识别合法用户</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">这种认证方式是用一个很长的难以被模仿的字符串--Token来表明客户身份的一种方式。每个Token对应一个用户名，当客户端发起API调用请求时，需要在HTTP Header里放入Token，API Server接到Token后会跟服务器中保存的token进行比对，然后进行用户身份认证的过程。</span><br></pre></td></tr></table></figure></li>\n<li><p>HTTPS证书认证：基于CA根证书签名的双向数字证书认证方式</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">这种认证方式是安全性最高的一种方式，但是同时也是操作起来最麻烦的一种方式。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200518211037434.png\" style=\"zoom:100%;border:1px solid\">\n\n<p><strong>HTTPS认证大体分为3个过程：</strong></p>\n<ol>\n<li>证书申请和下发<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTPS通信双方的服务器向CA机构申请证书，CA机构下发根证书、服务端证书及私钥给申请者</span><br></pre></td></tr></table></figure></li>\n<li>客户端和服务端的双向认证<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">1&gt; 客户端向服务器端发起请求，服务端下发自己的证书给客户端，</span><br><span class=\"line\">   客户端接收到证书后，通过私钥解密证书，在证书中获得服务端的公钥，</span><br><span class=\"line\">   客户端利用服务器端的公钥认证证书中的信息，如果一致，则认可这个服务器</span><br><span class=\"line\">2&gt; 客户端发送自己的证书给服务器端，服务端接收到证书后，通过私钥解密证书，</span><br><span class=\"line\">   在证书中获得客户端的公钥，并用该公钥认证证书信息，确认客户端是否合法</span><br></pre></td></tr></table></figure></li>\n<li>服务器端和客户端进行通信<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">服务器端和客户端协商好加密方案后，客户端会产生一个随机的秘钥并加密，然后发送到服务器端。</span><br><span class=\"line\">服务器端接收这个秘钥后，双方接下来通信的所有内容都通过该随机秘钥加密</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意:  Kubernetes允许同时配置多种认证方式，只要其中任意一个方式认证通过即可</p>\n</blockquote>\n<h2 id=\"授权管理\"><a href=\"#授权管理\" class=\"headerlink\" title=\"授权管理\"></a>授权管理</h2><p>​     授权发生在认证成功之后，通过认证就可以知道请求用户是谁， 然后Kubernetes会根据事先定义的授权策略来决定用户是否有权限访问，这个过程就称为授权。</p>\n<p>​     每个发送到ApiServer的请求都带上了用户和资源的信息：比如发送请求的用户、请求的路径、请求的动作等，授权就是根据这些信息和授权策略进行比较，如果符合策略，则认为授权通过，否则会返回错误。</p>\n<p>API Server目前支持以下几种授权策略：</p>\n<ul>\n<li><p>AlwaysDeny：表示拒绝所有请求，一般用于测试</p>\n</li>\n<li><p>AlwaysAllow：允许接收所有请求，相当于集群不需要授权流程（Kubernetes默认的策略）</p>\n</li>\n<li><p>ABAC：基于属性的访问控制，表示使用用户配置的授权规则对用户请求进行匹配和控制</p>\n</li>\n<li><p>Webhook：通过调用外部REST服务对用户进行授权</p>\n</li>\n<li><p>Node：是一种专用模式，用于对kubelet发出的请求进行访问控制</p>\n</li>\n<li><p>RBAC：基于角色的访问控制（kubeadm安装方式下的默认选项）</p>\n</li>\n</ul>\n<p>RBAC(Role-Based Access Control) 基于角色的访问控制，主要是在描述一件事情：<strong>给哪些对象授予了哪些权限</strong></p>\n<p>其中涉及到了下面几个概念：</p>\n<ul>\n<li>对象：User、Groups、ServiceAccount</li>\n<li>角色：代表着一组定义在资源上的可操作动作(权限)的集合</li>\n<li>绑定：将定义好的角色跟用户绑定在一起</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200519181209566.png\" style=\"zoom:100%;border:1px solid\">\n\n<p>RBAC引入了4个顶级资源对象：</p>\n<ul>\n<li>Role、ClusterRole：角色，用于指定一组权限</li>\n<li>RoleBinding、ClusterRoleBinding：角色绑定，用于将角色（权限）赋予给对象</li>\n</ul>\n<p><strong>Role、ClusterRole</strong></p>\n<p>一个角色就是一组权限的集合，这里的权限都是许可形式的（白名单）。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Role只能对命名空间内的资源进行授权，需要指定nameapce</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-role</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]  <span class=\"comment\"># 支持的API组列表,&quot;&quot; 空字符串，表示核心API群</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>] <span class=\"comment\"># 支持的资源对象列表</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;list&quot;</span>] <span class=\"comment\"># 允许的对资源对象的操作方法列表</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ClusterRole可以对集群范围内资源、跨namespaces的范围资源、非资源类型进行授权</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"> <span class=\"attr\">name:</span> <span class=\"string\">authorization-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>需要详细说明的是，rules中的参数：</p>\n<ul>\n<li><p>apiGroups: 支持的API组列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;apps&quot;</span>, <span class=\"string\">&quot;autoscaling&quot;</span>, <span class=\"string\">&quot;batch&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>resources：支持的资源对象列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;services&quot;</span>, <span class=\"string\">&quot;endpoints&quot;</span>, <span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;secrets&quot;</span>,<span class=\"string\">&quot;configmaps&quot;</span>,<span class=\"string\">&quot;crontabs&quot;</span>,<span class=\"string\">&quot;deployments&quot;</span>,<span class=\"string\">&quot;jobs&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;nodes&quot;</span>,<span class=\"string\">&quot;rolebindings&quot;</span>,<span class=\"string\">&quot;clusterroles&quot;</span>,<span class=\"string\">&quot;daemonsets&quot;</span>,<span class=\"string\">&quot;replicasets&quot;</span>,<span class=\"string\">&quot;statefulsets&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;horizontalpodautoscalers&quot;</span>,<span class=\"string\">&quot;replicationcontrollers&quot;</span>,<span class=\"string\">&quot;cronjobs&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>verbs：对资源对象的操作方法列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>, <span class=\"string\">&quot;exec&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>RoleBinding、ClusterRoleBinding</strong></p>\n<p>角色绑定用来把一个角色绑定到一个目标对象上，绑定目标可以是User、Group或者ServiceAccount。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># RoleBinding可以将同一namespace中的subject绑定到某个Role下，则此subject即具有该Role定义的权限</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-role-binding</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">User</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">heima</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-role</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ClusterRoleBinding在整个集群级别和所有namespaces将特定的subject与ClusterRole绑定，授予权限</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"> <span class=\"attr\">name:</span> <span class=\"string\">authorization-clusterrole-binding</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">User</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">heima</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>RoleBinding引用ClusterRole进行授权</strong></p>\n<p>RoleBinding可以引用ClusterRole，对属于同一命名空间内ClusterRole定义的资源主体进行授权。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">一种很常用的做法就是，集群管理员为集群范围预定义好一组角色（ClusterRole），然后在多个命名空间中重复使用这些ClusterRole。这样可以大幅提高授权管理工作效率，也使得各个命名空间下的基础性授权规则与使用体验保持一致。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 虽然authorization-clusterrole是一个集群角色，但是因为使用了RoleBinding</span></span><br><span class=\"line\"><span class=\"comment\"># 所以heima只能读取dev命名空间中的资源</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-role-binding-ns</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">User</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">heima</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>实战：创建一个只能管理dev空间下Pods资源的账号</strong></p>\n<ol>\n<li>创建账号</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1) 创建证书</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># cd /etc/kubernetes/pki/</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># (umask 077;openssl genrsa -out devman.key 2048)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2) 用apiserver的证书去签署</span></span><br><span class=\"line\"><span class=\"comment\"># 2-1) 签名申请，申请的用户是devman,组是devgroup</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># openssl req -new -key devman.key -out devman.csr -subj &quot;/CN=devman/O=devgroup&quot;     </span></span><br><span class=\"line\"><span class=\"comment\"># 2-2) 签署证书</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># openssl x509 -req -in devman.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out devman.crt -days 3650</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3) 设置集群、用户、上下文信息</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config set-cluster kubernetes --embed-certs=true --certificate-authority=/etc/kubernetes/pki/ca.crt --server=https://192.168.109.100:6443</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config set-credentials devman --embed-certs=true --client-certificate=/etc/kubernetes/pki/devman.crt --client-key=/etc/kubernetes/pki/devman.key</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config set-context devman@kubernetes --cluster=kubernetes --user=devman</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换账户到devman</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config use-context devman@kubernetes</span></span><br><span class=\"line\">Switched to context <span class=\"string\">&quot;devman@kubernetes&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看dev下pod，发现没有权限</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">Error from server (Forbidden): pods is forbidden: User <span class=\"string\">&quot;devman&quot;</span> cannot list resource <span class=\"string\">&quot;pods&quot;</span> <span class=\"keyword\">in</span> API <span class=\"built_in\">group</span> <span class=\"string\">&quot;&quot;</span> <span class=\"keyword\">in</span> the namespace <span class=\"string\">&quot;dev&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到admin账户</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config use-context kubernetes-admin@kubernetes</span></span><br><span class=\"line\">Switched to context <span class=\"string\">&quot;kubernetes-admin@kubernetes&quot;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>2） 创建Role和RoleBinding，为devman用户授权</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dev-role</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;list&quot;</span>]</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">authorization-role-binding</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">User</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">devman</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dev-role</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl create -f dev-role.yaml</span></span><br><span class=\"line\">role.rbac.authorization.k8s.io/dev<span class=\"literal\">-role</span> created</span><br><span class=\"line\">rolebinding.rbac.authorization.k8s.io/authorization<span class=\"literal\">-role</span><span class=\"literal\">-binding</span> created</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>切换账户，再次验证</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换账户到devman</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config use-context devman@kubernetes</span></span><br><span class=\"line\">Switched to context <span class=\"string\">&quot;devman@kubernetes&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                                 READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">nginx<span class=\"literal\">-deployment</span><span class=\"literal\">-66cb59b984</span><span class=\"literal\">-8wp2k</span>    <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running            <span class=\"number\">0</span>          <span class=\"number\">4</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">nginx<span class=\"literal\">-deployment</span><span class=\"literal\">-66cb59b984</span><span class=\"literal\">-dc46j</span>    <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running            <span class=\"number\">0</span>          <span class=\"number\">4</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\">nginx<span class=\"literal\">-deployment</span><span class=\"literal\">-66cb59b984</span><span class=\"literal\">-thfck</span>    <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running            <span class=\"number\">0</span>          <span class=\"number\">4</span>d1<span class=\"built_in\">h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为了不影响后面的学习,切回admin账户</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">pki</span>]<span class=\"comment\"># kubectl config use-context kubernetes-admin@kubernetes</span></span><br><span class=\"line\">Switched to context <span class=\"string\">&quot;kubernetes-admin@kubernetes&quot;</span>.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"准入控制\"><a href=\"#准入控制\" class=\"headerlink\" title=\"准入控制\"></a>准入控制</h2><p>通过了前面的认证和授权之后，还需要经过准入控制处理通过之后，apiserver才会处理这个请求。</p>\n<p>准入控制是一个可配置的控制器列表，可以通过在Api-Server上通过命令行设置选择执行哪些准入控制器：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-<span class=\"literal\">-admission</span><span class=\"literal\">-control</span>=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,</span><br><span class=\"line\">                      DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds</span><br></pre></td></tr></table></figure>\n\n<p>只有当所有的准入控制器都检查通过之后，apiserver才执行该请求，否则返回拒绝。</p>\n<p>当前可配置的Admission Control准入控制如下：</p>\n<ul>\n<li>AlwaysAdmit：允许所有请求</li>\n<li>AlwaysDeny：禁止所有请求，一般用于测试</li>\n<li>AlwaysPullImages：在启动容器之前总去下载镜像</li>\n<li>DenyExecOnPrivileged：它会拦截所有想在Privileged Container上执行命令的请求</li>\n<li>ImagePolicyWebhook：这个插件将允许后端的一个Webhook程序来完成admission controller的功能。</li>\n<li>Service Account：实现ServiceAccount实现了自动化</li>\n<li>SecurityContextDeny：这个插件将使用SecurityContext的Pod中的定义全部失效</li>\n<li>ResourceQuota：用于资源配额管理目的，观察所有请求，确保在namespace上的配额不会超标</li>\n<li>LimitRanger：用于资源限制管理，作用于namespace上，确保对Pod进行资源限制</li>\n<li>InitialResources：为未设置资源请求与限制的Pod，根据其镜像的历史资源的使用情况进行设置</li>\n<li>NamespaceLifecycle：如果尝试在一个不存在的namespace中创建资源对象，则该创建请求将被拒绝。当删除一个namespace时，系统将会删除该namespace中所有对象。</li>\n<li>DefaultStorageClass：为了实现共享存储的动态供应，为未指定StorageClass或PV的PVC尝试匹配默认的StorageClass，尽可能减少用户在申请PVC时所需了解的后端存储细节</li>\n<li>DefaultTolerationSeconds：这个插件为那些没有设置forgiveness tolerations并具有notready:NoExecute和unreachable:NoExecute两种taints的Pod设置默认的“容忍”时间，为5min</li>\n<li>PodSecurityPolicy：这个插件用于在创建或修改Pod时决定是否根据Pod的security context和可用的PodSecurityPolicy对Pod的安全策略进行控制</li>\n</ul>\n<h1 id=\"第十章-DashBoard\"><a href=\"#第十章-DashBoard\" class=\"headerlink\" title=\"第十章 DashBoard\"></a>第十章 DashBoard</h1><p>​    之前在kubernetes中完成的所有操作都是通过命令行工具kubectl完成的。其实，为了提供更丰富的用户体验，kubernetes还开发了一个基于web的用户界面（Dashboard）。用户可以使用Dashboard部署容器化的应用，还可以监控应用的状态，执行故障排查以及管理kubernetes中各种资源。</p>\n<h2 id=\"部署Dashboard\"><a href=\"#部署Dashboard\" class=\"headerlink\" title=\"部署Dashboard\"></a>部署Dashboard</h2><ol>\n<li>下载yaml，并运行Dashboard</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载yaml</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># wget  https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改kubernetes-dashboard的Service类型</span></span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s<span class=\"literal\">-app</span>: kubernetes<span class=\"literal\">-dashboard</span></span><br><span class=\"line\">  name: kubernetes<span class=\"literal\">-dashboard</span></span><br><span class=\"line\">  namespace: kubernetes<span class=\"literal\">-dashboard</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: <span class=\"number\">443</span></span><br><span class=\"line\">      targetPort: <span class=\"number\">8443</span></span><br><span class=\"line\">      nodePort: <span class=\"number\">30009</span>  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s<span class=\"literal\">-app</span>: kubernetes<span class=\"literal\">-dashboard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f recommended.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看namespace下的kubernetes-dashboard下的资源</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod,svc -n kubernetes-dashboard</span></span><br><span class=\"line\">NAME                                            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/dashboard<span class=\"literal\">-metrics</span><span class=\"literal\">-scraper</span><span class=\"literal\">-c79c65bb7</span><span class=\"literal\">-zwfvw</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">111</span>s</span><br><span class=\"line\">pod/kubernetes<span class=\"literal\">-dashboard</span><span class=\"literal\">-56484d4c5</span><span class=\"literal\">-z95z5</span>        <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">111</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                               <span class=\"built_in\">TYPE</span>       CLUSTER<span class=\"literal\">-IP</span>      EXTERNAL<span class=\"literal\">-IP</span>  PORT(S)         AGE</span><br><span class=\"line\">service/dashboard<span class=\"literal\">-metrics</span><span class=\"literal\">-scraper</span>  ClusterIP  <span class=\"number\">10.96</span>.<span class=\"number\">89.218</span>    &lt;none&gt;       <span class=\"number\">8000</span>/TCP        <span class=\"number\">111</span>s</span><br><span class=\"line\">service/kubernetes<span class=\"literal\">-dashboard</span>       NodePort   <span class=\"number\">10.104</span>.<span class=\"number\">178.171</span>  &lt;none&gt;       <span class=\"number\">443</span>:<span class=\"number\">30009</span>/TCP   <span class=\"number\">111</span>s</span><br></pre></td></tr></table></figure>\n\n<p>2）创建访问账户，获取token</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建账号</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span>-<span class=\"number\">1</span> ~]<span class=\"comment\"># kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 授权</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span>-<span class=\"number\">1</span> ~]<span class=\"comment\"># kubectl create clusterrolebinding dashboard-admin-rb --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取账号token</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl get secrets -n kubernetes-dashboard | grep dashboard-admin</span></span><br><span class=\"line\">dashboard<span class=\"literal\">-admin</span><span class=\"literal\">-token</span><span class=\"literal\">-xbqhh</span>        kubernetes.io/service<span class=\"literal\">-account</span><span class=\"literal\">-token</span>   <span class=\"number\">3</span>      <span class=\"number\">2</span>m35s</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe secrets dashboard-admin-token-xbqhh -n kubernetes-dashboard</span></span><br><span class=\"line\">Name:         dashboard<span class=\"literal\">-admin</span><span class=\"literal\">-token</span><span class=\"literal\">-xbqhh</span></span><br><span class=\"line\">Namespace:    kubernetes<span class=\"literal\">-dashboard</span></span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service<span class=\"literal\">-account</span>.name: dashboard<span class=\"literal\">-admin</span></span><br><span class=\"line\">              kubernetes.io/service<span class=\"literal\">-account</span>.uid: <span class=\"number\">95</span>d84d80<span class=\"literal\">-be7a</span><span class=\"literal\">-4d10</span><span class=\"literal\">-a2e0</span><span class=\"literal\">-68f90222d039</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Type</span>:  kubernetes.io/service<span class=\"literal\">-account</span><span class=\"literal\">-token</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Data</span></span><br><span class=\"line\">====</span><br><span class=\"line\">namespace:  <span class=\"number\">20</span> bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImJrYkF4bW5XcDhWcmNGUGJtek5NODFuSXl1aWptMmU2M3o4LTY5a2FKS2cifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4teGJxaGgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTVkODRkODAtYmU3YS00ZDEwLWEyZTAtNjhmOTAyMjJkMDM5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.NAl7e8ZfWWdDoPxkqzJzTB46sK9E8iuJYnUI9vnBaY3Jts7T1g1msjsBnbxzQSYgAG-<span class=\"literal\">-cV0WYxjndzJY_UWCwaGPrQrt_GunxmOK9AUnzURqm55GR2RXIZtjsWVP2EBatsDgHRmuUbQvTFOvdJB4x3nXcYLN2opAaMqg3rnU2rr</span><span class=\"literal\">-A8zCrIuX_eca12wIp_QiuP3SF</span><span class=\"literal\">-tzpdLpsyRfegTJZl6YnSGyaVkC9id</span><span class=\"literal\">-cxZRb307qdCfXPfCHR_2rt5FVfxARgg_C0e3eFHaaYQO7CitxsnIoIXpOFNAR8aUrmopJyODQIPqBWUehb7FhlU1DCduHnIIXVC_UICZ</span><span class=\"literal\">-MKYewBDLw</span></span><br><span class=\"line\">ca.crt:     <span class=\"number\">1025</span> bytes</span><br></pre></td></tr></table></figure>\n\n<p>3）通过浏览器访问Dashboard的UI</p>\n<p>在登录页面上输入上面的token</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520144548997.png\" alt=\"image-20200520144548997\" style=\"zoom:80%;border:1px solid\">\n\n<p>出现下面的页面代表成功</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520144959353.png\" alt=\"image-20200520144959353\" style=\"zoom:80%;border:1px solid\">\n\n<h2 id=\"使用DashBoard\"><a href=\"#使用DashBoard\" class=\"headerlink\" title=\"使用DashBoard\"></a>使用DashBoard</h2><p>本章节以Deployment为例演示DashBoard的使用</p>\n<p><strong>查看</strong></p>\n<p>选择指定的命名空间<code>dev</code>，然后点击<code>Deployments</code>，查看dev空间下的所有deployment</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520154628679.png\" style=\"zoom:90%;border:1px solid\">\n\n<p><strong>扩缩容</strong></p>\n<p>在<code>Deployment</code>上点击<code>规模</code>，然后指定<code>目标副本数量</code>，点击确定</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520162605102.png\" style=\"zoom:90%;border:1px solid\">\n\n<p><strong>编辑</strong></p>\n<p>在<code>Deployment</code>上点击<code>编辑</code>，然后修改<code>yaml文件</code>，点击确定</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520163253644.png\" alt=\"image-20200520163253644\" style=\"zoom:100%;border:1px solid\">\n\n<p><strong>查看Pod</strong></p>\n<p>点击<code>Pods</code>, 查看pods列表</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520163552110.png\" style=\"zoom:90%;border:1px solid\">\n\n<p><strong>操作Pod</strong></p>\n<p>选中某个Pod，可以对其执行日志（logs）、进入执行（exec）、编辑、删除操作</p>\n<img src=\"/2021/12/01/K8S/day5/k8s_day5/image-20200520163832827.png\" style=\"zoom:90%;border:1px solid\">\n\n<blockquote>\n<p>Dashboard提供了kubectl的绝大部分功能，这里不再一一演示</p>\n</blockquote>\n","categories":["k8s"],"tags":["k8s 教程"]},{"title":"Vue.js - Day1","url":"/2021/05/02/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day1\"><a href=\"#Vue-js-Day1\" class=\"headerlink\" title=\"Vue.js - Day1\"></a>Vue.js - Day1</h1><h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>\n<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>\n</li>\n<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n</li>\n<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>\n</li>\n<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n</li>\n</ul>\n<h2 id=\"为什么要学习流行框架\"><a href=\"#为什么要学习流行框架\" class=\"headerlink\" title=\"为什么要学习流行框架\"></a>为什么要学习流行框架</h2><ul>\n<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；</li>\n</ul>\n<ul>\n<li>企业中，使用框架，能够提高开发的效率；</li>\n</ul>\n<ul>\n<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>\n<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>\n</ul>\n<ul>\n<li>增强自己就业时候的竞争力</li>\n</ul>\n<ul>\n<li>人无我有，人有我优</li>\n<li>你平时不忙的时候，都在干嘛？</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</li>\n</ul>\n<ul>\n<li>node 中的 express；</li>\n</ul>\n<ul>\n<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</li>\n</ul>\n<ul>\n<li><ol>\n<li>从Jquery 切换到 Zepto</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从 EJS 切换到 art-template</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\"><a href=\"#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\" class=\"headerlink\" title=\"Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>\n<li><p>MVC 是后端的分层开发概念；</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>\n</li>\n<li><p>为什么有了MVC还要有MVVM</p>\n</li>\n</ul>\n<h2 id=\"Vue-js-基本代码-和-MVVM-之间的对应关系\"><a href=\"#Vue-js-基本代码-和-MVVM-之间的对应关系\" class=\"headerlink\" title=\"Vue.js 基本代码 和 MVVM 之间的对应关系\"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><p><img src=\"https://user-images.githubusercontent.com/28568478/116802575-5b22cd80-ab46-11eb-8f55-8b75473b6d4a.png\" alt=\"01 MVC和MVVM的关系图解\"></p>\n<h2 id=\"Vue之-基本的代码结构和插值表达式、v-cloak\"><a href=\"#Vue之-基本的代码结构和插值表达式、v-cloak\" class=\"headerlink\" title=\"Vue之 - 基本的代码结构和插值表达式、v-cloak\"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id=\"Vue指令之v-text和v-html\"><a href=\"#Vue指令之v-text和v-html\" class=\"headerlink\" title=\"Vue指令之v-text和v-html\"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id=\"Vue指令之v-bind的三种用法\"><a href=\"#Vue指令之v-bind的三种用法\" class=\"headerlink\" title=\"Vue指令之v-bind的三种用法\"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>\n<li><p>直接使用指令<code>v-bind</code></p>\n</li>\n<li><p>使用简化指令<code>:</code></p>\n</li>\n<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;!-- &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        &#x2F;* 默认加入v-cloak的元素 隐藏 *&#x2F;</span><br><span class=\"line\">        [v-cloak] &#123;</span><br><span class=\"line\">            display: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 使用v-cloak能够解决插值表达式闪烁的问题 --&gt;</span><br><span class=\"line\">        &lt;p v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">        &lt;!-- 默认v-text是没有闪烁问题的</span><br><span class=\"line\">            v-text 会覆盖元素中原本的内容，但是插值表达式 只会替换自己的这个占位符 不会吧扎鞥个元素内容清空</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;h4 v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- v-html会解析html格式字符串 --&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;msg2&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div v-text&#x3D;&quot;msg2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div v-html&#x3D;&quot;msg2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- v-bind 是vue中提供用于绑定属性的指令 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; title&#x3D;&quot;123&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; title&#x3D;&quot;mytitle&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle+&#39;123&#39;&quot;&gt;</span><br><span class=\"line\">         &lt;!-- 简化写 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;mytitle+&#39;456&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- vue中 提供了v-on 事件绑定机制 --&gt;</span><br><span class=\"line\">         &lt;!-- 这样写会报错 未定义alert方法 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;mytitle+&#39; v-on&#39;&quot; v-on:click&#x3D;&quot;alert(&#39;报警&#39;)&quot;&gt;</span><br><span class=\"line\">         &lt;!-- 貌似v-bind:title不生效 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; v-on:click&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; v-on:mouseover&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\">         &lt;!-- v-on缩写 用@代替 v-on:--&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; @mouseover&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- vue.js放在这里时 如果网速过慢 会导致 &#123;&#123;msg&#125;&#125; 展现在页面</span><br><span class=\"line\">        需要加v-cloak 设置样式为none 这样在网速慢的时候加载出来不会出现&#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">        而是当msg数据返回时才会展示信息</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">            el: &quot;#app&quot;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                msg:123,</span><br><span class=\"line\">                msg2:&#39;&lt;h1&gt;哈哈 我是一个大大的H1&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">                mytitle:&quot;这是一个自己定义的title&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123; &#x2F;&#x2F; 这个methods 属性中国定义了当前vue实例所有可用的方法</span><br><span class=\"line\">                show: function () &#123;</span><br><span class=\"line\">                    alert(&quot;报警&quot;)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vue指令之v-on和跑马灯效果\"><a href=\"#Vue指令之v-on和跑马灯效果\" class=\"headerlink\" title=\"Vue指令之v-on和跑马灯效果\"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id=\"跑马灯效果\"><a href=\"#跑马灯效果\" class=\"headerlink\" title=\"跑马灯效果\"></a>跑马灯效果</h3><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       info: &#39;猥琐发育，别浪~！&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">       intervalId: null</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       go() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 如果当前有定时器在运行，则直接return</span><br><span class=\"line\"></span><br><span class=\"line\">         if (this.intervalId !&#x3D; null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 开始定时器</span><br><span class=\"line\"></span><br><span class=\"line\">         this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">       stop() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         clearInterval(this.intervalId);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue指令之v-on的缩写和事件修饰符\"><a href=\"#Vue指令之v-on的缩写和事件修饰符\" class=\"headerlink\" title=\"Vue指令之v-on的缩写和事件修饰符\"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h3><ul>\n<li><p>.stop       阻止冒泡</p>\n</li>\n<li><p>.prevent    阻止默认事件</p>\n</li>\n<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>\n</li>\n<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>\n</li>\n<li><p>.once       事件只触发一次</p>\n</li>\n</ul>\n<h2 id=\"Vue指令之v-model和双向数据绑定\"><a href=\"#Vue指令之v-model和双向数据绑定\" class=\"headerlink\" title=\"Vue指令之v-model和双向数据绑定\"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id=\"简易计算器案例\"><a href=\"#简易计算器案例\" class=\"headerlink\" title=\"简易计算器案例\"></a>简易计算器案例</h2><ol>\n<li>HTML 代码结构</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;select v-model&#x3D;&quot;opt&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       n1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       n2: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       result: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       opt: &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       getResult() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         switch (this.opt) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;0&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) + parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;1&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) - parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;2&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) * parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;3&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"在Vue中使用样式\"><a href=\"#在Vue中使用样式\" class=\"headerlink\" title=\"在Vue中使用样式\"></a>在Vue中使用样式</h2><h3 id=\"使用class样式\"><a href=\"#使用class样式\" class=\"headerlink\" title=\"使用class样式\"></a>使用class样式</h3><ol>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>数组中使用三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h3><ol>\n<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>\n</li>\n</ol>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</li>\n</ol>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class=\"line\">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Vue指令之v-for和key属性\"><a href=\"#Vue指令之v-for和key属性\" class=\"headerlink\" title=\"Vue指令之v-for和key属性\"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol>\n<li>迭代数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代对象中的属性</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>迭代数字</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>\n</blockquote>\n<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>\n<h2 id=\"Vue指令之v-if和v-show\"><a href=\"#Vue指令之v-if和v-show\" class=\"headerlink\" title=\"Vue指令之v-if和v-show\"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote>\n<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>\n</blockquote>\n<h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"http://www.cnblogs.com/kidney/p/6052935.html\">Vue.js双向绑定的实现原理</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day2","url":"/2021/05/02/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day2\"><a href=\"#Vue-js-Day2\" class=\"headerlink\" title=\"Vue.js - Day2\"></a>Vue.js - Day2</h1><h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"vue实例的生命周期\"><a href=\"#vue实例的生命周期\" class=\"headerlink\" title=\"vue实例的生命周期\"></a><a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">vue实例的生命周期</a></h2><ul>\n<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\">生命周期钩子</a>：就是生命周期事件的别名而已；</li>\n<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>\n<li>主要的生命周期函数分类：</li>\n</ul>\n<ul>\n<li>创建期间的生命周期函数：<ul>\n<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>\n<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>\n<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>\n<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>\n</ul>\n</li>\n<li>运行期间的生命周期函数：<ul>\n<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>\n<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>\n</ul>\n</li>\n<li>销毁期间的生命周期函数：<ul>\n<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br><img src=\"https://user-images.githubusercontent.com/28568478/116815239-3b63c780-ab8f-11eb-9453-11e40b354c4e.png\" alt=\"lifecycle\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-resource-实现-get-post-jsonp请求\"><a href=\"#vue-resource-实现-get-post-jsonp请求\" class=\"headerlink\" title=\"vue-resource 实现 get, post, jsonp请求\"></a><a href=\"https://github.com/pagekit/vue-resource\">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>\n<ol>\n<li>之前的学习中，如何发起数据请求？</li>\n<li>常见的数据请求类型？  get  post jsonp</li>\n<li>测试的URL请求资源地址：</li>\n</ol>\n<ul>\n<li>get请求地址： <a href=\"http://vue.studyit.io/api/getlunbo\">http://vue.studyit.io/api/getlunbo</a></li>\n<li>post请求地址：<a href=\"http://vue.studyit.io/api/post\">http://vue.studyit.io/api/post</a></li>\n<li>jsonp请求地址：<a href=\"http://vue.studyit.io/api/jsonp\">http://vue.studyit.io/api/jsonp</a></li>\n</ul>\n<ol start=\"4\">\n<li>JSONP的实现原理</li>\n</ol>\n<ul>\n<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>\n<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>\n<li>具体实现过程：<ul>\n<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>\n<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>\n<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>\n<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>\n</ul>\n</li>\n<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入解析 URL 地址的核心模块</span><br><span class=\"line\">const urlModule &#x3D; require(&#39;url&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">const server &#x3D; http.createServer();</span><br><span class=\"line\">&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求</span><br><span class=\"line\">server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const url &#x3D; req.url;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 解析客户端请求的URL地址</span><br><span class=\"line\">  var info &#x3D; urlModule.parse(url, true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据</span><br><span class=\"line\">  if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取客户端指定的回调函数的名称</span><br><span class=\"line\">    var cbName &#x3D; info.query.callback;</span><br><span class=\"line\">    &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象</span><br><span class=\"line\">    var data &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;zs&#39;,</span><br><span class=\"line\">      age: 22,</span><br><span class=\"line\">      gender: &#39;男&#39;,</span><br><span class=\"line\">      hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class=\"line\">    var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;;</span><br><span class=\"line\">    &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class=\"line\">    res.end(result);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    res.end(&#39;404&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>vue-resource 的配置步骤：</li>\n</ol>\n<ul>\n<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>\n<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>\n</ul>\n<ol start=\"6\">\n<li>发送get请求：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getInfo() &#123; &#x2F;&#x2F; get 方式获取数据</span><br><span class=\"line\">  this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送post请求：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">postInfo() &#123;</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; post 方法接收三个参数：</span><br><span class=\"line\">  &#x2F;&#x2F; 参数1： 要请求的URL地址</span><br><span class=\"line\">  &#x2F;&#x2F; 参数2： 要发送的数据对象</span><br><span class=\"line\">  &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送JSONP请求获取数据：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;;</span><br><span class=\"line\">  this.$http.jsonp(url).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置本地数据库和数据接口API\"><a href=\"#配置本地数据库和数据接口API\" class=\"headerlink\" title=\"配置本地数据库和数据接口API\"></a>配置本地数据库和数据接口API</h2><ol>\n<li>先解压安装 <code>PHPStudy</code>;</li>\n<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>\n<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>\n<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>\n<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>\n<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>\n<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>\n</ol>\n<h2 id=\"品牌管理改造\"><a href=\"#品牌管理改造\" class=\"headerlink\" title=\"品牌管理改造\"></a>品牌管理改造</h2><h3 id=\"展示品牌列表\"><a href=\"#展示品牌列表\" class=\"headerlink\" title=\"展示品牌列表\"></a>展示品牌列表</h3><h3 id=\"添加品牌数据\"><a href=\"#添加品牌数据\" class=\"headerlink\" title=\"添加品牌数据\"></a>添加品牌数据</h3><h3 id=\"删除品牌数据\"><a href=\"#删除品牌数据\" class=\"headerlink\" title=\"删除品牌数据\"></a>删除品牌数据</h3><h2 id=\"Vue中的动画\"><a href=\"#Vue中的动画\" class=\"headerlink\" title=\"Vue中的动画\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>\n<h3 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h3><ol>\n<li>HTML结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class=\"line\">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class=\"line\">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>VM 实例：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isshow: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    myAnimate() &#123;</span><br><span class=\"line\">      this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义两组类样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter-active,</span><br><span class=\"line\">    .fade-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.2s ease;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter,</span><br><span class=\"line\">    .fade-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateX(100px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用第三方-CSS-动画库\"><a href=\"#使用第三方-CSS-动画库\" class=\"headerlink\" title=\"使用第三方 CSS 动画库\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D\">使用第三方 CSS 动画库</a></h3><ol>\n<li>导入动画类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 transition 及属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">\tenter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class=\"line\">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class=\"line\">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">  \t&lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h3><ol>\n<li>定义 transition 组件以及三个钩子函数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class=\"line\">    &lt;transition</span><br><span class=\"line\">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">    @enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class=\"line\">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义三个 methods 钩子方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class=\"line\">          el.offsetWidth;</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class=\"line\">          this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n<li>定义动画过渡时长和样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.show&#123;</span><br><span class=\"line\">      transition: all 0.4s ease;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1\">v-for 的列表过渡</a></h3><ol>\n<li>定义过渡样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .list-enter,</span><br><span class=\"line\">    .list-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateY(10px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .list-enter-active,</span><br><span class=\"line\">    .list-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.3s ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 VM中的结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    txt: &#39;&#39;,</span><br><span class=\"line\">    list: [1, 2, 3, 4]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      this.list.push(this.txt);</span><br><span class=\"line\">      this.txt &#x3D; &#39;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"列表的排序过渡\"><a href=\"#列表的排序过渡\" class=\"headerlink\" title=\"列表的排序过渡\"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>\n<ul>\n<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.v-move&#123;</span><br><span class=\"line\">  transition: all 0.8s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\">pagekit/vue-resource</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html\">navicat如何导入sql文件和导出sql文件</a></li>\n<li><a href=\"http://cubic-bezier.com/#.4,-0.3,1,.33\">贝塞尔在线生成器</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day4","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day4\"><a href=\"#Vue-js-Day4\" class=\"headerlink\" title=\"Vue.js - Day4\"></a>Vue.js - Day4</h1><h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"组件中data和props的区别\"><a href=\"#组件中data和props的区别\" class=\"headerlink\" title=\"组件中data和props的区别\"></a>组件中data和props的区别</h2><h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用tag属性指定router-link渲染的标签类型\"><a href=\"#使用tag属性指定router-link渲染的标签类型\" class=\"headerlink\" title=\"使用tag属性指定router-link渲染的标签类型\"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id=\"设置路由重定向\"><a href=\"#设置路由重定向\" class=\"headerlink\" title=\"设置路由重定向\"></a>设置路由重定向</h2><h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; |</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<blockquote>\n<p>注意： nrm 只是单纯的提供了几个常用的 下载包的 URL地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是  npm</p>\n</blockquote>\n<blockquote>\n<p>npm i cnpm -g<br><a href=\"https://www.cnblogs.com/chase-star/p/10455703.html\">npm 和 cnpm 的区别，你真的搞懂了嘛</a></p>\n</blockquote>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\">URL中的hash（井号）</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"k8s教程day4-pod控制器和service及ingress讲解","url":"/2021/12/01/K8S/day4/k8s_day4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>k8s 课程规划<br><img src=\"https://user-images.githubusercontent.com/28568478/144197771-e2ed53bf-bb06-46a8-af7b-8ac948fc2cf1.png\"></p>\n<span id=\"more\"></span>\n<h1 id=\"第六章-Pod控制器详解\"><a href=\"#第六章-Pod控制器详解\" class=\"headerlink\" title=\"第六章 Pod控制器详解\"></a>第六章 Pod控制器详解</h1><p>本章节主要介绍各种Pod控制器的详细使用。</p>\n<h2 id=\"Pod控制器介绍\"><a href=\"#Pod控制器介绍\" class=\"headerlink\" title=\"Pod控制器介绍\"></a>Pod控制器介绍</h2><p>Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类：</p>\n<ul>\n<li><p>自主式pod：kubernetes直接创建出来的Pod，这种pod删除后就没有了，也不会重建</p>\n</li>\n<li><p>控制器创建的pod：kubernetes通过控制器创建的pod，这种pod删除了之后还会自动重建       </p>\n</li>\n</ul>\n<blockquote>\n<p><strong><code>什么是Pod控制器</code></strong> </p>\n<p>​    Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod资源在运行中出现故障，它会基于指定策略重新编排Pod。</p>\n</blockquote>\n<p>在kubernetes中，有很多类型的pod控制器，每种都有自己的适合的场景，常见的有下面这些：</p>\n<ul>\n<li><p>ReplicationController：比较原始的pod控制器，已经被废弃，由ReplicaSet替代</p>\n</li>\n<li><p>ReplicaSet：保证副本数量一直维持在期望值，并支持pod数量扩缩容，镜像版本升级</p>\n</li>\n<li><p>Deployment：通过控制ReplicaSet来控制Pod，并支持滚动升级、回退版本</p>\n</li>\n<li><p>Horizontal Pod Autoscaler：可以根据集群负载自动水平调整Pod的数量，实现削峰填谷</p>\n</li>\n<li><p>DaemonSet：在集群中的指定Node上运行且仅运行一个副本，一般用于守护进程类的任务</p>\n</li>\n<li><p>Job：它创建出来的pod只要完成任务就立即退出，不需要重启或重建，用于执行一次性任务</p>\n</li>\n<li><p>Cronjob：它创建的Pod负责周期性任务控制，不需要持续后台运行</p>\n</li>\n<li><p>StatefulSet：管理有状态应用</p>\n</li>\n</ul>\n<h2 id=\"ReplicaSet-RS\"><a href=\"#ReplicaSet-RS\" class=\"headerlink\" title=\"ReplicaSet(RS)\"></a>ReplicaSet(RS)</h2><p>​    ReplicaSet的主要作用是<strong>保证一定数量的pod正常运行</strong>，它会持续监听这些Pod的运行状态，一旦Pod发生故障，就会重启或重建。同时它还支持对pod数量的扩缩容和镜像版本的升降级。</p>\n<p><img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200612005334159.png\"></p>\n<p>ReplicaSet的资源清单文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> <span class=\"comment\"># 版本号</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicaSet</span> <span class=\"comment\"># 类型       </span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"comment\"># rs名称 </span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"comment\"># 所属命名空间 </span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#标签</span></span><br><span class=\"line\">    <span class=\"attr\">controller:</span> <span class=\"string\">rs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\"># 详情描述</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span> <span class=\"comment\"># 副本数量</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>      <span class=\"comment\"># Labels匹配规则</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># Expressions匹配规则</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">app</span>, <span class=\"attr\">operator:</span> <span class=\"string\">In</span>, <span class=\"attr\">values:</span> [<span class=\"string\">nginx-pod</span>]&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span> <span class=\"comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>在这里面，需要新了解的配置项就是<code>spec</code>下面几个选项：</p>\n<ul>\n<li><p>replicas：指定副本数量，其实就是当前rs创建出来的pod的数量，默认为1</p>\n</li>\n<li><p>selector：选择器，它的作用是建立pod控制器和pod之间的关联关系，采用的Label Selector机制</p>\n<p>​               在pod模板上定义label，在控制器上定义选择器，就可以表明当前控制器能管理哪些pod了</p>\n</li>\n<li><p>template：模板，就是当前控制器创建pod所使用的模板板，里面其实就是前一章学过的pod的定义</p>\n</li>\n</ul>\n<p><strong>创建ReplicaSet</strong></p>\n<p>创建pc-replicaset.yaml文件，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ReplicaSet</span>   </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-replicaset</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> </span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建rs</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pc-replicaset.yaml</span></span><br><span class=\"line\">replicaset.apps/pc<span class=\"literal\">-replicaset</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看rs</span></span><br><span class=\"line\"><span class=\"comment\"># DESIRED:期望副本数量  </span></span><br><span class=\"line\"><span class=\"comment\"># CURRENT:当前副本数量  </span></span><br><span class=\"line\"><span class=\"comment\"># READY:已经准备好提供服务的副本数量</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs pc-replicaset -n dev -o wide</span></span><br><span class=\"line\">NAME          DESIRED   CURRENT READY AGE   CONTAINERS   IMAGES             SELECTOR</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span> <span class=\"number\">3</span>         <span class=\"number\">3</span>       <span class=\"number\">3</span>     <span class=\"number\">22</span>s   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span>       app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前控制器创建出来的pod</span></span><br><span class=\"line\"><span class=\"comment\"># 这里发现控制器创建出来的pod的名称是在控制器名称后面拼接了-xxxxx随机码</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod -n dev</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-6vmvt</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">54</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-fmb8f</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">54</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-snrk2</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">54</span>s</span><br></pre></td></tr></table></figure>\n\n<p><strong>扩缩容</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑rs的副本数量，修改spec:replicas: 6即可</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl edit rs pc-replicaset -n dev</span></span><br><span class=\"line\">replicaset.apps/pc<span class=\"literal\">-replicaset</span> edited</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-6vmvt</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">114</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-cftnp</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">10</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-fjlm6</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">10</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-fmb8f</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">114</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-s2whj</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">10</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-snrk2</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">114</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然也可以直接使用命令实现</span></span><br><span class=\"line\"><span class=\"comment\"># 使用scale命令实现扩缩容， 后面--replicas=n直接指定目标数量即可</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl scale rs pc-replicaset --replicas=2 -n dev</span></span><br><span class=\"line\">replicaset.apps/pc<span class=\"literal\">-replicaset</span> scaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令运行完毕，立即查看，发现已经有4个开始准备退出了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                       READY   STATUS        RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-6vmvt</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">118</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-cftnp</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">4</span>m17s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-fjlm6</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">4</span>m17s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-fmb8f</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running       <span class=\"number\">0</span>          <span class=\"number\">118</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-s2whj</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">4</span>m17s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-snrk2</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running       <span class=\"number\">0</span>          <span class=\"number\">118</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#稍等片刻，就只剩下2个了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-fmb8f</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">119</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-snrk2</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">119</span>m</span><br></pre></td></tr></table></figure>\n\n<p><strong>镜像升级</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑rs的容器镜像 - image: nginx:1.17.2</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl edit rs pc-replicaset -n dev</span></span><br><span class=\"line\">replicaset.apps/pc<span class=\"literal\">-replicaset</span> edited</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看，发现镜像版本已经变更了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev -o wide</span></span><br><span class=\"line\">NAME                DESIRED  CURRENT   READY   AGE    CONTAINERS   IMAGES        ...</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span>       <span class=\"number\">2</span>        <span class=\"number\">2</span>         <span class=\"number\">2</span>       <span class=\"number\">140</span>m   nginx         nginx:<span class=\"number\">1.17</span>.<span class=\"number\">2</span>  ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同样的道理，也可以使用命令完成这个工作</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl set image rs rs名称 容器=镜像版本 -n namespace</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl set image rs pc-replicaset nginx=nginx:1.17.1  -n dev</span></span><br><span class=\"line\">replicaset.apps/pc<span class=\"literal\">-replicaset</span> image updated</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次查看，发现镜像版本已经变更了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev -o wide</span></span><br><span class=\"line\">NAME                 DESIRED  CURRENT   READY   AGE    CONTAINERS   IMAGES            ...</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span>        <span class=\"number\">2</span>        <span class=\"number\">2</span>         <span class=\"number\">2</span>       <span class=\"number\">145</span>m   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span> ... </span><br></pre></td></tr></table></figure>\n\n<p><strong>删除ReplicaSet</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用kubectl delete命令会删除此RS以及它管理的Pod</span></span><br><span class=\"line\"><span class=\"comment\"># 在kubernetes删除RS前，会将RS的replicasclear调整为0，等待所有的Pod被删除后，在执行RS对象的删除</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete rs pc-replicaset -n dev</span></span><br><span class=\"line\">replicaset.apps <span class=\"string\">&quot;pc-replicaset&quot;</span> deleted</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pod -n dev -o wide</span></span><br><span class=\"line\">No resources found <span class=\"keyword\">in</span> dev namespace.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果希望仅仅删除RS对象（保留Pod），可以使用kubectl delete命令时添加--cascade=false选项（不推荐）。</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete rs pc-replicaset -n dev --cascade=false</span></span><br><span class=\"line\">replicaset.apps <span class=\"string\">&quot;pc-replicaset&quot;</span> deleted</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                  READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-cl82j</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">75</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-replicaset</span><span class=\"literal\">-dslhb</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">75</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以使用yaml直接删除(推荐)</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pc-replicaset.yaml</span></span><br><span class=\"line\">replicaset.apps <span class=\"string\">&quot;pc-replicaset&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Deployment-Deploy\"><a href=\"#Deployment-Deploy\" class=\"headerlink\" title=\"Deployment(Deploy)\"></a>Deployment(Deploy)</h2><p>​    为了更好的解决服务编排的问题，kubernetes在V1.2版本开始，引入了Deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理ReplicaSet来简介管理Pod，即：Deployment管理ReplicaSet，ReplicaSet管理Pod。所以Deployment比ReplicaSet功能更加强大。</p>\n<p><img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200612005524778.png\"></p>\n<p>Deployment主要功能有下面几个：</p>\n<ul>\n<li>支持ReplicaSet的所有功能</li>\n<li>支持发布的停止、继续</li>\n<li>支持滚动升级和回滚版本</li>\n</ul>\n<p>Deployment的资源清单文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> <span class=\"comment\"># 版本号</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span> <span class=\"comment\"># 类型       </span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"comment\"># rs名称 </span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"comment\"># 所属命名空间 </span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#标签</span></span><br><span class=\"line\">    <span class=\"attr\">controller:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\"># 详情描述</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span> <span class=\"comment\"># 副本数量</span></span><br><span class=\"line\">  <span class=\"attr\">revisionHistoryLimit:</span> <span class=\"number\">3</span> <span class=\"comment\"># 保留历史版本</span></span><br><span class=\"line\">  <span class=\"attr\">paused:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 暂停部署，默认是false</span></span><br><span class=\"line\">  <span class=\"attr\">progressDeadlineSeconds:</span> <span class=\"number\">600</span> <span class=\"comment\"># 部署超时时间（s），默认是600</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> <span class=\"comment\"># 策略</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span> <span class=\"comment\"># 滚动更新策略</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span> <span class=\"comment\"># 滚动更新</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">30</span><span class=\"string\">%</span> <span class=\"comment\"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">30</span><span class=\"string\">%</span> <span class=\"comment\"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>      <span class=\"comment\"># Labels匹配规则</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># Expressions匹配规则</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">app</span>, <span class=\"attr\">operator:</span> <span class=\"string\">In</span>, <span class=\"attr\">values:</span> [<span class=\"string\">nginx-pod</span>]&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span> <span class=\"comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>创建deployment</strong></p>\n<p>创建pc-deployment.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>      </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> </span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建deployment</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pc-deployment.yaml --record=true</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deployment</span></span><br><span class=\"line\"><span class=\"comment\"># UP-TO-DATE 最新版本的pod的数量</span></span><br><span class=\"line\"><span class=\"comment\"># AVAILABLE  当前可用的pod的数量</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deploy pc-deployment -n dev</span></span><br><span class=\"line\">NAME            READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span>   <span class=\"number\">3</span>/<span class=\"number\">3</span>     <span class=\"number\">3</span>            <span class=\"number\">3</span>           <span class=\"number\">15</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看rs</span></span><br><span class=\"line\"><span class=\"comment\"># 发现rs的名称是在原来deployment的名字后面添加了一个10位数的随机串</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev</span></span><br><span class=\"line\">NAME                       DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span>   <span class=\"number\">3</span>         <span class=\"number\">3</span>         <span class=\"number\">3</span>       <span class=\"number\">23</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-d2c8n</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">107</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-smpvp</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">107</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-wvjd8</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">107</span>s</span><br></pre></td></tr></table></figure>\n\n<p><strong>扩缩容</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变更副本数量为5个</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl scale deploy pc-deployment --replicas=5  -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> scaled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看deployment</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deploy pc-deployment -n dev</span></span><br><span class=\"line\">NAME            READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span>   <span class=\"number\">5</span>/<span class=\"number\">5</span>     <span class=\"number\">5</span>            <span class=\"number\">5</span>           <span class=\"number\">2</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-d2c8n</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">4</span>m19s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-jxmdq</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">94</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-mktqv</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">93</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-smpvp</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">4</span>m19s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-wvjd8</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">4</span>m19s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑deployment的副本数量，修改spec:replicas: 4即可</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl edit deploy pc-deployment -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> edited</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-d2c8n</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>m23s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-jxmdq</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">2</span>m38s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-smpvp</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>m23s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span><span class=\"literal\">-wvjd8</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>m23s</span><br></pre></td></tr></table></figure>\n\n<p><strong>镜像更新</strong></p>\n<p>deployment支持两种更新策略:<code>重建更新</code>和<code>滚动更新</code>,可以通过<code>strategy</code>指定策略类型,支持两个属性:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">strategy：指定新的Pod替换旧的Pod的策略， 支持两个属性：</span><br><span class=\"line\">  type：指定策略类型，支持两种策略</span><br><span class=\"line\"><span class=\"code\">    Recreate：在创建出新的Pod之前会先杀掉所有已存在的Pod</span></span><br><span class=\"line\"><span class=\"code\">    RollingUpdate：滚动更新，就是杀死一部分，就启动一部分，在更新过程中，存在两个版本Pod</span></span><br><span class=\"line\"><span class=\"code\">  rollingUpdate：当type为RollingUpdate时生效，用于为RollingUpdate设置参数，支持两个属性：</span></span><br><span class=\"line\"><span class=\"code\">    maxUnavailable：用来指定在升级过程中不可用Pod的最大数量，默认为25%。</span></span><br><span class=\"line\"><span class=\"code\">    maxSurge： 用来指定在升级过程中可以超过期望的Pod的最大数量，默认为25%。</span></span><br></pre></td></tr></table></figure>\n\n<p>重建更新</p>\n<ol>\n<li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> <span class=\"comment\"># 策略</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span> <span class=\"comment\"># 重建更新</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建deploy进行验证</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变更镜像</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl set image deployment pc-deployment nginx=nginx:1.17.2 -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> image updated</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 观察升级过程</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl get pods -n dev -w</span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-65qcw</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-w5nzv</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-xpt7w</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-xpt7w</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">41</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-65qcw</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">41</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-w5nzv</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating   <span class=\"number\">0</span>          <span class=\"number\">41</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-grn8z</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending       <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-hbl4v</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending       <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-67nz2</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending       <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-grn8z</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-hbl4v</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-67nz2</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-grn8z</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">1</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-67nz2</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">1</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span><span class=\"literal\">-hbl4v</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">2</span>s</span><br></pre></td></tr></table></figure>\n\n<p>滚动更新</p>\n<ol>\n<li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span> <span class=\"comment\"># 策略</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span> <span class=\"comment\"># 滚动更新策略</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span> </span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建deploy进行验证</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变更镜像</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl set image deployment pc-deployment nginx=nginx:1.17.3 -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> image updated</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 观察升级过程</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -w</span></span><br><span class=\"line\">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-8rbzt</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-h4p68</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-hlmz4</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-rrqcn</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">31</span>m</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-226rx</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-226rx</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-226rx</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">1</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-h4p68</span>    <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">34</span>m</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-cnd44</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-cnd44</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-cnd44</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">2</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-hlmz4</span>    <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">34</span>m</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-px48p</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-px48p</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-px48p</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-8rbzt</span>    <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">34</span>m</span><br><span class=\"line\"></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-dkmqp</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-dkmqp</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span><span class=\"literal\">-dkmqp</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">2</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span><span class=\"literal\">-rrqcn</span>    <span class=\"number\">0</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">34</span>m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 至此，新版本的pod创建完毕，就版本的pod销毁完毕</span></span><br><span class=\"line\"><span class=\"comment\"># 中间过程是滚动进行的，也就是边销毁边创建</span></span><br></pre></td></tr></table></figure>\n\n<p>滚动更新的过程：</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200416140251491.png\" style=\"zoom:150%;border:1px solid\">\n\n<p>镜像更新中rs的变化:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看rs,发现原来的rs的依旧存在，只是pod数量变为了0，而后又新产生了一个rs，pod数量为4</span></span><br><span class=\"line\"><span class=\"comment\"># 其实这就是deployment能够进行版本回退的奥妙所在，后面会详细解释</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev</span></span><br><span class=\"line\">NAME                       DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span>   <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">7</span>m37s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b11</span>   <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">5</span>m37s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d76789</span>   <span class=\"number\">4</span>         <span class=\"number\">4</span>         <span class=\"number\">4</span>       <span class=\"number\">72</span>s</span><br></pre></td></tr></table></figure>\n\n<p><strong>版本回退</strong></p>\n<p>deployment支持版本升级过程中的暂停、继续功能以及版本回退等诸多功能，下面具体来看.</p>\n<p>kubectl rollout： 版本升级相关功能，支持下面的选项：</p>\n<ul>\n<li><p>status       显示当前升级状态</p>\n</li>\n<li><p>history     显示 升级历史记录</p>\n</li>\n<li><p>pause       暂停版本升级过程</p>\n</li>\n<li><p>resume    继续已经暂停的版本升级过程</p>\n</li>\n<li><p>restart      重启版本升级过程</p>\n</li>\n<li><p>undo        回滚到上一级版本（可以使用–to-revision回滚到指定版本）</p>\n</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前升级版本的状态</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl rollout status deploy pc-deployment -n dev</span></span><br><span class=\"line\">deployment <span class=\"string\">&quot;pc-deployment&quot;</span> successfully rolled out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看升级历史记录</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl rollout history deploy pc-deployment -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span></span><br><span class=\"line\">REVISION  CHANGE<span class=\"literal\">-CAUSE</span></span><br><span class=\"line\"><span class=\"number\">1</span>         kubectl create -<span class=\"literal\">-filename</span>=pc<span class=\"literal\">-deployment</span>.yaml -<span class=\"literal\">-record</span>=true</span><br><span class=\"line\"><span class=\"number\">2</span>         kubectl create -<span class=\"literal\">-filename</span>=pc<span class=\"literal\">-deployment</span>.yaml -<span class=\"literal\">-record</span>=true</span><br><span class=\"line\"><span class=\"number\">3</span>         kubectl create -<span class=\"literal\">-filename</span>=pc<span class=\"literal\">-deployment</span>.yaml -<span class=\"literal\">-record</span>=true</span><br><span class=\"line\"><span class=\"comment\"># 可以发现有三次版本记录，说明完成过两次升级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 版本回滚</span></span><br><span class=\"line\"><span class=\"comment\"># 这里直接使用--to-revision=1回滚到了1版本， 如果省略这个选项，就是回退到上个版本，就是2版本</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl rollout undo deployment pc-deployment --to-revision=1 -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> rolled back</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看发现，通过nginx镜像版本可以发现到了第一版</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deploy -n dev -o wide</span></span><br><span class=\"line\">NAME            READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES         </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span>   <span class=\"number\">4</span>/<span class=\"number\">4</span>     <span class=\"number\">4</span>            <span class=\"number\">4</span>           <span class=\"number\">74</span>m   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看rs，发现第一个rs中有4个pod运行，后面两个版本的rs中pod为运行</span></span><br><span class=\"line\"><span class=\"comment\"># 其实deployment之所以可是实现版本的回滚，就是通过记录下历史rs来实现的，</span></span><br><span class=\"line\"><span class=\"comment\"># 一旦想回滚到哪个版本，只需要将当前版本pod数量降为0，然后将回滚版本的pod提升为目标数量就可以了</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev</span></span><br><span class=\"line\">NAME                       DESIRED   CURRENT   READY   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6696798b78</span>   <span class=\"number\">4</span>         <span class=\"number\">4</span>         <span class=\"number\">4</span>       <span class=\"number\">78</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-966bf7f44</span>    <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">37</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-c848d767</span>     <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">71</span>m</span><br></pre></td></tr></table></figure>\n\n<p><strong>金丝雀发布</strong></p>\n<p>​    Deployment控制器支持控制更新过程中的控制，如“暂停(pause)”或“继续(resume)”更新操作。</p>\n<p>​    比如有一批新的Pod资源创建完成后立即暂停更新过程，此时，仅存在一部分新版本的应用，主体部分还是旧的版本。然后，再筛选一小部分的用户请求路由到新版本的Pod应用，继续观察能否稳定地按期望的方式运行。确定没问题之后再继续完成余下的Pod资源滚动更新，否则立即回滚更新操作。这就是所谓的金丝雀发布。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新deployment的版本，并配置暂停deployment</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl set image deploy pc-deployment nginx=nginx:1.17.4 -n dev &amp;&amp; kubectl rollout pause deployment pc-deployment  -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> image updated</span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> paused</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#观察更新状态</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl rollout status deploy pc-deployment -n dev　</span></span><br><span class=\"line\">Waiting <span class=\"keyword\">for</span> deployment <span class=\"string\">&quot;pc-deployment&quot;</span> rollout to finish: <span class=\"number\">2</span> out of <span class=\"number\">4</span> new replicas have been updated...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控更新的过程，可以看到已经新增了一个资源，但是并未按照预期的状态去删除一个旧的资源，就是因为使用了pause暂停命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev -o wide</span></span><br><span class=\"line\">NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span>   <span class=\"number\">3</span>         <span class=\"number\">3</span>         <span class=\"number\">3</span>       <span class=\"number\">19</span>m     nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span>   </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span>   <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">14</span>m     nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">2</span>   </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span>   <span class=\"number\">2</span>         <span class=\"number\">2</span>         <span class=\"number\">2</span>       <span class=\"number\">3</span>m16s   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">4</span>   </span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-rj8sq</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">7</span>m33s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-ttwgg</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">7</span>m35s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span><span class=\"literal\">-v4wvc</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">7</span>m34s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span><span class=\"literal\">-996rt</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">3</span>m31s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span><span class=\"literal\">-j2gtj</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">3</span>m31s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确保更新的pod没问题了，继续更新</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl rollout resume deploy pc-deployment -n dev</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> resumed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看最后的更新情况</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get rs -n dev -o wide</span></span><br><span class=\"line\">NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-5d89bdfbf9</span>   <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">21</span>m     nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span>   </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-675d469f8b</span>   <span class=\"number\">0</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span>       <span class=\"number\">16</span>m     nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">2</span>   </span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span>   <span class=\"number\">4</span>         <span class=\"number\">4</span>         <span class=\"number\">4</span>       <span class=\"number\">5</span>m11s   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">4</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span><span class=\"literal\">-7bfwh</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">37</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span><span class=\"literal\">-996rt</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>m27s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span><span class=\"literal\">-j2gtj</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>m27s</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-6c9f56fcfb</span><span class=\"literal\">-rf84v</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">37</span>s</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除Deployment</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除deployment，其下的rs和pod也将被删除</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pc-deployment.yaml</span></span><br><span class=\"line\">deployment.apps <span class=\"string\">&quot;pc-deployment&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Horizontal-Pod-Autoscaler-HPA\"><a href=\"#Horizontal-Pod-Autoscaler-HPA\" class=\"headerlink\" title=\"Horizontal Pod Autoscaler(HPA)\"></a>Horizontal Pod Autoscaler(HPA)</h2><p>​    在前面的课程中，我们已经可以实现通过手工执行<code>kubectl scale</code>命令实现Pod扩容或缩容，但是这显然不符合Kubernetes的定位目标–自动化、智能化。 Kubernetes期望可以实现通过监测Pod的使用情况，实现pod数量的自动调整，于是就产生了Horizontal Pod Autoscaler（HPA）这种控制器。</p>\n<p>​    HPA可以获取每个Pod利用率，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现Pod的数量的调整。其实HPA与之前的Deployment一样，也属于一种Kubernetes资源对象，它通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200608155858271.png\" style=\"border: 1px solid; zoom: 80%;\">\n\n<p>接下来，我们来做一个实验</p>\n<p><strong>1 安装metrics-server</strong></p>\n<p>metrics-server可以用来收集集群中的资源使用情况</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># yum install git -y</span></span><br><span class=\"line\"><span class=\"comment\"># 获取metrics-server, 注意使用的版本</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># git clone -b v0.3.6 https://github.com/kubernetes-incubator/metrics-server</span></span><br><span class=\"line\"><span class=\"comment\"># 修改deployment, 注意修改的是镜像和初始化参数</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># cd /root/metrics-server/deploy/1.8+/</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># vim metrics-server-deployment.yaml</span></span><br><span class=\"line\">按图中添加下面选项</span><br><span class=\"line\">hostNetwork: true</span><br><span class=\"line\">image: registry.cn<span class=\"literal\">-hangzhou</span>.aliyuncs.com/google_containers/metrics<span class=\"literal\">-server</span><span class=\"literal\">-amd64</span>:v0.<span class=\"number\">3.6</span></span><br><span class=\"line\">args:</span><br><span class=\"line\">- -<span class=\"literal\">-kubelet</span><span class=\"literal\">-insecure</span><span class=\"literal\">-tls</span></span><br><span class=\"line\">- -<span class=\"literal\">-kubelet</span><span class=\"literal\">-preferred</span><span class=\"literal\">-address</span><span class=\"literal\">-types</span>=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200608163326496.png\" alt=\"image-20200608163326496\"></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装metrics-server</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl apply -f ./</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod运行情况</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl get pod -n kube-system</span></span><br><span class=\"line\">metrics<span class=\"literal\">-server</span><span class=\"literal\">-6b976979db</span><span class=\"literal\">-2xwbj</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">90</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用kubectl top node 查看资源使用情况</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl top node</span></span><br><span class=\"line\">NAME     CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">master   <span class=\"number\">98</span>m          <span class=\"number\">4</span>%     <span class=\"number\">1067</span><span class=\"built_in\">Mi</span>          <span class=\"number\">62</span>%</span><br><span class=\"line\">node1    <span class=\"number\">27</span>m          <span class=\"number\">1</span>%     <span class=\"number\">727</span><span class=\"built_in\">Mi</span>           <span class=\"number\">42</span>%</span><br><span class=\"line\">node2    <span class=\"number\">34</span>m          <span class=\"number\">1</span>%     <span class=\"number\">800</span><span class=\"built_in\">Mi</span>           <span class=\"number\">46</span>%</span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl top pod -n kube-system</span></span><br><span class=\"line\">NAME                              CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">coredns<span class=\"literal\">-6955765f44</span><span class=\"literal\">-7ptsb</span>          <span class=\"number\">3</span>m           <span class=\"number\">9</span><span class=\"built_in\">Mi</span></span><br><span class=\"line\">coredns<span class=\"literal\">-6955765f44</span><span class=\"literal\">-vcwr5</span>          <span class=\"number\">3</span>m           <span class=\"number\">8</span><span class=\"built_in\">Mi</span></span><br><span class=\"line\">etcd<span class=\"literal\">-master</span>                       <span class=\"number\">14</span>m          <span class=\"number\">145</span><span class=\"built_in\">Mi</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 至此,metrics-server安装完成</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2 准备deployment和servie</strong></p>\n<p>为了操作简单,直接使用命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建deployment </span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl run nginx --image=nginx:latest --requests=cpu=100m -n dev</span></span><br><span class=\"line\"><span class=\"comment\"># 创建service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl expose deployment nginx --type=NodePort --port=80 -n dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl get deployment,pod,svc -n dev</span></span><br><span class=\"line\">NAME                    READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE</span><br><span class=\"line\">deployment.apps/nginx   <span class=\"number\">1</span>/<span class=\"number\">1</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">47</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-bh8dr</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">47</span>s</span><br><span class=\"line\"></span><br><span class=\"line\">NAME            <span class=\"built_in\">TYPE</span>       CLUSTER<span class=\"literal\">-IP</span>      EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)        AGE</span><br><span class=\"line\">service/nginx   NodePort   <span class=\"number\">10.109</span>.<span class=\"number\">57.248</span>   &lt;none&gt;        <span class=\"number\">80</span>:<span class=\"number\">31136</span>/TCP   <span class=\"number\">35</span>s</span><br></pre></td></tr></table></figure>\n\n<p><strong>3 部署HPA</strong></p>\n<p>创建pc-hpa.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-hpa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span>  <span class=\"comment\">#最小pod数量</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">10</span> <span class=\"comment\">#最大pod数量</span></span><br><span class=\"line\">  <span class=\"attr\">targetCPUUtilizationPercentage:</span> <span class=\"number\">3</span> <span class=\"comment\"># CPU使用率指标</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span>   <span class=\"comment\"># 指定要控制的nginx信息</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建hpa</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl create -f pc-hpa.yaml</span></span><br><span class=\"line\">horizontalpodautoscaler.autoscaling/pc<span class=\"literal\">-hpa</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看hpa</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"number\">1.8</span>+]<span class=\"comment\"># kubectl get hpa -n dev</span></span><br><span class=\"line\">NAME     REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">0</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">1</span>          <span class=\"number\">62</span>s</span><br></pre></td></tr></table></figure>\n\n<p><strong>4 测试</strong></p>\n<p>使用压测工具对service地址<code>192.168.109.100:31136</code>进行压测，然后通过控制台查看hpa和pod的变化</p>\n<p><code>hpa变化</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get hpa -n dev -w</span></span><br><span class=\"line\">NAME     REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">0</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">1</span>          <span class=\"number\">4</span>m11s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">0</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">1</span>          <span class=\"number\">5</span>m19s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">22</span>%/<span class=\"number\">3</span>%    <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">1</span>          <span class=\"number\">6</span>m50s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">22</span>%/<span class=\"number\">3</span>%    <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">4</span>          <span class=\"number\">7</span>m5s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">22</span>%/<span class=\"number\">3</span>%    <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">8</span>          <span class=\"number\">7</span>m21s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">6</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">8</span>          <span class=\"number\">7</span>m51s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">0</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">8</span>          <span class=\"number\">9</span>m6s</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">0</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">8</span>          <span class=\"number\">13</span>m</span><br><span class=\"line\">pc<span class=\"literal\">-hpa</span>   Deployment/nginx   <span class=\"number\">0</span>%/<span class=\"number\">3</span>%     <span class=\"number\">1</span>         <span class=\"number\">10</span>        <span class=\"number\">1</span>          <span class=\"number\">14</span>m</span><br></pre></td></tr></table></figure>\n\n<p><code>deployment变化</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get deployment -n dev -w</span></span><br><span class=\"line\">NAME    READY   UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>   AVAILABLE   AGE</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">1</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">11</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">4</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">13</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">4</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">13</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">4</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">13</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">4</span>     <span class=\"number\">4</span>            <span class=\"number\">1</span>           <span class=\"number\">13</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">8</span>     <span class=\"number\">4</span>            <span class=\"number\">1</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">8</span>     <span class=\"number\">4</span>            <span class=\"number\">1</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">8</span>     <span class=\"number\">4</span>            <span class=\"number\">1</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">1</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">2</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">2</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">3</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">3</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">4</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">4</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">5</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">5</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">6</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">6</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">7</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">7</span>           <span class=\"number\">14</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">8</span>/<span class=\"number\">8</span>     <span class=\"number\">8</span>            <span class=\"number\">8</span>           <span class=\"number\">15</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">8</span>/<span class=\"number\">1</span>     <span class=\"number\">8</span>            <span class=\"number\">8</span>           <span class=\"number\">20</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">8</span>/<span class=\"number\">1</span>     <span class=\"number\">8</span>            <span class=\"number\">8</span>           <span class=\"number\">20</span>m</span><br><span class=\"line\">nginx   <span class=\"number\">1</span>/<span class=\"number\">1</span>     <span class=\"number\">1</span>            <span class=\"number\">1</span>           <span class=\"number\">20</span>m</span><br></pre></td></tr></table></figure>\n\n<p><code>pod变化</code></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -w</span></span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-bh8dr</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">11</span>m</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-cpgrv</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-8zhwk</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-rr9bn</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-cpgrv</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-8zhwk</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-rr9bn</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-m9gsj</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-g56qb</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-sl9c6</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-fgst7</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-g56qb</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-m9gsj</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-sl9c6</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-fgst7</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-8zhwk</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">19</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-rr9bn</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">30</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-m9gsj</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">21</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-cpgrv</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">47</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-sl9c6</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">33</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-g56qb</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">48</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-fgst7</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">66</span>s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-fgst7</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">6</span>m50s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-8zhwk</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">7</span>m5s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-cpgrv</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">7</span>m5s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-g56qb</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">6</span>m50s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-rr9bn</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">7</span>m5s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-m9gsj</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">6</span>m50s</span><br><span class=\"line\">nginx<span class=\"literal\">-7df9756ccc</span><span class=\"literal\">-sl9c6</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Terminating         <span class=\"number\">0</span>          <span class=\"number\">6</span>m50s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DaemonSet-DS\"><a href=\"#DaemonSet-DS\" class=\"headerlink\" title=\"DaemonSet(DS)\"></a>DaemonSet(DS)</h2><p>​    DaemonSet类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个Pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。</p>\n<p><img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200612010223537.png\"></p>\n<p>DaemonSet控制器的特点：</p>\n<ul>\n<li>每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上</li>\n<li>当节点从集群中移除时，Pod 也就被垃圾回收了</li>\n</ul>\n<p>下面先来看下DaemonSet的资源清单文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> <span class=\"comment\"># 版本号</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span> <span class=\"comment\"># 类型       </span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"comment\"># rs名称 </span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"comment\"># 所属命名空间 </span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#标签</span></span><br><span class=\"line\">    <span class=\"attr\">controller:</span> <span class=\"string\">daemonset</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\"># 详情描述</span></span><br><span class=\"line\">  <span class=\"attr\">revisionHistoryLimit:</span> <span class=\"number\">3</span> <span class=\"comment\"># 保留历史版本</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span> <span class=\"comment\"># 更新策略</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span> <span class=\"comment\"># 滚动更新策略</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span> <span class=\"comment\"># 滚动更新</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span> <span class=\"comment\"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>      <span class=\"comment\"># Labels匹配规则</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># Expressions匹配规则</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">app</span>, <span class=\"attr\">operator:</span> <span class=\"string\">In</span>, <span class=\"attr\">values:</span> [<span class=\"string\">nginx-pod</span>]&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span> <span class=\"comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<p>创建pc-daemonset.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span>      </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-daemonset</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> </span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建daemonset</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f  pc-daemonset.yaml</span></span><br><span class=\"line\">daemonset.apps/pc<span class=\"literal\">-daemonset</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看daemonset</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl get ds -n dev -o wide</span></span><br><span class=\"line\">NAME        DESIRED  CURRENT  READY  UP<span class=\"literal\">-TO</span><span class=\"literal\">-DATE</span>  AVAILABLE   AGE   CONTAINERS   IMAGES         </span><br><span class=\"line\">pc<span class=\"literal\">-daemonset</span>   <span class=\"number\">2</span>        <span class=\"number\">2</span>        <span class=\"number\">2</span>      <span class=\"number\">2</span>           <span class=\"number\">2</span>        <span class=\"number\">24</span>s   nginx        nginx:<span class=\"number\">1.17</span>.<span class=\"number\">1</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod,发现在每个Node上都运行一个pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\">#  kubectl get pods -n dev -o wide</span></span><br><span class=\"line\">NAME                 READY   STATUS    RESTARTS   AGE   IP            NODE    </span><br><span class=\"line\">pc<span class=\"literal\">-daemonset</span><span class=\"literal\">-9bck8</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">37</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">1.43</span>   node1     </span><br><span class=\"line\">pc<span class=\"literal\">-daemonset</span><span class=\"literal\">-k224w</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">37</span>s   <span class=\"number\">10.244</span>.<span class=\"number\">2.74</span>   node2      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除daemonset</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pc-daemonset.yaml</span></span><br><span class=\"line\">daemonset.apps <span class=\"string\">&quot;pc-daemonset&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Job\"><a href=\"#Job\" class=\"headerlink\" title=\"Job\"></a>Job</h2><p>Job，主要用于负责**批量处理(一次要处理指定数量任务)<strong>短暂的</strong>一次性(每个任务仅运行一次就结束)**任务。Job特点如下：</p>\n<ul>\n<li>当Job创建的pod执行成功结束时，Job将记录成功结束的pod数量</li>\n<li>当成功结束的pod达到指定的数量时，Job将完成执行</li>\n</ul>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200618213054113.png\" style=\"zoom:80%;\">\n\n<p>Job的资源清单文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span> <span class=\"comment\"># 版本号</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span> <span class=\"comment\"># 类型       </span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"comment\"># rs名称 </span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"comment\"># 所属命名空间 </span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#标签</span></span><br><span class=\"line\">    <span class=\"attr\">controller:</span> <span class=\"string\">job</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\"># 详情描述</span></span><br><span class=\"line\">  <span class=\"attr\">completions:</span> <span class=\"number\">1</span> <span class=\"comment\"># 指定job需要成功运行Pods的次数。默认值: 1</span></span><br><span class=\"line\">  <span class=\"attr\">parallelism:</span> <span class=\"number\">1</span> <span class=\"comment\"># 指定job在任一时刻应该并发运行Pods的数量。默认值: 1</span></span><br><span class=\"line\">  <span class=\"attr\">activeDeadlineSeconds:</span> <span class=\"number\">30</span> <span class=\"comment\"># 指定job可运行的时间期限，超过时间还未结束，系统将会尝试进行终止。</span></span><br><span class=\"line\">  <span class=\"attr\">backoffLimit:</span> <span class=\"number\">6</span> <span class=\"comment\"># 指定job失败后进行重试的次数。默认是6</span></span><br><span class=\"line\">  <span class=\"attr\">manualSelector:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 是否可以使用selector选择器选择pod，默认是false</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 选择器，通过它指定该控制器管理哪些pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>      <span class=\"comment\"># Labels匹配规则</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">counter-pod</span></span><br><span class=\"line\">    <span class=\"attr\">matchExpressions:</span> <span class=\"comment\"># Expressions匹配规则</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">app</span>, <span class=\"attr\">operator:</span> <span class=\"string\">In</span>, <span class=\"attr\">values:</span> [<span class=\"string\">counter-pod</span>]&#125;</span><br><span class=\"line\">  <span class=\"attr\">template:</span> <span class=\"comment\"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">counter-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span> <span class=\"comment\"># 重启策略只能设置为Never或者OnFailure</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">counter</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 2;done&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">关于重启策略设置的说明：</span><br><span class=\"line\"><span class=\"code\">    如果指定为OnFailure，则job会在pod出现故障时重启容器，而不是创建pod，failed次数不变</span></span><br><span class=\"line\"><span class=\"code\">    如果指定为Never，则job会在pod出现故障时创建新的pod，并且故障pod不会消失，也不会重启，failed次数加1</span></span><br><span class=\"line\"><span class=\"code\">    如果指定为Always的话，就意味着一直重启，意味着job任务会重复去执行了，当然不对，所以不能设置为Always</span></span><br></pre></td></tr></table></figure>\n\n<p>创建pc-job.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span>      </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-job</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">manualSelector:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">counter-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">counter-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">counter</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建job</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pc-job.yaml</span></span><br><span class=\"line\">job.batch/pc<span class=\"literal\">-job</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看job</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get job -n dev -o wide  -w</span></span><br><span class=\"line\">NAME     COMPLETIONS   DURATION   AGE   CONTAINERS   IMAGES         SELECTOR</span><br><span class=\"line\">pc<span class=\"literal\">-job</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>           <span class=\"number\">21</span>s        <span class=\"number\">21</span>s   counter      busybox:<span class=\"number\">1.30</span>   app=counter<span class=\"literal\">-pod</span></span><br><span class=\"line\">pc<span class=\"literal\">-job</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>           <span class=\"number\">31</span>s        <span class=\"number\">79</span>s   counter      busybox:<span class=\"number\">1.30</span>   app=counter<span class=\"literal\">-pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过观察pod状态可以看到，pod在运行完毕任务后，就会变成Completed状态</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -w</span></span><br><span class=\"line\">NAME           READY   STATUS     RESTARTS      AGE</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-rxg96</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running     <span class=\"number\">0</span>            <span class=\"number\">29</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-rxg96</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed   <span class=\"number\">0</span>            <span class=\"number\">33</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来，调整下pod运行的总数量和并行数量 即：在spec下设置下面两个选项</span></span><br><span class=\"line\"><span class=\"comment\">#  completions: 6 # 指定job需要成功运行Pods的次数为6</span></span><br><span class=\"line\"><span class=\"comment\">#  parallelism: 3 # 指定job并发运行Pods的数量为3</span></span><br><span class=\"line\"><span class=\"comment\">#  然后重新运行job，观察效果，此时会发现，job会每次运行3个pod，总共执行了6个pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -w</span></span><br><span class=\"line\">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-684ft</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-jhj49</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-pfcvh</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">5</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-684ft</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed   <span class=\"number\">0</span>          <span class=\"number\">11</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-v7rhr</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending     <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-v7rhr</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending     <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-v7rhr</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-jhj49</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed           <span class=\"number\">0</span>          <span class=\"number\">11</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-fhwf7</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-fhwf7</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-pfcvh</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed           <span class=\"number\">0</span>          <span class=\"number\">11</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-5vg2j</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-fhwf7</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-5vg2j</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Pending             <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-5vg2j</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     ContainerCreating   <span class=\"number\">0</span>          <span class=\"number\">0</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-fhwf7</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">2</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-v7rhr</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">2</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-5vg2j</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running             <span class=\"number\">0</span>          <span class=\"number\">3</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-fhwf7</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed           <span class=\"number\">0</span>          <span class=\"number\">12</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-v7rhr</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed           <span class=\"number\">0</span>          <span class=\"number\">12</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-job</span><span class=\"literal\">-5vg2j</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed           <span class=\"number\">0</span>          <span class=\"number\">12</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除job</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f pc-job.yaml</span></span><br><span class=\"line\">job.batch <span class=\"string\">&quot;pc-job&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CronJob-CJ\"><a href=\"#CronJob-CJ\" class=\"headerlink\" title=\"CronJob(CJ)\"></a>CronJob(CJ)</h2><p>​    CronJob控制器以Job控制器资源为其管控对象，并借助它管理pod资源对象，Job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但CronJob可以以类似于Linux操作系统的周期性任务作业计划的方式控制其运行<strong>时间点</strong>及<strong>重复运行</strong>的方式。也就是说，<strong>CronJob可以在特定的时间点(反复的)去运行job任务</strong>。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200618213149531.png\" style=\"zoom:80%;\">\n\n<p>CronJob的资源清单文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1beta1</span> <span class=\"comment\"># 版本号</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span> <span class=\"comment\"># 类型       </span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"comment\"># rs名称 </span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"comment\"># 所属命名空间 </span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\">#标签</span></span><br><span class=\"line\">    <span class=\"attr\">controller:</span> <span class=\"string\">cronjob</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\"># 详情描述</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"comment\"># cron格式的作业调度运行时间点,用于控制任务在什么时间执行</span></span><br><span class=\"line\">  <span class=\"attr\">concurrencyPolicy:</span> <span class=\"comment\"># 并发执行策略，用于定义前一次作业运行尚未完成时是否以及如何运行后一次的作业</span></span><br><span class=\"line\">  <span class=\"attr\">failedJobHistoryLimit:</span> <span class=\"comment\"># 为失败的任务执行保留的历史记录数，默认为1</span></span><br><span class=\"line\">  <span class=\"attr\">successfulJobHistoryLimit:</span> <span class=\"comment\"># 为成功的任务执行保留的历史记录数，默认为3</span></span><br><span class=\"line\">  <span class=\"attr\">startingDeadlineSeconds:</span> <span class=\"comment\"># 启动作业错误的超时时长</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span> <span class=\"comment\"># job控制器模板，用于为cronjob控制器生成job对象;下面其实就是job的定义</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">completions:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">parallelism:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">activeDeadlineSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">backoffLimit:</span> <span class=\"number\">6</span></span><br><span class=\"line\">      <span class=\"attr\">manualSelector:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">selector:</span></span><br><span class=\"line\">        <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">counter-pod</span></span><br><span class=\"line\">        <span class=\"attr\">matchExpressions:</span> <span class=\"string\">规则</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> &#123;<span class=\"attr\">key:</span> <span class=\"string\">app</span>, <span class=\"attr\">operator:</span> <span class=\"string\">In</span>, <span class=\"attr\">values:</span> [<span class=\"string\">counter-pod</span>]&#125;</span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">metadata:</span></span><br><span class=\"line\">          <span class=\"attr\">labels:</span></span><br><span class=\"line\">            <span class=\"attr\">app:</span> <span class=\"string\">counter-pod</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span> </span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">counter</span></span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 20;done&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">需要重点解释的几个选项：</span><br><span class=\"line\">schedule: cron表达式，用于指定任务的执行时间</span><br><span class=\"line\"><span class=\"code\">\t*/1    *      *    *     *</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;分钟&gt; &lt;小时&gt; &lt;日&gt; &lt;月份&gt; &lt;星期&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">    分钟 值从 0 到 59.</span></span><br><span class=\"line\"><span class=\"code\">    小时 值从 0 到 23.</span></span><br><span class=\"line\"><span class=\"code\">    日 值从 1 到 31.</span></span><br><span class=\"line\"><span class=\"code\">    月 值从 1 到 12.</span></span><br><span class=\"line\"><span class=\"code\">    星期 值从 0 到 6, 0 代表星期日</span></span><br><span class=\"line\"><span class=\"code\">    多个时间可以用逗号隔开； 范围可以用连字符给出；*可以作为通配符； /表示每...</span></span><br><span class=\"line\"><span class=\"code\">concurrencyPolicy:</span></span><br><span class=\"line\"><span class=\"code\">\tAllow:   允许Jobs并发运行(默认)</span></span><br><span class=\"line\"><span class=\"code\">\tForbid:  禁止并发运行，如果上一次运行尚未完成，则跳过下一次运行</span></span><br><span class=\"line\"><span class=\"code\">\tReplace: 替换，取消当前正在运行的作业并用新作业替换它</span></span><br></pre></td></tr></table></figure>\n\n<p>创建pc-cronjob.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-cronjob</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">controller:</span> <span class=\"string\">cronjob</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&quot;*/1 * * * *&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span></span><br><span class=\"line\">        <span class=\"attr\">spec:</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">counter</span></span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">busybox:1.30</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;bin/sh&quot;</span>,<span class=\"string\">&quot;-c&quot;</span>,<span class=\"string\">&quot;for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建cronjob</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f pc-cronjob.yaml</span></span><br><span class=\"line\">cronjob.batch/pc<span class=\"literal\">-cronjob</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看cronjob</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get cronjobs -n dev</span></span><br><span class=\"line\">NAME         SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span>   */<span class=\"number\">1</span> * * * *   False     <span class=\"number\">0</span>        &lt;none&gt;          <span class=\"number\">6</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看job</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get jobs -n dev</span></span><br><span class=\"line\">NAME                    COMPLETIONS   DURATION   AGE</span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span><span class=\"literal\">-1592587800</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>           <span class=\"number\">28</span>s        <span class=\"number\">3</span>m26s</span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span><span class=\"literal\">-1592587860</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>           <span class=\"number\">28</span>s        <span class=\"number\">2</span>m26s</span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span><span class=\"literal\">-1592587920</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>           <span class=\"number\">28</span>s        <span class=\"number\">86</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev</span></span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span><span class=\"literal\">-1592587800</span><span class=\"literal\">-x4tsm</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed   <span class=\"number\">0</span>          <span class=\"number\">2</span>m24s</span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span><span class=\"literal\">-1592587860</span><span class=\"literal\">-r5gv4</span>   <span class=\"number\">0</span>/<span class=\"number\">1</span>     Completed   <span class=\"number\">0</span>          <span class=\"number\">84</span>s</span><br><span class=\"line\">pc<span class=\"literal\">-cronjob</span><span class=\"literal\">-1592587920</span><span class=\"literal\">-9dxxq</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running     <span class=\"number\">0</span>          <span class=\"number\">24</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除cronjob</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl  delete -f pc-cronjob.yaml</span></span><br><span class=\"line\">cronjob.batch <span class=\"string\">&quot;pc-cronjob&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"第七章-Service详解\"><a href=\"#第七章-Service详解\" class=\"headerlink\" title=\"第七章 Service详解\"></a>第七章 Service详解</h1><p>本章节主要介绍kubernetes的流量负载组件：Service和Ingress。</p>\n<h2 id=\"Service介绍\"><a href=\"#Service介绍\" class=\"headerlink\" title=\"Service介绍\"></a>Service介绍</h2><p>​    在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip对服务进行访问。</p>\n<p>​    为了解决这个问题，kubernetes提供了Service资源，Service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问Service的入口地址就能访问到后面的pod服务。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200408194716912.png\" style=\"zoom:100%;border:1px solid\">\n\n<p>​    Service在很多情况下只是一个概念，真正起作用的其实是kube-proxy服务进程，每个Node节点上都运行着一个kube-proxy服务进程。当创建Service的时候会通过api-server向etcd写入创建的service的信息，而kube-proxy会基于监听的机制发现这种Service的变动，然后<strong>它会将最新的Service信息转换成对应的访问规则</strong>。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200509121254425.png\" style=\"border:1px solid\">\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 10.97.97.97:80 是service提供的访问入口</span></span><br><span class=\"line\"><span class=\"comment\"># 当访问这个入口的时候，可以发现后面有三个pod的服务在等待调用，</span></span><br><span class=\"line\"><span class=\"comment\"># kube-proxy会基于rr（轮询）的策略，将请求分发到其中一个pod上去</span></span><br><span class=\"line\"><span class=\"comment\"># 这个规则会同时在集群内的所有节点上都生成，所以在任何一个节点上访问都可以。</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">node1</span> ~]<span class=\"comment\"># ipvsadm -Ln</span></span><br><span class=\"line\">IP Virtual Server version <span class=\"number\">1.2</span>.<span class=\"number\">1</span> (size=<span class=\"number\">4096</span>)</span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class=\"line\">TCP  <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span>:<span class=\"number\">80</span> rr</span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>kube-proxy目前支持三种工作模式:</p>\n<p><strong>userspace 模式</strong></p>\n<p>​    userspace模式下，kube-proxy会为每一个Service创建一个监听端口，发向Cluster IP的请求被Iptables规则重定向到kube-proxy监听的端口上，kube-proxy根据LB算法选择一个提供服务的Pod并和其建立链接，以将请求转发到Pod上。<br>​    该模式下，kube-proxy充当了一个四层负责均衡器的角色。由于kube-proxy运行在userspace中，在进行转发处理时会增加内核和用户空间之间的数据拷贝，虽然比较稳定，但是效率比较低。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200509151424280.png\" style=\"border: 1px solid; zoom: 57%;\">\n\n<p><strong>iptables 模式</strong></p>\n<p>​    iptables模式下，kube-proxy为service后端的每个Pod创建对应的iptables规则，直接将发向Cluster IP的请求重定向到一个Pod IP。<br>​    该模式下kube-proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的LB策略，当后端Pod不可用时也无法进行重试。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200509152947714.png\" style=\"zoom: 57%;\">\n\n<p><strong>ipvs 模式</strong></p>\n<p>​    ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的LB算法。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200509153731363.png\" style=\"zoom: 57%\">\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此模式必须安装ipvs内核模块，否则会降级为iptables</span></span><br><span class=\"line\"><span class=\"comment\"># 开启ipvs</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl edit cm kube-proxy -n kube-system</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete pod -l k8s-app=kube-proxy -n kube-system</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">node1</span> ~]<span class=\"comment\"># ipvsadm -Ln</span></span><br><span class=\"line\">IP Virtual Server version <span class=\"number\">1.2</span>.<span class=\"number\">1</span> (size=<span class=\"number\">4096</span>)</span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class=\"line\">TCP  <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span>:<span class=\"number\">80</span> rr</span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Service类型\"><a href=\"#Service类型\" class=\"headerlink\" title=\"Service类型\"></a>Service类型</h2><p>Service的资源清单文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>  <span class=\"comment\"># 资源类型</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>  <span class=\"comment\"># 资源版本</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span> <span class=\"comment\"># 元数据</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service</span> <span class=\"comment\"># 资源名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span> <span class=\"comment\"># 命名空间</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> <span class=\"comment\"># 描述</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 标签选择器，用于确定当前service代理哪些pod</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"comment\"># Service类型，指定service的访问方式</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span>  <span class=\"comment\"># 虚拟服务的ip地址</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"comment\"># session亲和性，支持ClientIP、None两个选项</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span> <span class=\"comment\"># 端口信息</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span> </span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3017</span>  <span class=\"comment\"># service端口</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">5003</span> <span class=\"comment\"># pod端口</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">31122</span> <span class=\"comment\"># 主机端口</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ClusterIP：默认值，它是Kubernetes系统自动分配的虚拟IP，只能在集群内部访问</li>\n<li>NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务</li>\n<li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境支持</li>\n<li>ExternalName： 把集群外部的服务引入集群内部，直接使用</li>\n</ul>\n<h2 id=\"Service使用\"><a href=\"#Service使用\" class=\"headerlink\" title=\"Service使用\"></a>Service使用</h2><h3 id=\"实验环境准备\"><a href=\"#实验环境准备\" class=\"headerlink\" title=\"实验环境准备\"></a>实验环境准备</h3><p>在使用service之前，首先利用Deployment创建出3个pod，注意要为pod设置<code>app=nginx-pod</code>的标签</p>\n<p>创建deployment.yaml，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>      </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pc-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span> </span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f deployment.yaml</span></span><br><span class=\"line\">deployment.apps/pc<span class=\"literal\">-deployment</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get pods -n dev -o wide --show-labels</span></span><br><span class=\"line\">NAME                             READY   STATUS     IP            NODE     LABELS</span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-66cb59b984</span><span class=\"literal\">-8p84h</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running    <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>   node1    app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-66cb59b984</span><span class=\"literal\">-vx8vx</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running    <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>   node2    app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\">pc<span class=\"literal\">-deployment</span><span class=\"literal\">-66cb59b984</span><span class=\"literal\">-wnncx</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running    <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>   node1    app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为了方便后面的测试，修改下三台nginx的index.html页面（三台修改的IP地址不一致）</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># echo &quot;10.244.1.40&quot; &gt; /usr/share/nginx/html/index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改完毕之后，访问测试</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.244.1.40</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">1.40</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.244.2.33</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.244.1.39</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">1.39</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ClusterIP类型的Service\"><a href=\"#ClusterIP类型的Service\" class=\"headerlink\" title=\"ClusterIP类型的Service\"></a>ClusterIP类型的Service</h3><p>创建service-clusterip.yaml文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-clusterip</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"number\">10.97</span><span class=\"number\">.97</span><span class=\"number\">.97</span> <span class=\"comment\"># service的ip地址，如果不写，默认会生成一个</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>  <span class=\"comment\"># Service端口       </span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span> <span class=\"comment\"># pod端口</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f service-clusterip.yaml</span></span><br><span class=\"line\">service/service<span class=\"literal\">-clusterip</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get svc -n dev -o wide</span></span><br><span class=\"line\">NAME                <span class=\"built_in\">TYPE</span>        CLUSTER<span class=\"literal\">-IP</span>    EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)   AGE   SELECTOR</span><br><span class=\"line\">service<span class=\"literal\">-clusterip</span>   ClusterIP   <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span>   &lt;none&gt;        <span class=\"number\">80</span>/TCP    <span class=\"number\">13</span>s   app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看service的详细信息</span></span><br><span class=\"line\"><span class=\"comment\"># 在这里有一个Endpoints列表，里面就是当前service可以负载到的服务入口</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe svc service-clusterip -n dev</span></span><br><span class=\"line\">Name:              service<span class=\"literal\">-clusterip</span></span><br><span class=\"line\">Namespace:         dev</span><br><span class=\"line\">Labels:            &lt;none&gt;</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"><span class=\"built_in\">Type</span>:              ClusterIP</span><br><span class=\"line\">IP:                <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span></span><br><span class=\"line\">Port:              &lt;unset&gt;  <span class=\"number\">80</span>/TCP</span><br><span class=\"line\">TargetPort:        <span class=\"number\">80</span>/TCP</span><br><span class=\"line\">Endpoints:         <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span></span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ipvs的映射规则</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># ipvsadm -Ln</span></span><br><span class=\"line\">TCP  <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span>:<span class=\"number\">80</span> rr</span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问10.97.97.97:80观察效果</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># curl 10.97.97.97:80</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Endpoint</strong></p>\n<p>​    Endpoint是kubernetes中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址，它是根据service配置文件中selector描述产生的。</p>\n<p>​    一个Service由一组Pod组成，这些Pod通过Endpoints暴露出来，<strong>Endpoints是实现实际服务的端点集合</strong>。换句话说，service和pod之间的联系是通过endpoints实现的。</p>\n<p><img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200509191917069.png\" alt=\"image-20200509191917069\"></p>\n<p><strong>负载分发策略</strong></p>\n<p>对Service的访问被分发到了后端的Pod上去，目前kubernetes提供了两种负载分发策略：</p>\n<ul>\n<li><p>如果不定义，默认使用kube-proxy的策略，比如随机、轮询</p>\n</li>\n<li><p>基于客户端地址的会话保持模式，即来自同一个客户端发起的所有请求都会转发到固定的一个Pod上</p>\n<p>此模式可以使在spec中添加<code>sessionAffinity:ClientIP</code>选项</p>\n</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看ipvs的映射规则【rr 轮询】</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># ipvsadm -Ln</span></span><br><span class=\"line\">TCP  <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span>:<span class=\"number\">80</span> rr</span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环访问测试</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># while true;do curl 10.97.97.97:80; sleep 5; done;</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">1.40</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">1.39</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">1.40</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">1.39</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改分发策略----sessionAffinity:ClientIP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ipvs规则【persistent 代表持久】</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># ipvsadm -Ln</span></span><br><span class=\"line\">TCP  <span class=\"number\">10.97</span>.<span class=\"number\">97.97</span>:<span class=\"number\">80</span> rr persistent <span class=\"number\">10800</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\">  -&gt; <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span>               Masq    <span class=\"number\">1</span>      <span class=\"number\">0</span>          <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环访问测试</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># while true;do curl 10.97.97.97; sleep 5; done;</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br><span class=\"line\"><span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 删除service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl delete -f service-clusterip.yaml</span></span><br><span class=\"line\">service <span class=\"string\">&quot;service-clusterip&quot;</span> deleted</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HeadLiness类型的Service\"><a href=\"#HeadLiness类型的Service\" class=\"headerlink\" title=\"HeadLiness类型的Service\"></a>HeadLiness类型的Service</h3><p>​    在某些场景中，开发人员可能不想使用Service提供的负载均衡功能，而希望自己来控制负载均衡策略，针对这种情况，kubernetes提供了HeadLiness  Service，这类Service不会分配Cluster IP，如果想要访问service，只能通过service的域名进行查询。</p>\n<p>创建service-headliness.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-headliness</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span> <span class=\"comment\"># 将clusterIP设置为None，即可创建headliness Service</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>    </span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f service-headliness.yaml</span></span><br><span class=\"line\">service/service<span class=\"literal\">-headliness</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取service， 发现CLUSTER-IP未分配</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get svc service-headliness -n dev -o wide</span></span><br><span class=\"line\">NAME                 <span class=\"built_in\">TYPE</span>        CLUSTER<span class=\"literal\">-IP</span>   EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)   AGE   SELECTOR</span><br><span class=\"line\">service<span class=\"literal\">-headliness</span>   ClusterIP   None         &lt;none&gt;        <span class=\"number\">80</span>/TCP    <span class=\"number\">11</span>s   app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看service详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe svc service-headliness  -n dev</span></span><br><span class=\"line\">Name:              service<span class=\"literal\">-headliness</span></span><br><span class=\"line\">Namespace:         dev</span><br><span class=\"line\">Labels:            &lt;none&gt;</span><br><span class=\"line\">Annotations:       &lt;none&gt;</span><br><span class=\"line\">Selector:          app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"><span class=\"built_in\">Type</span>:              ClusterIP</span><br><span class=\"line\">IP:                None</span><br><span class=\"line\">Port:              &lt;unset&gt;  <span class=\"number\">80</span>/TCP</span><br><span class=\"line\">TargetPort:        <span class=\"number\">80</span>/TCP</span><br><span class=\"line\">Endpoints:         <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">1.40</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.33</span>:<span class=\"number\">80</span></span><br><span class=\"line\">Session Affinity:  None</span><br><span class=\"line\">Events:            &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看域名的解析情况</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh</span></span><br><span class=\"line\">/ <span class=\"comment\"># cat /etc/resolv.conf</span></span><br><span class=\"line\">nameserver <span class=\"number\">10.96</span>.<span class=\"number\">0.10</span></span><br><span class=\"line\">search dev.svc.cluster.local svc.cluster.local cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># dig @10.96.0.10 service-headliness.dev.svc.cluster.local</span></span><br><span class=\"line\">service<span class=\"literal\">-headliness</span>.dev.svc.cluster.local. <span class=\"number\">30</span> <span class=\"keyword\">IN</span> A <span class=\"number\">10.244</span>.<span class=\"number\">1.40</span></span><br><span class=\"line\">service<span class=\"literal\">-headliness</span>.dev.svc.cluster.local. <span class=\"number\">30</span> <span class=\"keyword\">IN</span> A <span class=\"number\">10.244</span>.<span class=\"number\">1.39</span></span><br><span class=\"line\">service<span class=\"literal\">-headliness</span>.dev.svc.cluster.local. <span class=\"number\">30</span> <span class=\"keyword\">IN</span> A <span class=\"number\">10.244</span>.<span class=\"number\">2.33</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NodePort类型的Service\"><a href=\"#NodePort类型的Service\" class=\"headerlink\" title=\"NodePort类型的Service\"></a>NodePort类型的Service</h3><p>​    在之前的样例中，创建的Service的ip地址只有集群内部才可以访问，如果希望将Service暴露给集群外部使用，那么就要使用到另外一种类型的Service，称为NodePort类型。NodePort的工作原理其实就是<strong>将service的端口映射到Node的一个端口上</strong>，然后就可以通过<code>NodeIp:NodePort</code>来访问service了。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200620175731338.png\" style=\"border:1px solid\">\n\n<p>创建service-nodeport.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-nodeport</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30002</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f service-nodeport.yaml</span></span><br><span class=\"line\">service/service<span class=\"literal\">-nodeport</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get svc -n dev -o wide</span></span><br><span class=\"line\">NAME               <span class=\"built_in\">TYPE</span>       CLUSTER<span class=\"literal\">-IP</span>      EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)       SELECTOR</span><br><span class=\"line\">service<span class=\"literal\">-nodeport</span>   NodePort   <span class=\"number\">10.105</span>.<span class=\"number\">64.191</span>   &lt;none&gt;        <span class=\"number\">80</span>:<span class=\"number\">30002</span>/TCP  app=nginx<span class=\"literal\">-pod</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来可以通过电脑主机的浏览器去访问集群中任意一个nodeip的30002端口，即可访问到pod</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LoadBalancer类型的Service\"><a href=\"#LoadBalancer类型的Service\" class=\"headerlink\" title=\"LoadBalancer类型的Service\"></a>LoadBalancer类型的Service</h3><p>​    LoadBalancer和NodePort很相似，目的都是向外部暴露一个端口，区别在于LoadBalancer会在集群的外部再来做一个负载均衡设备，而这个设备需要外部环境支持的，外部服务发送到这个设备上的请求，会被设备负载之后转发到集群中。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200510103945494.png\" style=\"border:1px solid\">\n\n<h3 id=\"ExternalName类型的Service\"><a href=\"#ExternalName类型的Service\" class=\"headerlink\" title=\"ExternalName类型的Service\"></a>ExternalName类型的Service</h3><p>​     ExternalName类型的Service用于引入集群外部的服务，它通过<code>externalName</code>属性指定外部一个服务的地址，然后在集群内部访问此service就可以访问到外部的服务了。</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200510113311209.png\" style=\"border:1px solid\">\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">service-externalname</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"string\">www.baidu.com</span>  <span class=\"comment\">#改成ip地址也可以</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl  create -f service-externalname.yaml</span></span><br><span class=\"line\">service/service<span class=\"literal\">-externalname</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 域名解析</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># dig @10.96.0.10 service-externalname.dev.svc.cluster.local</span></span><br><span class=\"line\">service<span class=\"literal\">-externalname</span>.dev.svc.cluster.local. <span class=\"number\">30</span> <span class=\"keyword\">IN</span> CNAME www.baidu.com.</span><br><span class=\"line\">www.baidu.com.          <span class=\"number\">30</span>      <span class=\"keyword\">IN</span>      CNAME   www.a.shifen.com.</span><br><span class=\"line\">www.a.shifen.com.       <span class=\"number\">30</span>      <span class=\"keyword\">IN</span>      A       <span class=\"number\">39.156</span>.<span class=\"number\">66.18</span></span><br><span class=\"line\">www.a.shifen.com.       <span class=\"number\">30</span>      <span class=\"keyword\">IN</span>      A       <span class=\"number\">39.156</span>.<span class=\"number\">66.14</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ingress介绍\"><a href=\"#Ingress介绍\" class=\"headerlink\" title=\"Ingress介绍\"></a>Ingress介绍</h2><p>​     在前面课程中已经提到，Service对集群之外暴露服务的主要方式有两种：NotePort和LoadBalancer，但是这两种方式，都有一定的缺点：</p>\n<ul>\n<li>NodePort方式的缺点是会占用很多集群机器的端口，那么当集群服务变多的时候，这个缺点就愈发明显</li>\n<li>LB方式的缺点是每个service需要一个LB，浪费、麻烦，并且需要kubernetes之外设备的支持</li>\n</ul>\n<p>​    基于这种现状，kubernetes提供了Ingress资源对象，Ingress只需要一个NodePort或者一个LB就可以满足暴露多个Service的需求。工作机制大致如下图表示：</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200623092808049.png\" style=\"border:1px solid\">\n\n<p>​    实际上，Ingress相当于一个7层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于Nginx，可以理解成在<strong>Ingress里建立诸多映射规则，Ingress Controller通过监听这些配置规则并转化成Nginx的反向代理配置 , 然后对外部提供服务</strong>。在这里有两个核心概念：</p>\n<ul>\n<li>ingress：kubernetes中的一个对象，作用是定义请求如何转发到service的规则</li>\n<li>ingress controller：具体实现反向代理及负载均衡的程序，对ingress定义的规则进行解析，根据配置的规则来实现请求转发，实现方式有很多，比如Nginx, Contour, Haproxy等等</li>\n</ul>\n<p>Ingress（以Nginx为例）的工作原理如下：</p>\n<ol>\n<li>用户编写Ingress规则，说明哪个域名对应kubernetes集群中的哪个Service</li>\n<li>Ingress控制器动态感知Ingress服务规则的变化，然后生成一段对应的Nginx反向代理配置</li>\n<li>Ingress控制器会将生成的Nginx配置写入到一个运行着的Nginx服务中，并动态更新</li>\n<li>到此为止，其实真正在工作的就是一个Nginx了，内部配置了用户定义的请求转发规则</li>\n</ol>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200516112704764.png\" style=\"border: 1px solid; zoom: 100%;\">\n\n<h2 id=\"Ingress使用\"><a href=\"#Ingress使用\" class=\"headerlink\" title=\"Ingress使用\"></a>Ingress使用</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p><strong>搭建ingress环境</strong></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建文件夹</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># mkdir ingress-controller</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># cd ingress-controller/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取ingress-nginx，本次案例使用的是0.30版本</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">ingress</span>-<span class=\"type\">controller</span>]<span class=\"comment\"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">ingress</span>-<span class=\"type\">controller</span>]<span class=\"comment\"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改mandatory.yaml文件中的仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 修改quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span></span><br><span class=\"line\"><span class=\"comment\"># 为quay-mirror.qiniu.com/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span></span><br><span class=\"line\"><span class=\"comment\"># 创建ingress-nginx</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">ingress</span>-<span class=\"type\">controller</span>]<span class=\"comment\"># kubectl apply -f ./</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看ingress-nginx</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">ingress</span>-<span class=\"type\">controller</span>]<span class=\"comment\"># kubectl get pod -n ingress-nginx</span></span><br><span class=\"line\">NAME                                           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/nginx<span class=\"literal\">-ingress</span><span class=\"literal\">-controller</span><span class=\"literal\">-fbf967dd5</span><span class=\"literal\">-4qpbp</span>   <span class=\"number\">1</span>/<span class=\"number\">1</span>     Running   <span class=\"number\">0</span>          <span class=\"number\">12</span><span class=\"built_in\">h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看service</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> <span class=\"type\">ingress</span>-<span class=\"type\">controller</span>]<span class=\"comment\"># kubectl get svc -n ingress-nginx</span></span><br><span class=\"line\">NAME            <span class=\"built_in\">TYPE</span>       CLUSTER<span class=\"literal\">-IP</span>     EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)                      AGE</span><br><span class=\"line\">ingress<span class=\"literal\">-nginx</span>   NodePort   <span class=\"number\">10.98</span>.<span class=\"number\">75.163</span>   &lt;none&gt;        <span class=\"number\">80</span>:<span class=\"number\">32240</span>/TCP,<span class=\"number\">443</span>:<span class=\"number\">31335</span>/TCP   <span class=\"number\">11</span><span class=\"built_in\">h</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>准备service和pod</strong></p>\n<p>为了后面的实验比较方便，创建如下图所示的模型</p>\n<img src=\"/2021/12/01/K8S/day4/k8s_day4/image-20200516102419998.png\" style=\"zoom:80%;border:1px solid\">\n\n<p>创建tomcat-nginx.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.17.1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">tomcat-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">tomcat-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">tomcat-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">tomcat:8.5-jre10-slim</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">tomcat-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">tomcat-pod</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f tomcat-nginx.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get svc -n dev</span></span><br><span class=\"line\">NAME             <span class=\"built_in\">TYPE</span>        CLUSTER<span class=\"literal\">-IP</span>   EXTERNAL<span class=\"literal\">-IP</span>   PORT(S)    AGE</span><br><span class=\"line\">nginx<span class=\"literal\">-service</span>    ClusterIP   None         &lt;none&gt;        <span class=\"number\">80</span>/TCP     <span class=\"number\">48</span>s</span><br><span class=\"line\">tomcat<span class=\"literal\">-service</span>   ClusterIP   None         &lt;none&gt;        <span class=\"number\">8080</span>/TCP   <span class=\"number\">48</span>s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Http代理\"><a href=\"#Http代理\" class=\"headerlink\" title=\"Http代理\"></a>Http代理</h3><p>创建ingress-http.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-http</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">nginx.itheima.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">tomcat.itheima.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">tomcat-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f ingress-http.yaml</span></span><br><span class=\"line\">ingress.extensions/ingress<span class=\"literal\">-http</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get ing ingress-http -n dev</span></span><br><span class=\"line\">NAME           HOSTS                                  ADDRESS   PORTS   AGE</span><br><span class=\"line\">ingress<span class=\"literal\">-http</span>   nginx.itheima.com,tomcat.itheima.com             <span class=\"number\">80</span>      <span class=\"number\">22</span>s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe ing ingress-http  -n dev</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">Host                Path  Backends</span><br><span class=\"line\">----                ----  --------</span><br><span class=\"line\">nginx.itheima.com   / nginx<span class=\"literal\">-service</span>:<span class=\"number\">80</span> (<span class=\"number\">10.244</span>.<span class=\"number\">1.96</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">1.97</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.112</span>:<span class=\"number\">80</span>)</span><br><span class=\"line\">tomcat.itheima.com  / tomcat<span class=\"literal\">-service</span>:<span class=\"number\">8080</span>(<span class=\"number\">10.244</span>.<span class=\"number\">1.94</span>:<span class=\"number\">8080</span>,<span class=\"number\">10.244</span>.<span class=\"number\">1.95</span>:<span class=\"number\">8080</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.111</span>:<span class=\"number\">8080</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接下来,在本地电脑上配置host文件,解析上面的两个域名到192.168.109.100(master)上</span></span><br><span class=\"line\"><span class=\"comment\"># 然后,就可以分别访问tomcat.itheima.com:32240  和  nginx.itheima.com:32240 查看效果了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Https代理\"><a href=\"#Https代理\" class=\"headerlink\" title=\"Https代理\"></a>Https代理</h3><p>创建证书</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">openssl req <span class=\"literal\">-x509</span> <span class=\"literal\">-sha256</span> <span class=\"literal\">-nodes</span> <span class=\"literal\">-days</span> <span class=\"number\">365</span> <span class=\"literal\">-newkey</span> rsa:<span class=\"number\">2048</span> <span class=\"literal\">-keyout</span> tls.key <span class=\"literal\">-out</span> tls.crt <span class=\"literal\">-subj</span> <span class=\"string\">&quot;/C=CN/ST=BJ/L=BJ/O=nginx/CN=itheima.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建密钥</span></span><br><span class=\"line\">kubectl create secret tls tls<span class=\"literal\">-secret</span> -<span class=\"literal\">-key</span> tls.key -<span class=\"literal\">-cert</span> tls.crt</span><br></pre></td></tr></table></figure>\n\n<p>创建ingress-https.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">ingress-https</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nginx.itheima.com</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">tomcat.itheima.com</span></span><br><span class=\"line\">      <span class=\"attr\">secretName:</span> <span class=\"string\">tls-secret</span> <span class=\"comment\"># 指定秘钥</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">nginx.itheima.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">tomcat.itheima.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">tomcat-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl create -f ingress-https.yaml</span></span><br><span class=\"line\">ingress.extensions/ingress<span class=\"literal\">-https</span> created</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl get ing ingress-https -n dev</span></span><br><span class=\"line\">NAME            HOSTS                                  ADDRESS         PORTS     AGE</span><br><span class=\"line\">ingress<span class=\"literal\">-https</span>   nginx.itheima.com,tomcat.itheima.com   <span class=\"number\">10.104</span>.<span class=\"number\">184.38</span>   <span class=\"number\">80</span>, <span class=\"number\">443</span>   <span class=\"number\">2</span>m42s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看详情</span></span><br><span class=\"line\">[<span class=\"type\">root</span>@<span class=\"type\">master</span> ~]<span class=\"comment\"># kubectl describe ing ingress-https -n dev</span></span><br><span class=\"line\">...</span><br><span class=\"line\">TLS:</span><br><span class=\"line\">  tls<span class=\"literal\">-secret</span> terminates nginx.itheima.com,tomcat.itheima.com</span><br><span class=\"line\">Rules:</span><br><span class=\"line\">Host              Path Backends</span><br><span class=\"line\">----              ---- --------</span><br><span class=\"line\">nginx.itheima.com  /  nginx<span class=\"literal\">-service</span>:<span class=\"number\">80</span> (<span class=\"number\">10.244</span>.<span class=\"number\">1.97</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">1.98</span>:<span class=\"number\">80</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.119</span>:<span class=\"number\">80</span>)</span><br><span class=\"line\">tomcat.itheima.com /  tomcat<span class=\"literal\">-service</span>:<span class=\"number\">8080</span>(<span class=\"number\">10.244</span>.<span class=\"number\">1.99</span>:<span class=\"number\">8080</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.117</span>:<span class=\"number\">8080</span>,<span class=\"number\">10.244</span>.<span class=\"number\">2.120</span>:<span class=\"number\">8080</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面可以通过浏览器访问https://nginx.itheima.com:31335 和 https://tomcat.itheima.com:31335来查看了</span></span><br></pre></td></tr></table></figure>","categories":["k8s"],"tags":["k8s 教程"]},{"title":"Vue.js - Day3","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day3\"><a href=\"#Vue-js-Day3\" class=\"headerlink\" title=\"Vue.js - Day3\"></a>Vue.js - Day3</h1><h2 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>\n<ul>\n<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>\n<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id=\"全局组件定义的三种方式\"><a href=\"#全局组件定义的三种方式\" class=\"headerlink\" title=\"全局组件定义的三种方式\"></a>全局组件定义的三种方式</h3></li>\n</ul>\n<ol>\n<li>使用 Vue.extend 配合 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li>\n<li>直接使用 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;register&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>将模板字符串，定义到script标签种：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n同时，需要使用 Vue.component 来定义组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>\n</blockquote>\n<h3 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h3><ol>\n<li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;,</span><br><span class=\"line\">      data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          msg: &#39;大家好！&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">          alert(&#39;点击了登录按钮&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>\n</ol>\n<h3 id=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"><a href=\"#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>\n<li>通过计数器案例演示</li>\n</ol>\n<h3 id=\"使用components属性定义局部子组件\"><a href=\"#使用components属性定义局部子组件\" class=\"headerlink\" title=\"使用components属性定义局部子组件\"></a>使用<code>components</code>属性定义局部子组件</h3><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class=\"line\">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class=\"line\">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class=\"line\">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class=\"line\">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class=\"line\">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引用组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用flag标识符结合v-if和v-else切换组件\"><a href=\"#使用flag标识符结合v-if和v-else切换组件\" class=\"headerlink\" title=\"使用flag标识符结合v-if和v-else切换组件\"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>\n<li>页面结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class=\"line\">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class=\"line\">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Vue实例定义：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        flag: true</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-is属性来切换不同的子组件-并添加切换动画\"><a href=\"#使用-is属性来切换不同的子组件-并添加切换动画\" class=\"headerlink\" title=\"使用:is属性来切换不同的子组件,并添加切换动画\"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 登录组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;login&#39;, login);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 注册组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;register&#39;, register);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>添加切换样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .v-enter,</span><br><span class=\"line\">  .v-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .v-enter-active,</span><br><span class=\"line\">  .v-leave-active &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    transition: all 0.3s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; |</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\">URL中的hash（井号）</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day5","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day5/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day5-Webpack\"><a href=\"#Vue-js-Day5-Webpack\" class=\"headerlink\" title=\"Vue.js - Day5 - Webpack\"></a>Vue.js - Day5 - Webpack</h1><h2 id=\"在网页中会引用哪些常见的静态资源？\"><a href=\"#在网页中会引用哪些常见的静态资源？\" class=\"headerlink\" title=\"在网页中会引用哪些常见的静态资源？\"></a>在网页中会引用哪些常见的静态资源？</h2><ul>\n<li>JS</li>\n</ul>\n<ul>\n<li>.js  .jsx  .coffee  .ts（TypeScript  类 C# 语言）</li>\n</ul>\n<ul>\n<li>CSS</li>\n</ul>\n<ul>\n<li>.css  .less   .sass  .scss</li>\n</ul>\n<ul>\n<li>Images</li>\n</ul>\n<ul>\n<li>.jpg   .png   .gif   .bmp   .svg</li>\n</ul>\n<ul>\n<li>字体文件（Fonts）</li>\n</ul>\n<ul>\n<li>.svg   .ttf   .eot   .woff   .woff2</li>\n</ul>\n<ul>\n<li>模板文件</li>\n</ul>\n<ul>\n<li>.ejs   .jade  .vue【这是在webpack中定义组件的方式，推荐这么用】</li>\n</ul>\n<h2 id=\"网页中引入的静态资源多了以后有什么问题？？？\"><a href=\"#网页中引入的静态资源多了以后有什么问题？？？\" class=\"headerlink\" title=\"网页中引入的静态资源多了以后有什么问题？？？\"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol>\n<li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li>\n<li>要处理错综复杂的依赖关系</li>\n</ol>\n<h2 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h2><ol>\n<li>合并、压缩、精灵图、图片的Base64编码</li>\n<li>可以使用之前学过的requireJS、也可以使用webpack可以解决各个包之间的复杂依赖关系；</li>\n</ol>\n<h2 id=\"什么是webpack\"><a href=\"#什么是webpack\" class=\"headerlink\" title=\"什么是webpack?\"></a>什么是webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p>\n<h2 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h2><ol>\n<li>使用Gulp， 是基于 task 任务的；</li>\n<li>使用Webpack， 是基于整个项目进行构建的；</li>\n</ol>\n<ul>\n<li>借助于webpack这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li>\n<li>根据官网的图片介绍webpack打包的过程</li>\n<li><a href=\"http://webpack.github.io/\">webpack官网</a></li>\n<li><a href=\"https://webpack.docschina.org/\">webpack中文文档</a></li>\n</ul>\n<h2 id=\"webpack安装的两种方式\"><a href=\"#webpack安装的两种方式\" class=\"headerlink\" title=\"webpack安装的两种方式\"></a>webpack安装的两种方式</h2><ol>\n<li>运行<code>npm i webpack -g</code>全局安装webpack，这样就能在全局使用webpack的命令</li>\n<li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li>\n</ol>\n<h2 id=\"初步使用webpack打包构建列表隔行变色案例\"><a href=\"#初步使用webpack打包构建列表隔行变色案例\" class=\"headerlink\" title=\"初步使用webpack打包构建列表隔行变色案例\"></a>初步使用webpack打包构建列表隔行变色案例</h2><ol>\n<li>运行<code>npm init</code>初始化项目，使用npm管理项目中的依赖包 (npm init -y 一键初始化) 自动生成package.json文件</li>\n<li>创建项目基本的目录结构 src:存放源代码  dist: 项目发布后的文件存放目录</li>\n<li>使用<code>cnpm i jquery --save</code>安装jquery类库 （npm i jquery -s） 安装包后自动生成node_modules文件夹，并把包安装到这个文件夹</li>\n<li>创建<code>main.js</code>并书写各行变色的代码逻辑：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入jquery类库</span><br><span class=\"line\">   import $ from &#39;jquery&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#x2F;&#x2F; 设置偶数行背景色，索引从0开始，0是偶数</span><br><span class=\"line\">   $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;);</span><br><span class=\"line\">   &#x2F;&#x2F; 设置奇数行背景色</span><br><span class=\"line\">   $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的JS语法，需要使用webpack进行处理，webpack默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li>\n<li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack src&#x2F;js&#x2F;main.js dist&#x2F;bundle.js</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用webpack的配置文件简化打包时候的命令\"><a href=\"#使用webpack的配置文件简化打包时候的命令\" class=\"headerlink\" title=\"使用webpack的配置文件简化打包时候的命令\"></a>使用webpack的配置文件简化打包时候的命令</h2><ol>\n<li>在项目根目录中创建<code>webpack.config.js</code></li>\n<li>由于运行webpack命令的时候，webpack需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.config.js</code>中配置这两个路径：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理</span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class=\"line\">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class=\"line\">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"实现webpack的实时打包构建\"><a href=\"#实现webpack的实时打包构建\" class=\"headerlink\" title=\"实现webpack的实时打包构建\"></a>实现webpack的实时打包构建</h2><ol>\n<li>由于每次重新修改代码之后，都需要手动运行webpack打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li>\n<li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li>\n<li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是dist目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</li>\n</ol>\n<ul>\n<li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li>\n<li>这个时候访问webpack-dev-server启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到src目录下，才能打开我们的index首页，此时引用不到bundle.js文件，需要修改index.html中script的src属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到index首页，可以使用<code>--contentBase src</code>指令来修改dev指令，指定启动的根目录：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</span><br></pre></td></tr></table></figure>\n同时修改index页面中script的src属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n<h2 id=\"使用html-webpack-plugin插件配置启动页面\"><a href=\"#使用html-webpack-plugin插件配置启动页面\" class=\"headerlink\" title=\"使用html-webpack-plugin插件配置启动页面\"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改index.html中script标签的src属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p>\n<ol>\n<li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li>\n<li>修改<code>webpack.config.js</code>配置文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入处理路径的模块</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入自动生成HTMl文件的插件</span><br><span class=\"line\">var htmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    entry: path.resolve(__dirname, &#39;src&#x2F;js&#x2F;main.js&#39;), &#x2F;&#x2F; 项目入口文件</span><br><span class=\"line\">    output: &#123; &#x2F;&#x2F; 配置输出选项</span><br><span class=\"line\">        path: path.resolve(__dirname, &#39;dist&#39;), &#x2F;&#x2F; 配置输出的路径</span><br><span class=\"line\">        filename: &#39;bundle.js&#39; &#x2F;&#x2F; 配置输出的文件名</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[ &#x2F;&#x2F; 添加plugins节点配置插件</span><br><span class=\"line\">        new htmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template:path.resolve(__dirname, &#39;src&#x2F;index.html&#39;),&#x2F;&#x2F;模板路径</span><br><span class=\"line\">            filename:&#39;index.html&#39;&#x2F;&#x2F;自动生成的HTML文件的名称</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改<code>package.json</code>中<code>script</code>节点中的dev指令如下：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server&quot;</span><br></pre></td></tr></table></figure></li>\n<li>将index.html中script标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把bundle.js注入到index.html页面中！</li>\n</ol>\n<h2 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在JS中表现的不明显，可以从一会儿要讲到的CSS身上进行介绍说明！</strong></p>\n<h3 id=\"方式1：\"><a href=\"#方式1：\" class=\"headerlink\" title=\"方式1：\"></a>方式1：</h3><ul>\n<li>修改<code>package.json</code>的script节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为4321，<code>--hot</code>表示启用浏览器热更新：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"方式2：\"><a href=\"#方式2：\" class=\"headerlink\" title=\"方式2：\"></a>方式2：</h3><ol>\n<li>修改<code>webpack.config.js</code>文件，新增<code>devServer</code>节点如下：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">        hot:true,</span><br><span class=\"line\">        open:true,</span><br><span class=\"line\">        port:4321</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在头部引入<code>webpack</code>模块：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var webpack &#x3D; require(&#39;webpack&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>在<code>plugins</code>节点下新增：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">new webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用webpack打包css文件\"><a href=\"#使用webpack打包css文件\" class=\"headerlink\" title=\"使用webpack打包css文件\"></a>使用webpack打包css文件</h2><ol>\n<li>运行<code>cnpm i style-loader css-loader --save-dev</code></li>\n<li>修改<code>webpack.config.js</code>这个配置文件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module: &#123; &#x2F;&#x2F; 用来配置第三方loader模块的</span><br><span class=\"line\">        rules: [ &#x2F;&#x2F; 文件的匹配规则</span><br><span class=\"line\">            &#123; test: &#x2F;\\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;&#x2F;&#x2F;处理css文件的规则</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关loader模块的调用顺序是从后向前调用的；</li>\n</ol>\n<h2 id=\"使用webpack打包less文件\"><a href=\"#使用webpack打包less文件\" class=\"headerlink\" title=\"使用webpack打包less文件\"></a>使用webpack打包less文件</h2><ol>\n<li>运行<code>cnpm i less-loader less -D</code></li>\n<li>修改<code>webpack.config.js</code>这个配置文件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.less$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用webpack打包sass文件\"><a href=\"#使用webpack打包sass文件\" class=\"headerlink\" title=\"使用webpack打包sass文件\"></a>使用webpack打包sass文件</h2><ol>\n<li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li>\n<li>在<code>webpack.config.js</code>中添加处理sass文件的loader模块：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.scss$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用webpack处理css中的路径\"><a href=\"#使用webpack处理css中的路径\" class=\"headerlink\" title=\"使用webpack处理css中的路径\"></a>使用webpack处理css中的路径</h2><ol>\n<li>运行<code>cnpm i url-loader file-loader --save-dev</code></li>\n<li>在<code>webpack.config.js</code>中添加处理url路径的loader模块：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader&#39; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>可以通过<code>limit</code>指定进行base64编码的图片大小；只有小于指定字节（byte）的图片才会进行base64编码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.(png|jpg|gif)$&#x2F;, use: &#39;url-loader?limit&#x3D;43960&#39; &#125;,</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用babel处理高级JS语法\"><a href=\"#使用babel处理高级JS语法\" class=\"headerlink\" title=\"使用babel处理高级JS语法\"></a>使用babel处理高级JS语法</h2><ol>\n<li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装babel的相关loader包</li>\n<li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装babel转换的语法</li>\n<li>在<code>webpack.config.js</code>中添加相关loader模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; test: &#x2F;\\.js$&#x2F;, use: &#39;babel-loader&#39;, exclude: &#x2F;node_modules&#x2F; &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的ES相关的语法；</strong></li>\n</ol>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"https://segmentfault.com/p/1210000008466178\">babel-preset-env：你需要的唯一Babel插件</a><br><a href=\"https://segmentfault.com/a/1190000009065987\">Runtime transform 运行时编译es6</a></p>\n","categories":["vue2.0基础课程"],"tags":["vue2.0基础课程","Webpack"]}]