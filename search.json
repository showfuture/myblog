[{"title":"Python3 利用string模块生成密码","url":"/2021/05/04/python/Python3%20%E5%88%A9%E7%94%A8string%E6%A8%A1%E5%9D%97%E7%94%9F%E6%88%90%E5%AF%86%E7%A0%81/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>string模块中定义了一些常用的属性，包含所有数字、字母、可打印的所有ascii码等</p>\n<p>实例</p>\n<ol>\n<li>ascii_letters 生成所有大小写字母（a-z A-Z）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">letters &#x3D; string.ascii_letters</span><br><span class=\"line\">print(letters)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li><p>ascii_lowercase 生成所有小写字母（a-z）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">lowercase &#x3D; string.asscii_lowercase</span><br><span class=\"line\">print(lowercase)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></table></figure></li>\n<li><p>ascii_uppercase 生成所有大写字母（A-Z）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">uppercase &#x3D; string.ascii_uppercase</span><br><span class=\"line\">print(uppercase)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br></pre></td></tr></table></figure></li>\n<li><p>digits 生成所有数字（0-9）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">digits &#x3D; string.digits</span><br><span class=\"line\">print(digits)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; 0123456789</span><br></pre></td></tr></table></figure></li>\n<li><p>punctuation 生成所有标点符号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">punctuation &#x3D; string.punctuation</span><br><span class=\"line\">print(punctuotion)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; !&quot;#$%&amp;&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\\]^_&#96;&#123;|&#125;~</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>#密码生成器<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def main():</span><br><span class=\"line\">    &quot;&quot;&quot;密码生成器&quot;&quot;&quot;</span><br><span class=\"line\">    a &#x3D; string.ascii_letters + string.digits + string.punctuation</span><br><span class=\"line\">    key &#x3D; random.sample(a, 16)</span><br><span class=\"line\">    keys &#x3D; &quot;&quot;.join(key)</span><br><span class=\"line\">    print(keys)</span><br></pre></td></tr></table></figure></p>\n","categories":["python"],"tags":["密码","gen-secret"]},{"title":"Python中tuple+=赋值的四个问题","url":"/2021/05/04/python/Python%E4%B8%ADtuple+=%E8%B5%8B%E5%80%BC%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>首先看第一个问题, 如下面的代码段:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] +&#x3D; [50,60]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>会产生什么结果呢？ 给出了四个选项:<br>1. <code>t</code> 变成 <code>[1,2, [30,40,50,60]</code> <br>2. <code>TypeError is raised with the message &#39;tuple&#39; object does not support item assignment</code> <br>3. Neither 1 nor 2<br>4. Both 1 and 2</p>\n<p>按照之前的理解, <code>tuple</code>里面的元素是不能被修改的，因此会选<code>2</code>. 如果真是这样的话，这篇笔记就没必要了，Fluent Python中也就不会拿出一节来讲了。 正确答案是<code>4</code></p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2,[30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] +&#x3D; [50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>问题来了，为什么异常都出来了， <code>t</code>还是变了? 再看第二种情况，稍微变化一下,将<code>+=</code>变为<code>=</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] &#x3D; [50,60]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果就成酱紫了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] &#x3D; [50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40])</span><br></pre></td></tr></table></figure>\n\n<p>再看第三种情况,只把<code>+=</code>换为<code>extend</code>或者<code>append</code>,:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1, 2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2].extend([50,60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2].append(70)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60, 70])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>又正常了,没抛出异常?</p>\n<p>最后第四种情况, 用变量的形式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a &#x3D; [30,40]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t &#x3D; (1, 2, a)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a+&#x3D;[50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">[30, 40, 50, 60]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t[2] +&#x3D; [70,80]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60, 70, 80])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>又是一种情况, 下面就探究一下其中的原因.</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>首先需要重温<code>+=</code>这个运算符,如<code>a+=b</code>:</p>\n<ul>\n<li>  对于可变对象(mutable object)如<code>list</code>, <code>+=</code>操作的结果会直接在<code>a</code>对应的变量进行修改，而<code>a</code>对应的地址不变.</li>\n<li>  对于不可变对象(imutable object)如<code>tuple</code>, <code>+=</code>则是等价于<code>a = a+b</code> 会产生新的变量，然后绑定到<code>a</code>上而已.</li>\n</ul>\n<p>如下代码段, 可以看出来:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a &#x3D; [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a)</span><br><span class=\"line\"></span><br><span class=\"line\">53430752</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a+&#x3D;[4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a)</span><br><span class=\"line\"></span><br><span class=\"line\">53430752 # 地址没有变化</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b &#x3D; (1,2,3)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(b)</span><br><span class=\"line\"></span><br><span class=\"line\">49134888</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b +&#x3D; (4,5)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, 3, 4, 5)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(b)</span><br><span class=\"line\"></span><br><span class=\"line\">48560912 # 地址变化了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此外还需要注意的是, python中的<code>tuple</code>作为不可变对象, 也就是我们平时说的元素不能改变, 实际上从报错信息<code>TypeError: &#39;tuple&#39; object does not support item assignment</code>来看, 更准确的说法是指其中的元素不支持赋值操作<code>=</code>(<strong>assignment</strong>).</p>\n<p>先看最简单的第二种情况, 它的结果是符合我们的预期, 因为<code>=</code>产生了<code>assign</code>的操作.(在<a href=\"http://shomy.top/2016/03/01/python-namespace-1/\">由一个例子到python的名字空间</a> 中指出了赋值操作<code>=</code>就是创建新的变量), 因此<code>s[2]=[50,60]</code>就会抛出异常.</p>\n<p>再看第三种情况,包含<code>extend/append</code>的, 结果tuple中的列表值发生了变化,但是没有异常抛出. 这个其实也相对容易理解. 因为我们知道<code>tuple</code>中存储的其实是元素所对应的地址(id), 因此如果没有赋值操作且tuple中的元素的<code>id</code>不变,即可,而<code>list.extend/append</code>只是修改了列表的元素,而列表本身id并没有变化,看看下面的例子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a&#x3D;(1,2,[30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2])</span><br><span class=\"line\"></span><br><span class=\"line\">140628739513736</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[2].extend([50,60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2])</span><br><span class=\"line\"></span><br><span class=\"line\">140628739513736</span><br></pre></td></tr></table></figure>\n<p>目前解决了第二个和第三个问题, 先梳理一下, 其实就是两点:</p>\n<ul>\n<li>  tuple内部的元素不支持赋值操作</li>\n<li>  在第一条的基础上, 如果元素的<code>id</code>没有变化, 元素其实是可以改变的.</li>\n</ul>\n<p>现在再来看最初的第一个问题: <code>t[2] += [50,60]</code> 按照上面的结论, 不应该抛异常啊,因为在我们看来<code>+=</code> 对于可变对象<code>t[2]</code>来说, 属于<code>in-place</code>操作,也就是直接修改自身的内容, <code>id</code>并不变, 确认下id并没有变化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a&#x3D;(1,2,[30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2])</span><br><span class=\"line\"></span><br><span class=\"line\">140628739587392</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[2]+&#x3D;[50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: &#39;tuple&#39; object does not support item assignment</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\"></span><br><span class=\"line\">(1, 2, [30, 40, 50, 60])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; id(a[2]) # ID 并没有发生改变</span><br><span class=\"line\"></span><br><span class=\"line\">140628739587392</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>跟第三个问题仅仅从<code>t[2].extend</code>改成了<code>t[2]+=</code>, 就抛出异常了,所以问题应该是出在<code>+=</code>上了. 下面用<code>dis</code>模块看看它俩执行的步骤: 对下面的代码块执行<code>dis</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">t &#x3D; (1,2, [30,40])</span><br><span class=\"line\"></span><br><span class=\"line\">t[2] +&#x3D; [50,60]</span><br><span class=\"line\"></span><br><span class=\"line\">t[2].extend([70, 80])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行<code>python -m dis test.py</code>,结果如下，下面只保留第2,3行代码的执行过程，以及关键步骤的注释如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2          21 LOAD_NAME                0 (t)</span><br><span class=\"line\"></span><br><span class=\"line\">           24 LOAD_CONST               1 (2)</span><br><span class=\"line\"></span><br><span class=\"line\">           27 DUP_TOPX                 2</span><br><span class=\"line\"></span><br><span class=\"line\">           30 BINARY_SUBSCR</span><br><span class=\"line\"></span><br><span class=\"line\">           31 LOAD_CONST               4 (50)</span><br><span class=\"line\"></span><br><span class=\"line\">           34 LOAD_CONST               5 (60)</span><br><span class=\"line\"></span><br><span class=\"line\">           37 BUILD_LIST               2</span><br><span class=\"line\"></span><br><span class=\"line\">           40 INPLACE_ADD</span><br><span class=\"line\"></span><br><span class=\"line\">           41 ROT_THREE</span><br><span class=\"line\"></span><br><span class=\"line\">           42 STORE_SUBSCR</span><br><span class=\"line\"></span><br><span class=\"line\">3          43 LOAD_NAME                0 (t)</span><br><span class=\"line\"></span><br><span class=\"line\">           46 LOAD_CONST               1 (2)</span><br><span class=\"line\"></span><br><span class=\"line\">           49 BINARY_SUBSCR</span><br><span class=\"line\"></span><br><span class=\"line\">           50 LOAD_ATTR                1 (extend)</span><br><span class=\"line\"></span><br><span class=\"line\">           53 LOAD_CONST               6 (70)</span><br><span class=\"line\"></span><br><span class=\"line\">           56 LOAD_CONST               7 (80)</span><br><span class=\"line\"></span><br><span class=\"line\">           59 BUILD_LIST               2</span><br><span class=\"line\"></span><br><span class=\"line\">           62 CALL_FUNCTION            1</span><br><span class=\"line\"></span><br><span class=\"line\">           65 POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">           66 LOAD_CONST               8 (None)</span><br><span class=\"line\"></span><br><span class=\"line\">           69 RETURN_VALUE</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>解释一下关键的语句:</p>\n<ul>\n<li>  <code>30 BINARY_SUBSCR</code>: 表示将<code>t[2]</code>的值放在TOS(Top of Stack)，这里是指<code>[30, 40]</code>这个列表</li>\n<li>  <code>40 INPLACE_ADD</code>: 表示<code>TOS += [50,60]</code> 执行这一步是可以成功的，修改了TOS的列表为<code>[30,40,50,60]</code></li>\n<li>  <code>42 STORE_SUBSCR</code>: 表示<code>s[2] = TOS</code> 问题就出在这里了，这里产生了一个<strong>赋值操作</strong>，因此会抛异常！但是上述对列表的修改已经完成, 这也就解释了开篇的第一个问题。</li>\n</ul>\n<p>再看<code>extend</code>的过程，前面都一样，只有这一行:</p>\n<ul>\n<li>  <code>62 CALL_FUNCTION</code>: 这个直接调用内置extend函数完成了对原列表的修改，其中并没有<code>assign</code>操作，因此可以正常执行。</li>\n</ul>\n<p>现在逐渐清晰了， 换句话说，<code>+=</code><strong>并不是原子操作</strong>，相当于下面的两步:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">t[2].extend([50,60])</span><br><span class=\"line\"></span><br><span class=\"line\">t[2] &#x3D; t[2]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>第一步可以正确执行，但是第二步有了<code>=</code>，肯定会抛异常的。 同样这也可以解释在使用<code>+=</code>的时候，为何<code>t[2]</code>的<code>id</code>明明没有变化，但是仍然抛出异常了。</p>\n<p>现在用一句话总结下:</p>\n<blockquote>\n<p>tuple中元素不支持<code>assign</code>操作，但是对于那些是可变对象的元素如列表，字典等，在没有<code>assign</code>操作的基础上，比如一些<code>in-place</code>操作，是可以修改内容的</p>\n</blockquote>\n<p>可以用第四个问题来简单验证一下，使用一个指向<code>[30,40]</code>的名称<code>a</code>来作为元素的值，然后对<code>a</code>做<code>in-place</code>的修改，其中并没有涉及到对tuple的<code>assign</code>操作，那肯定是正常执行的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个问题其实以前也就遇到过，但是没想过具体的原理，后来翻书的时候又看到了， 于是花了点时间把这一个系列查了部分资料以及结合自己的理解都整理了出来, 算是饭后茶点吧, 不严谨的地方烦请指出.</p>\n<p>部分参考如下:</p>\n<ul>\n<li>  <a href=\"http://bugs.python.org/issue11562\">python bugs</a></li>\n<li>  <a href=\"https://docs.python.org/2/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works\">python faq</a></li>\n<li>  <a href=\"https://stackoverflow.com/questions/10397121/why-does-of-a-list-within-a-python-tuple-raise-typeerror-but-modify-the-list\">stackoverflow</a></li>\n<li>  Fluent Python</li>\n</ul>\n<p>本文链接: <a href=\"http://shomy.top/2017/08/17/python-tuple-assign/\">http://shomy.top/2017/08/17/python-tuple-assign/</a></p>\n","categories":["python"],"tags":["tuple"]},{"title":"Python中字典的键为什么要是不可变类型","url":"/2021/05/04/python/Python%E4%B8%AD%E5%AD%97%E5%85%B8%E7%9A%84%E9%94%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>很多python初学者经常会有这样的疑问，为什么Python有tuple（元组）和list（列表）两种类型？为什么tuple可以作为字典的key，list不可以？要理解这个问题，首先要明白python的字典工作原理。</p>\n<span id=\"more\"></span>\n\n<p>Python的字典是如何工作的</p>\n<p>在Python中，字典也就是一个个的“映射”，将key映射到value：</p>\n<p>对一个特定的key可以得到一个value value = d[key]</p>\n<p>为了实现这个功能，Python必须能够做到，给出一个key，找到哪一个value与这个key对应。先来考虑一种比较简单的实现，将所有的key-value键值对存放到一个list中，每当需要的时候，就去遍历这个list，用key去和键值对的key匹配，如果相等，就拿到value。但是这种实现在数据量很大的时候就变得很低效。它的算法复杂度是O(n)，n是存放键值对的数量。</p>\n<p>为此，Python使用了hash（哈希）的方法来实现，要求每一个存放到字典中的对象都要实现hash函数，这个函数可以产生一个int值，叫做hash value（哈希值），通过这个int值，就可以快速确定对象在字典中的位置。</p>\n<p>这个查询的大致过程如下：</p>\n<p>def lookup(d, key): ‘’’字典的查询过程概括为下面3步: 1. 通过hash函数将key计算为哈希值. 2. 通过hash值确定一个位置，这个位置是一个存放着 可能存在冲突的元素的数组（很多地方叫做“桶”，bucket）， 每一个元素都是一个键值对，理想情况下，这个数组里只有1个元素. 3. 遍历这个数组，找到目标key，返回对应的value. ‘’’ h = hash(key)# step 1 cl = d.data[h]# step 2 for pairin cl:# step 3 if key == pair[0]: return pair[1] else: raise KeyError, “Key %s not found.” % key</p>\n<p>要使这个查找过程正常工作，hash函数必须满足条件： 如果两个key产生了不同的hash value，那么这两个key对象是不想等的。 即</p>\n<p>for alli1, i2, if hash(i1) != hash(i2), then i1 != i2</p>\n<p>否则的话，hash value不同，对象却相同，那么相同的对象产生不同的hash value，查找的时候就会进错桶（step 2），在错误的桶里永远也找不到你要找的value。</p>\n<p>另外，要让字典保持高查找效率，还要保证： 当两个key产生相同的hash value，那么他们是相等的。</p>\n<p>for alli1, i2, if hash(i1) == hash(i2), then i1 == i2</p>\n<p>这样做的目的是，尽量满足每个hash桶只有一个元素。为什么要这样呢？ 考虑下面这个hash函数。</p>\n<p>def hash(obj): return 1</p>\n<p>这个hash函数是满足上面我们谈的第一个条件的：如果两个key的hash value不同，那么两个key对象不相同。因为所有的对象产生的hash value都是1，所以不存在能产生不同hash value的key，也就不存在不满足的情况。但是这样做的坏处是，因为所有的hash value都相同，所以就把所有的对象分到了同一个地方。查找的时候，进行到第三步，遍历的效率就变成了O(n).</p>\n<p>Hash函数应该保证所有的元素平均的分配到每一个桶中，理想的情况是，每一个位置只有一个元素。</p>\n<p>字典Key要满足的要求</p>\n<p>经过上面的讨论，我们应该明白Python为什么对字典的key有这样的要求了：</p>\n<p>要作为字典的key，对象必须要支持hash函数（即__hash__），相等比较(__eq__或__cmp__），并且满足上面我们讨论过的条件。</p>\n<p>List为什么不能作为key</p>\n<p>至于这个问题，最直接的答案就是：list没有支持__hash__方法，那么为什么呢？</p>\n<p>对于list的hash函数，我们可能有下面两种实现的方式：</p>\n<p>第一种，基于id。这满足条件，“如果hash值不同，那么他们的id当然不同”。但考虑到list一般是作为容器，基于id来hash可能会导致下面两种情况：</p>\n<p>用相同的list作为key去字典中找某个元素可能会得到不同的结果，因为是基于id hash的，所以即使他们的内容相同，字典依然将他们作为不同的元素对待。 创建一个一模一样的list用字典查找永远会得到一个KeyError。</p>\n<p>第二种，基于内容。tuple就是这样做的，但是要注意一点，list是可以修改的。当list修改之后，你就永远别想再从字典中拿回来了。见下面的代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; l &#x3D; [1, 2]</span><br><span class=\"line\">&gt;&gt;&gt; d &#x3D; &#123;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; d[l] &#x3D; 42</span><br><span class=\"line\">&gt;&gt;&gt; l.append(3)</span><br><span class=\"line\">&gt;&gt;&gt; d[l]</span><br><span class=\"line\"># 原来的hash值是基于[1, 2]hash的，</span><br><span class=\"line\"># 现在是基于[1, 2, 3]，所以找不到 Traceback (mostrecentcalllast): File &quot;&quot;, line 1, in ? KeyError: [1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; d[[1, 2]] # 基于hash [1, 2]</span><br><span class=\"line\"># 但是遍历的时候找不到key相等的键值对</span><br><span class=\"line\">#（因为字典里的key变成了[1, 2, 3] Traceback (mostrecentcalllast): File &quot;&quot;, line 1, in ? KeyError: [1, 2]</span><br></pre></td></tr></table></figure>\n<p>鉴于两种实现的方式都存在一定的副作用，所以Python规定：</p>\n<p>内置的list不能作为字典的key.</p>\n<p>但tuple是不可变，所以tuple可以作为字典的key。</p>\n<p>自定义的类型作为字典的Key</p>\n<p>用户自定义的类型就可以作为key了，默认的 hash(object) 是 id(object) , 默认的 cmp(object1,object2) 是 cmp(id(object1),id(object2))， 同样是可以修改的对象，为什么这里就没有上面说的问题呢？</p>\n<p>一般来说，在映射中比较常见的需求是用一个object替换掉原来的，所以id比内容更重要，就可以基于id来hash 如果内容重要的话，自定义的类型可以通过覆盖__hash__函数和__cmp__函数或__eq__函数来实现</p>\n<p>值得注意的是：将对象和一个value关联起来，更好的做法是将value设置为对象的一个属性。</p>\n","categories":["python"],"tags":["不可变类型","字典"]},{"title":"paramiko 远程执行命令","url":"/2021/05/04/python/paramiko%20%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Python学习总结-06-paramiko-远程执行命令\"><a href=\"#Python学习总结-06-paramiko-远程执行命令\" class=\"headerlink\" title=\"Python学习总结 06 paramiko 远程执行命令\"></a><a href=\"https://www.cnblogs.com/wangshuo1/p/6265360.html\">Python学习总结 06 paramiko 远程执行命令</a></h1><p>  有时会需要在远程的机器上执行一个命令，并获得其返回结果。对于这种情况，python 可以很容易的实现。</p>\n<h1 id=\"1-工具\"><a href=\"#1-工具\" class=\"headerlink\" title=\"1 工具\"></a>1 工具</h1><p>Python paramiko</p>\n<ol>\n<li>Paramiko模块安装</li>\n</ol>\n<p>　　在Linux的Terminal中，直接输入pip install paramiko 命令安装。</p>\n<p>2）确定paramiko安装成功</p>\n<p>　　在python命令行输入import paramiko，确认是否安装成功，没报错就没问题。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2 步骤\"></a>2 步骤</h1><p>1 导入 paramiko 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class=\"line\">import paramiko</span><br></pre></td></tr></table></figure>\n\n<p>2 创建 ssh 连接函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def ssh_connect( _host, _username, _password ):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        _ssh_fd &#x3D; paramiko.SSHClient()</span><br><span class=\"line\">        _ssh_fd.set_missing_host_key_policy( paramiko.AutoAddPolicy() )</span><br><span class=\"line\">        _ssh_fd.connect( _host, username &#x3D; _username, password &#x3D; _password )</span><br><span class=\"line\">    except Exception, e:</span><br><span class=\"line\">        print( &#39;ssh %s@%s: %s&#39; % (_username, _host, e) )</span><br><span class=\"line\">        exit()</span><br><span class=\"line\">    return _ssh_fd</span><br></pre></td></tr></table></figure>\n\n<p>3 创建命令执行函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def ssh_exec_cmd( _ssh_fd, _cmd ):</span><br><span class=\"line\">    return _ssh_fd.exec_command( _cmd )</span><br></pre></td></tr></table></figure>\n<p>4 创建关闭 ssh 函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def ssh_close( _ssh_fd ):</span><br><span class=\"line\">    _ssh_fd.close()</span><br></pre></td></tr></table></figure>\n\n<p>5 使用示例</p>\n<figure class=\"highlight plain\"><figcaption><span>main():</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">    hostname &#x3D; &#39;192.168.55.243&#39;</span><br><span class=\"line\">    port &#x3D; 22</span><br><span class=\"line\">    username &#x3D; &#39;root&#39;</span><br><span class=\"line\">    password &#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\">    cmd &#x3D; &quot;ps -ef|grep java&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    sshd &#x3D; ssh_connect( hostname , username , password )</span><br><span class=\"line\">    stdin, stdout, stderr &#x3D; ssh_exec_cmd( sshd, cmd )</span><br><span class=\"line\">    err_list &#x3D; stderr.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">    if len( err_list ) &gt; 0:</span><br><span class=\"line\">        print &#39;ERROR:&#39; + err_list[0]</span><br><span class=\"line\">        exit()</span><br><span class=\"line\"></span><br><span class=\"line\">    for item in stdout.readlines():</span><br><span class=\"line\">        print item,</span><br><span class=\"line\">    ssh_close( sshd )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>　　如果执行脚本成功，会成功返回以下结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">root      2540  2536  2 14:13 pts&#x2F;4    00:01:21 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.resource.App</span><br><span class=\"line\">root      3442  3387  0  2016 ?        01:09:00 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.product.App</span><br><span class=\"line\">root      3451  3390  0  2016 ?        01:04:54 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.report.App</span><br><span class=\"line\">root      3452  3388  0  2016 ?        00:51:00 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.workflow.launcher.App</span><br><span class=\"line\">root      3892  3886  0  2016 ?        00:29:59 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.charge.App</span><br><span class=\"line\">root      4509  4507  0 15:09 ?        00:00:00 bash -c ps -ef|grep java</span><br><span class=\"line\">root      4519  4509  0 15:09 ?        00:00:00 grep java</span><br><span class=\"line\">root     12861 12857  0 Jan06 ?        00:09:06 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.workorder.App</span><br><span class=\"line\">root     16484 16480  0  2016 ?        00:45:27 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.billing.App</span><br><span class=\"line\">root     18699 18694  0 Jan06 ?        00:09:30 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.order.App</span><br><span class=\"line\">root     21902 21898  0 Jan05 ?        00:18:46 java -Ddefault.client.encoding&#x3D;UTF-8 -Dfile.encoding&#x3D;UTF-8 -Duser.language&#x3D;Zh -Duser.region&#x3D;CN -Duser.timezone&#x3D;GMT+08 cn.com.ctsi.csdp.user.launcher.App</span><br></pre></td></tr></table></figure>\n\n<p> 　　在实际的开发中，每次更新模块的jar包时，都需要使用 ps -ef | grep java, 查看模块的进程号，然后使用使用命令 kill -9 进程号，处理掉进程，然后重新启动 模块。</p>\n<p>下面尝试使用python脚本来代替手工输入代码。</p>\n<h1 id=\"3-实例\"><a href=\"#3-实例\" class=\"headerlink\" title=\"3 实例\"></a>3 实例</h1><p>1） 启动模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">import paramiko</span><br><span class=\"line\">ssh &#x3D; paramiko.SSHClient()</span><br><span class=\"line\">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\">ssh.connect(&#39;192.168.55.243&#39;, username &#x3D; &#39;root&#39;, password &#x3D; &#39;P@ssw0rd&#39;, timeout &#x3D; 5)</span><br><span class=\"line\">cmd &#x3D; &#39;nohup &#x2F;csdp&#x2F;charge_launcher-1.0-release&#x2F;bin&#x2F;run.sh &gt; &#x2F;csdp&#x2F;charge_launcher-1.0-release&#x2F;bin&#x2F;nohup.out 2&gt;&amp;1 &amp; \\r\\n&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">password&#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">stdin, stdout, stderr &#x3D; ssh.exec_command( cmd )</span><br><span class=\"line\">##stdin, stdout, stderr &#x3D; ssh.exec_command(&#39;sudo -S %s\\n&#39; % cmd )</span><br><span class=\"line\">##stdin.write(&#39;%s\\r\\n&#39; % password)</span><br><span class=\"line\">##stdin.flush()</span><br><span class=\"line\">print &quot;------------------------&quot;</span><br><span class=\"line\">##print stdout.readlines()</span><br><span class=\"line\">##print stderr.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print &quot;------------------------&quot;</span><br><span class=\"line\">cmd &#x3D; &#39;pwd&#39;</span><br><span class=\"line\">stdin, stdout, stderr &#x3D; ssh.exec_command(cmd )</span><br><span class=\"line\">print stdout.readlines()</span><br><span class=\"line\"></span><br><span class=\"line\">ssh.close()</span><br></pre></td></tr></table></figure>\n<p>2） 远程上传文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import paramiko</span><br><span class=\"line\"></span><br><span class=\"line\">serverIp &#x3D; &#39;192.168.55.243&#39;</span><br><span class=\"line\">serverUser &#x3D; &#39;root&#39;</span><br><span class=\"line\">serverPwd &#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">localFile &#x3D; &#39;user-1.0-release.jar&#39;</span><br><span class=\"line\">localpath &#x3D; r&#39;D:\\workspace\\csdp201512041\\csdp-ningxia\\csdp_user\\user\\target&#39; + os.sep + localFile</span><br><span class=\"line\"></span><br><span class=\"line\">remotepath &#x3D; &#39;&#x2F;csdp&#x2F;user_launcher-1.0-dev&#x2F;lib&#x2F;&#39; + localFile</span><br><span class=\"line\"></span><br><span class=\"line\">def ftpModuleFile():</span><br><span class=\"line\">    t &#x3D; paramiko.Transport(( serverIp ,22))</span><br><span class=\"line\">    t.connect(username &#x3D; serverUser , password &#x3D; serverPwd)</span><br><span class=\"line\">    sftp &#x3D; paramiko.SFTPClient.from_transport(t)</span><br><span class=\"line\">   # remotepath&#x3D;&#39;&#x2F;csdp&#x2F;user_launcher-1.0-dev&#x2F;user-1.0-release.jar&#39;</span><br><span class=\"line\">   # localpath&#x3D; r&#39;D:\\workspace\\csdp201512041\\csdp-ningxia\\csdp_user\\user\\target\\user-1.0-release.jar&#39;</span><br><span class=\"line\">    sftp.put(localpath,remotepath)</span><br><span class=\"line\">    t.close()</span><br><span class=\"line\">    print(&quot;：） 成功上传%s文件。&quot; % remotepath)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">   ftpModuleFile()</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>执行远程linux命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">import paramiko</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    hostname &#x3D; &#39;192.168.55.243&#39;</span><br><span class=\"line\">    port &#x3D; 22</span><br><span class=\"line\">    username &#x3D; &#39;root&#39;</span><br><span class=\"line\">    password &#x3D; &#39;P@ssw0rd&#39;</span><br><span class=\"line\">    cmd &#x3D; &quot;ps -ef|grep java&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh &#x3D; paramiko.SSHClient()</span><br><span class=\"line\">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\">    #ssh.connect( hostname ,22, username , password )</span><br><span class=\"line\">    ssh.connect(hostname,username&#x3D;username,password&#x3D;password,allow_agent&#x3D;False,look_for_keys&#x3D;False)</span><br><span class=\"line\">    stdin, stdout, stderr &#x3D; ssh.exec_command(cmd )</span><br><span class=\"line\">    list &#x3D; stdout.readlines()</span><br><span class=\"line\">    print( list )</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh.close()</span><br></pre></td></tr></table></figure>\n","categories":["python"],"tags":["paramiko"]},{"title":"python 列表加法\"+\"和\"extend\"的区别","url":"/2021/05/04/python/python%20%E5%88%97%E8%A1%A8%E5%8A%A0%E6%B3%95%22+%22%E5%92%8C%22extend%22%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点:\"></a>相同点:</h3><ul>\n<li> “+”和”extend”都能将两个列表成员拼接到到一起</li>\n</ul>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点:\"></a>不同点:</h3><ul>\n<li><p> + : 生成的是一个新列表(id改变)</p>\n</li>\n<li><p>extend : 是将一个列表的成员一个个取出添加到原列表中 , 改变的是原列表的值 , id不变</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117003180-21ed8780-ad17-11eb-97fc-fedcf041db5d.png\" alt=\"image\"></p>\n","categories":["python"],"tags":["list"]},{"title":"python 生成器和迭代器","url":"/2021/05/04/python/python%20%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本节主要记录一下列表生成式，生成器和迭代器的知识点</p>\n<h3 id=\"列表生成器\"><a href=\"#列表生成器\" class=\"headerlink\" title=\"列表生成器\"></a><strong>列表生成器</strong></h3><p><strong>首先举个例子</strong></p>\n<p>现在有个需求，看列表 [0，1，2，3，4，5，6，7，8，9]，要求你把列表里面的每个值加1，你怎么实现呢？</p>\n<p>方法一（简单）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">b &#x3D; []</span><br><span class=\"line\"># for index,i in enumerate(info):</span><br><span class=\"line\">#     print(i+1)</span><br><span class=\"line\">#     b.append(i+1)</span><br><span class=\"line\"># print(b)</span><br><span class=\"line\">for index,i in enumerate(info):</span><br><span class=\"line\">    info[index] +&#x3D;1</span><br><span class=\"line\">print(info)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>方法二（一般）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">a &#x3D; map(lambda x:x+1,info)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">for i in a:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n\n<p>方法三（高级）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class=\"line\">a &#x3D; [i+1 for i in range(10)]</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><h4 id=\"什么是生成器？\"><a href=\"#什么是生成器？\" class=\"headerlink\" title=\"什么是生成器？\"></a>什么是生成器？</h4><p>　　通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\n<p>　　所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，<strong>在Python中，这种一边循环一边计算的机制，称为生成器：generator</strong></p>\n<p>　　生成器是一个特殊的程序，可以被用作控制循环的迭代行为，<strong>python中生成器是迭代器的一种</strong>，使用yield返回值函数，每次调用yield会暂停，而可以使用next()函数和send()函数恢复生成器。</p>\n<p>　　生成器类似于返回值为数组的一个函数，这个函数可以接受参数，可以被调用，但是，不同于一般的函数会一次性返回包括了所有数值的数组，生成器一次只能产生一个值，这样消耗的内存数量将大大减小，而且允许调用函数可以很快的处理前几个返回值，因此生成器看起来像是一个函数，但是表现得却像是迭代器</p>\n<h4 id=\"python中的生成器\"><a href=\"#python中的生成器\" class=\"headerlink\" title=\"python中的生成器\"></a>python中的生成器</h4><p>　　要创建一个generator，有很多种方法，第一种方法很简单，<strong>只有把一个列表生成式的[]中括号改为（）小括号，就创建一个generator</strong></p>\n<p>举例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#列表生成式</span><br><span class=\"line\">lis &#x3D; [x*x for x in range(10)]</span><br><span class=\"line\">print(lis)</span><br><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex &#x3D; (x*x for x in range(10))</span><br><span class=\"line\">print(generator_ex)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000002A4CBF9EBA0&gt;</span><br></pre></td></tr></table></figure>\n<p>　　那么创建list和generator_ex，的区别是什么呢？从表面看就是[  ]和（）,但是结果却不一样，一个打印出来是列表（因为是列表生成式），而第二个打印出来却是&lt;generator object <genexpr> at 0x000002A4CBF9EBA0&gt;，那么如何打印出来generator_ex的每一个元素呢？</p>\n<p>　　如果要一个个打印出来，可以通过next（）函数获得generator的下一个返回值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex &#x3D; (x*x for x in range(10))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">print(next(generator_ex))</span><br><span class=\"line\">结果：</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">9</span><br><span class=\"line\">16</span><br><span class=\"line\">25</span><br><span class=\"line\">36</span><br><span class=\"line\">49</span><br><span class=\"line\">64</span><br><span class=\"line\">81</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">  File &quot;列表生成式.py&quot;, line 42, in &lt;module&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    print(next(generator_ex))</span><br><span class=\"line\"></span><br><span class=\"line\">StopIteration</span><br></pre></td></tr></table></figure>\n<p>　　大家可以看到，generator保存的是算法，每次调用next(generaotr_ex)就计算出他的下一个元素的值，直到计算出最后一个元素，没有更多的元素时，抛出StopIteration的错误，而且上面这样不断调用是一个不好的习惯，正确的方法是使用for循环，因为generator也是可迭代对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#生成器</span><br><span class=\"line\">generator_ex &#x3D; (x*x for x in range(10))</span><br><span class=\"line\">for i in generator_ex:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">9</span><br><span class=\"line\">16</span><br><span class=\"line\">25</span><br><span class=\"line\">36</span><br><span class=\"line\">49</span><br><span class=\"line\">64</span><br><span class=\"line\">81</span><br></pre></td></tr></table></figure>\n<p>　　所以我们创建一个generator后，基本上永远不会调用next()，而是通过for循环来迭代，并且不需要关心StopIteration的错误，generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。</p>\n<p>比如著名的斐波那契数列，除第一个和第二个数外，任何一个数都可以由前两个相加得到：</p>\n<p>1，1，2，3，5，8，12，21，34…..</p>\n<p>斐波那契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#fibonacci数列</span><br><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; fib(10)</span><br><span class=\"line\">print(fib(10))</span><br></pre></td></tr></table></figure>\n\n<p>　　a,b = b ,a+b  其实相当于 t =a+b ,a =b ,b =t  ，所以不必写显示写出临时变量t，就可以输出斐波那契数列的前N个数字。上面输出的结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br><span class=\"line\">13</span><br><span class=\"line\">21</span><br><span class=\"line\">34</span><br><span class=\"line\">55</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br><span class=\"line\">13</span><br><span class=\"line\">21</span><br><span class=\"line\">34</span><br><span class=\"line\">55</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>　　仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p>\n<p>　　也就是说上面的函数也可以用generator来实现，上面我们发现，print(b)每次函数运行都要打印，占内存，所以为了不占内存，我们也可以使用生成器，这里叫yield。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; fib(10)</span><br><span class=\"line\">print(fib(10))</span><br></pre></td></tr></table></figure>\n<p>　　但是返回的不再是一个值，而是一个生成器，和上面的例子一样，大家可以看一下结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;generator object fib at 0x000001C03AC34FC0&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>　　那么这样就不占内存了，这里说一下generator和函数的执行流程，函数是顺序执行的，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次被next（）调用时候从上次的返回yield语句处急需执行，也就是用多少，取多少，不占内存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; fib(10)</span><br><span class=\"line\">print(fib(10))</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(&quot;可以顺便干其他事情&quot;)</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\">print(a.__next__())</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">&lt;generator object fib at 0x0000023A21A34FC0&gt;</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">可以顺便干其他事情</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<p>　　在上面fib的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。同样的，把函数改成generator后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\">for i in fib(6):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<p>　　但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果拿不到返回值，那么就会报错，所以为了不让报错，就要进行异常处理，拿到返回值，如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def fib(max):</span><br><span class=\"line\">    n,a,b &#x3D;0,0,1</span><br><span class=\"line\">    while n &lt; max:</span><br><span class=\"line\">        yield b</span><br><span class=\"line\">        a,b &#x3D;b,a+b</span><br><span class=\"line\">        n &#x3D; n+1</span><br><span class=\"line\">    return &#39;done&#39;</span><br><span class=\"line\">g &#x3D; fib(6)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        x &#x3D; next(g)</span><br><span class=\"line\">        print(&#39;generator: &#39;,x)</span><br><span class=\"line\">    except StopIteration as e:</span><br><span class=\"line\">        print(&quot;生成器返回值：&quot;,e.value)</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">generator:  1</span><br><span class=\"line\">generator:  1</span><br><span class=\"line\">generator:  2</span><br><span class=\"line\">generator:  3</span><br><span class=\"line\">generator:  5</span><br><span class=\"line\">generator:  8</span><br><span class=\"line\">生成器返回值： done</span><br></pre></td></tr></table></figure>\n<p><strong>还可以通过yield实现在单线程的情况下实现并发运算的效果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">def consumer(name):</span><br><span class=\"line\">    print(&quot;%s 准备学习啦!&quot; %name)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">       lesson &#x3D; yield</span><br><span class=\"line\"></span><br><span class=\"line\">       print(&quot;开始[%s]了,[%s]老师来讲课了!&quot; %(lesson,name))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def producer(name):</span><br><span class=\"line\">    c &#x3D; consumer(&#39;A&#39;)</span><br><span class=\"line\">    c2 &#x3D; consumer(&#39;B&#39;)</span><br><span class=\"line\">    c.__next__()</span><br><span class=\"line\">    c2.__next__()</span><br><span class=\"line\">    print(&quot;同学们开始上课 了!&quot;)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        print(&quot;到了两个同学!&quot;)</span><br><span class=\"line\">        c.send(i)</span><br><span class=\"line\">        c2.send(i)</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">A 准备学习啦!</span><br><span class=\"line\">B 准备学习啦!</span><br><span class=\"line\">同学们开始上课 了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[0]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[0]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[1]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[1]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[2]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[2]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[3]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[3]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[4]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[4]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[5]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[5]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br><span class=\"line\">开始[6]了,[A]老师来讲课了!</span><br><span class=\"line\">开始[6]了,[B]老师来讲课了!</span><br><span class=\"line\">到了两个同学!</span><br></pre></td></tr></table></figure>\n<p>　　由上面的例子我么可以发现，python提供了两种基本的方式</p>\n<p><strong>生成器函数：也是用def定义的，利用关键字yield一次性返回一个结果，阻塞，重新开始</strong></p>\n<p><strong>生成器表达式：返回一个对象，这个对象只有在需要的时候才产生结果</strong></p>\n<h4 id=\"——生成器函数\"><a href=\"#——生成器函数\" class=\"headerlink\" title=\"——生成器函数\"></a>——生成器函数</h4><p>为什么叫生成器函数？因为它随着时间的推移生成了一个数值队列。一般的函数在执行完毕之后会返回一个值然后退出，但是生成器函数会自动挂起，然后重新拾起急需执行，他会利用yield关键字关起函数，给调用者返回一个值，同时保留了当前的足够多的状态，可以使函数继续执行，生成器和迭代协议是密切相关的，<strong>迭代器都有一个__next__()__成员方法，</strong>这个方法要么返回迭代的下一项，要买引起异常结束迭代。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 函数有了yield之后，函数名+（）就变成了生成器</span><br><span class=\"line\"># return在生成器中代表生成器的中止，直接报错</span><br><span class=\"line\"># next的作用是唤醒并继续执行</span><br><span class=\"line\"># send的作用是唤醒并继续执行，发送一个信息到生成器内部</span><br><span class=\"line\">&#39;&#39;&#39;生成器&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">def create_counter(n):</span><br><span class=\"line\">    print(&quot;create_counter&quot;)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        yield n</span><br><span class=\"line\">        print(&quot;increment n&quot;)</span><br><span class=\"line\">        n +&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">gen &#x3D; create_counter(2)</span><br><span class=\"line\">print(gen)</span><br><span class=\"line\">print(next(gen))</span><br><span class=\"line\">print(next(gen))</span><br><span class=\"line\"></span><br><span class=\"line\">结果：</span><br><span class=\"line\">&lt;generator object create_counter at 0x0000023A1694A938&gt;</span><br><span class=\"line\">create_counter</span><br><span class=\"line\">2</span><br><span class=\"line\">increment n</span><br><span class=\"line\">3</span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"——生成器表达式\"><a href=\"#——生成器表达式\" class=\"headerlink\" title=\"——生成器表达式\"></a>——生成器表达式</h4><p>生成器表达式来源于迭代和列表解析的组合，生成器和列表解析类似，但是它使用尖括号而不是方括号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; # 列表解析生成列表</span><br><span class=\"line\">&gt;&gt;&gt; [ x ** 3 for x in range(5)]</span><br><span class=\"line\">[0, 1, 8, 27, 64]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; # 生成器表达式</span><br><span class=\"line\">&gt;&gt;&gt; (x ** 3 for x in range(5))</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at 0x000000000315F678&gt;</span><br><span class=\"line\">&gt;&gt;&gt; # 两者之间转换</span><br><span class=\"line\">&gt;&gt;&gt; list(x ** 3 for x in range(5))</span><br><span class=\"line\">[0, 1, 8, 27, 64]</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>一个迭代既可以被写成生成器函数，也可以被协程生成器表达式，均支持自动和手动迭代。而且这些生成器只支持一个active迭代，也就是说生成器的迭代器就是生成器本身。</strong></p>\n<h3 id=\"迭代器（迭代就是循环）\"><a href=\"#迭代器（迭代就是循环）\" class=\"headerlink\" title=\"迭代器（迭代就是循环）\"></a>迭代器（迭代就是循环）</h3><p>**　　迭代器包含有next方法的实现，在正确的范围内返回期待的数据以及超出范围后能够抛出StopIteration的错误停止迭代。**</p>\n<p>　　我们已经知道，可以直接作用于for循环的数据类型有以下几种：</p>\n<p>一类是集合数据类型，如list,tuple,dict,set,str等</p>\n<p>一类是generator，包括生成器和带yield的generator function</p>\n<p>这些可以直接作用于for 循环的对象统称为可迭代对象：Iterable</p>\n<p>可以使用isinstance()判断一个对象是否为可<strong>Iterable</strong>对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterable</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure>\n<p>　　而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。</p>\n<p>所以这里讲一下迭代器</p>\n<p><strong>一个实现了iter方法的对象时可迭代的，一个实现next方法的对象是迭代器</strong></p>\n<p><strong>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。</strong></p>\n<p>可以使用isinstance()判断一个对象是否是<strong>Iterator</strong>对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from collections import Iterator</span><br><span class=\"line\">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(&#39;abc&#39;, Iterator)</span><br><span class=\"line\">False</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable（可迭代对象）</code>，却不是<code>Iterator（迭代器）</code>。</p>\n<p><strong>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code><strong>可以使用<code>iter()</code>函数</strong>：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; isinstance(iter([]), Iterator)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(iter(&#39;abc&#39;), Iterator)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p>\n<p>这是因为Python的<code>Iterator</code>对象表示的是一个<strong>数据流</strong>，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p>\n<p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p>\n<p><strong>判断下列数据类型是可迭代对象or迭代器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;&#39;hello&#39;</span><br><span class=\"line\">l&#x3D;[1,2,3,4]</span><br><span class=\"line\">t&#x3D;(1,2,3)</span><br><span class=\"line\">d&#x3D;&#123;&#39;a&#39;:1&#125;</span><br><span class=\"line\">set&#x3D;&#123;1,2,3&#125;</span><br><span class=\"line\">f&#x3D;open(&#39;a.txt&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">s&#x3D;&#39;hello&#39;     #字符串是可迭代对象，但不是迭代器</span><br><span class=\"line\">l&#x3D;[1,2,3,4]     #列表是可迭代对象，但不是迭代器</span><br><span class=\"line\">t&#x3D;(1,2,3)       #元组是可迭代对象，但不是迭代器</span><br><span class=\"line\">d&#x3D;&#123;&#39;a&#39;:1&#125;        #字典是可迭代对象，但不是迭代器</span><br><span class=\"line\">set&#x3D;&#123;1,2,3&#125;     #集合是可迭代对象，但不是迭代器</span><br><span class=\"line\"># *************************************</span><br><span class=\"line\">f&#x3D;open(&#39;test.txt&#39;) #文件是可迭代对象，是迭代器</span><br><span class=\"line\"></span><br><span class=\"line\">#如何判断是可迭代对象，只有__iter__方法，执行该方法得到的迭代器对象。</span><br><span class=\"line\"># 及可迭代对象通过__iter__转成迭代器对象</span><br><span class=\"line\">from collections import Iterator  #迭代器</span><br><span class=\"line\">from collections import Iterable  #可迭代对象</span><br><span class=\"line\"></span><br><span class=\"line\">print(isinstance(s,Iterator))     #判断是不是迭代器</span><br><span class=\"line\">print(isinstance(s,Iterable))       #判断是不是可迭代对象</span><br><span class=\"line\"></span><br><span class=\"line\">#把可迭代对象转换为迭代器</span><br><span class=\"line\">print(isinstance(iter(s),Iterator))</span><br></pre></td></tr></table></figure>\n<p>**　注意：文件的判断**</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">f &#x3D; open(&#39;housing.csv&#39;)</span><br><span class=\"line\">from collections import Iterator</span><br><span class=\"line\">from collections import Iterable</span><br><span class=\"line\"></span><br><span class=\"line\">print(isinstance(f,Iterator))</span><br><span class=\"line\">print(isinstance(f,Iterable))</span><br><span class=\"line\"></span><br><span class=\"line\">True</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>结论：文件是可迭代对象，也是迭代器</strong></p>\n<p><strong>小结：</strong></p>\n<ul>\n<li>  凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</li>\n<li>  凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</li>\n<li>  集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</li>\n</ul>\n<p>Python3的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for x in [1, 2, 3, 4, 5]:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<p>　实际上完全等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 首先获得Iterator对象:</span><br><span class=\"line\">it &#x3D; iter([1, 2, 3, 4, 5])</span><br><span class=\"line\"># 循环:</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获得下一个值:</span><br><span class=\"line\">        x &#x3D; next(it)</span><br><span class=\"line\">    except StopIteration:</span><br><span class=\"line\">        # 遇到StopIteration就退出循环</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<h3 id=\"对yield的总结\"><a href=\"#对yield的总结\" class=\"headerlink\" title=\"对yield的总结\"></a>对yield的总结</h3><p>　　（1）通常的for..in…循环中，in后面是一个数组，这个数组就是一个可迭代对象，类似的还有链表，字符串，文件。他可以是a = [1,2,3]，也可以是a = [x*x for x in range(3)]。</p>\n<p>它的缺点也很明显，就是所有数据都在内存里面，如果有海量的数据，将会非常耗内存。</p>\n<p>　　（2）生成器是可以迭代的，但是只可以读取它一次。因为用的时候才生成，比如a = (x*x for x in range(3))。!!!!注意这里是小括号而不是方括号。</p>\n<p>　　（3）生成器（generator）能够迭代的关键是他有next()方法，工作原理就是通过重复调用next()方法，直到捕获一个异常。</p>\n<p>　　（4）带有yield的函数不再是一个普通的函数，而是一个生成器generator，可用于迭代</p>\n<p>　　（5）yield是一个类似return 的关键字，迭代一次遇到yield的时候就返回yield后面或者右面的值。而且下一次迭代的时候，从上一次迭代遇到的yield后面的代码开始执行</p>\n<p>　　（6）yield就是return返回的一个值，并且记住这个返回的位置。下一次迭代就从这个位置开始。</p>\n<p>　　（7）带有yield的函数不仅仅是只用于for循环，而且可用于某个函数的参数，只要这个函数的参数也允许迭代参数。</p>\n<p>　　（8）send()和next()的区别就在于send可传递参数给yield表达式，这时候传递的参数就会作为yield表达式的值，而yield的参数是返回给调用者的值，也就是说send可以强行修改上一个yield表达式值。</p>\n<p>　　（9）send()和next()都有返回值，他们的返回值是当前迭代遇到的yield的时候，yield后面表达式的值，其实就是当前迭代yield后面的参数。</p>\n<p>　　（10）第一次调用时候必须先next（）或send（）,否则会报错，send后之所以为None是因为这时候没有上一个yield，所以也可以认为next（）等同于send(None)</p>\n<h5 id=\"原文：python-生成器和迭代器有这篇就够了\"><a href=\"#原文：python-生成器和迭代器有这篇就够了\" class=\"headerlink\" title=\"原文：python 生成器和迭代器有这篇就够了\"></a><a href=\"https://www.cnblogs.com/wj-1314/p/8490822.html\">原文：python 生成器和迭代器有这篇就够了</a></h5>","categories":["python"],"tags":["python生成器","python迭代器"]},{"title":"python内置函数-排列组合函数","url":"/2021/05/04/python/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>product 笛卡尔积　　（有放回抽样排列）</p>\n<p>permutations 排列　　（不放回抽样排列）</p>\n<p>combinations 组合,没有重复　　（不放回抽样组合）</p>\n<p>combinations_with_replacement 组合,有重复　　（有放回抽样组合）</p>\n<span id=\"more\"></span>\n\n<p>详细的参见<a href=\"https://docs.python.org/2/library/itertools.html\">官网</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; for i in itertools.product(&#39;ABCD&#39;, repeat &#x3D; 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;A&#39;) (&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;A&#39;) (&#39;B&#39;, &#39;B&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;A&#39;) (&#39;C&#39;, &#39;B&#39;) (&#39;C&#39;, &#39;C&#39;) (&#39;C&#39;, &#39;D&#39;) (&#39;D&#39;, &#39;A&#39;) (&#39;D&#39;, &#39;B&#39;) (&#39;D&#39;, &#39;C&#39;) (&#39;D&#39;, &#39;D&#39;)</span><br><span class=\"line\">&gt;&gt;&gt; for i in itertools.permutations(&#39;ABCD&#39;, 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;A&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;A&#39;) (&#39;C&#39;, &#39;B&#39;) (&#39;C&#39;, &#39;D&#39;) (&#39;D&#39;, &#39;A&#39;) (&#39;D&#39;, &#39;B&#39;) (&#39;D&#39;, &#39;C&#39;)</span><br><span class=\"line\">&gt;&gt;&gt; for i in itertools.combinations(&#39;ABCD&#39;, 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;D&#39;)</span><br><span class=\"line\">&gt;&gt;&gt; for i in itertools.combinations_with_replacement(&#39;ABCD&#39;, 2):</span><br><span class=\"line\">...     print(i)</span><br><span class=\"line\">...</span><br><span class=\"line\">(&#39;A&#39;, &#39;A&#39;) (&#39;A&#39;, &#39;B&#39;) (&#39;A&#39;, &#39;C&#39;) (&#39;A&#39;, &#39;D&#39;) (&#39;B&#39;, &#39;B&#39;) (&#39;B&#39;, &#39;C&#39;) (&#39;B&#39;, &#39;D&#39;) (&#39;C&#39;, &#39;C&#39;) (&#39;C&#39;, &#39;D&#39;) (&#39;D&#39;, &#39;D&#39;)&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure>\n\n<p>还有就是，combinations和permutations返回的是对象地址，原因是在python3里面，返回值已经不再是list,而是iterators（迭代器）, 所以想要使用，只用将iterator 转换成list 即可， 还有其他一些函数返回的也是一个对象，需要list转换，比如 list(map())等</p>\n","categories":["python"],"tags":["python内置函数"]},{"title":"安装Python","url":"/2021/05/04/python/%E5%AE%89%E8%A3%85Python/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"How-to-Install-Python\"><a href=\"#How-to-Install-Python\" class=\"headerlink\" title=\"How to Install Python\"></a><a href=\"https://linuxize.com/post/how-to-install-python-3-7-on-ubuntu-18-04/\">How to Install Python</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev  libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev   liblzma-dev libffi-dev  libc6-dev</span><br><span class=\"line\"></span><br><span class=\"line\">1. 下载源码包</span><br><span class=\"line\">     wget   https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.3&#x2F;Python-3.7.3.tgz</span><br><span class=\"line\">2. mkdir -p &#x2F;usr&#x2F;local&#x2F;python3</span><br><span class=\"line\">3. mv Python-3.7.3.tgz &#x2F;usr&#x2F;local&#x2F;python3</span><br><span class=\"line\">4. tar -zxf Python-3.7.3.tgz</span><br><span class=\"line\">5. cd python3.7.3</span><br><span class=\"line\">6. .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 --with-ssl  --enable-optimizations</span><br><span class=\"line\">7. make</span><br><span class=\"line\">8. make install</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3 [#确认是否是需要的版本]</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3.7 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br><span class=\"line\"></span><br><span class=\"line\">安装pip3 apt-get install python3-pip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mac-安装python\"><a href=\"#mac-安装python\" class=\"headerlink\" title=\"mac 安装python\"></a>mac 安装python</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install python</span><br><span class=\"line\">brew install python@3.9 # 安装指定版本</span><br></pre></td></tr></table></figure>\n","categories":["python"]},{"title":"浅析深拷贝浅拷贝","url":"/2021/05/04/python/%E6%B5%85%E6%9E%90%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本文主要介绍python中的深拷贝和浅拷贝究竟从底层ID来看是怎么回事</p>\n<span id=\"more\"></span>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117002717-80663600-ad16-11eb-9151-ccd5e05a538b.png\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/28568478/117002786-94119c80-ad16-11eb-9c19-dd44d0494db8.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002798-996ee700-ad16-11eb-9a72-4cbcdd780596.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002811-9e339b00-ad16-11eb-9c55-2555f7bfc671.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002821-a2f84f00-ad16-11eb-8d56-7d4aa3dde512.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002835-a7246c80-ad16-11eb-8ce6-85764cfff7fe.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/28568478/117002847-abe92080-ad16-11eb-95f5-a8381a3042f4.png\" alt=\"image\"></p>\n","categories":["python"],"tags":["python 深拷贝浅拷贝"]},{"title":"Vue.js - Day1","url":"/2021/05/02/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day1\"><a href=\"#Vue-js-Day1\" class=\"headerlink\" title=\"Vue.js - Day1\"></a>Vue.js - Day1</h1><h2 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>\n<h3 id=\"什么是Vue-js\"><a href=\"#什么是Vue-js\" class=\"headerlink\" title=\"什么是Vue.js\"></a>什么是Vue.js</h3><ul>\n<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>\n</li>\n<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n</li>\n<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>\n</li>\n<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n</li>\n</ul>\n<h2 id=\"为什么要学习流行框架\"><a href=\"#为什么要学习流行框架\" class=\"headerlink\" title=\"为什么要学习流行框架\"></a>为什么要学习流行框架</h2><ul>\n<li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；</li>\n</ul>\n<ul>\n<li>企业中，使用框架，能够提高开发的效率；</li>\n</ul>\n<ul>\n<li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li>\n<li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li>\n</ul>\n<ul>\n<li>增强自己就业时候的竞争力</li>\n</ul>\n<ul>\n<li>人无我有，人有我优</li>\n<li>你平时不忙的时候，都在干嘛？</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</li>\n</ul>\n<ul>\n<li>node 中的 express；</li>\n</ul>\n<ul>\n<li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</li>\n</ul>\n<ul>\n<li><ol>\n<li>从Jquery 切换到 Zepto</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从 EJS 切换到 art-template</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\"><a href=\"#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\" class=\"headerlink\" title=\"Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul>\n<li><p>MVC 是后端的分层开发概念；</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>\n</li>\n<li><p>为什么有了MVC还要有MVVM</p>\n</li>\n</ul>\n<h2 id=\"Vue-js-基本代码-和-MVVM-之间的对应关系\"><a href=\"#Vue-js-基本代码-和-MVVM-之间的对应关系\" class=\"headerlink\" title=\"Vue.js 基本代码 和 MVVM 之间的对应关系\"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><p><img src=\"https://user-images.githubusercontent.com/28568478/116802575-5b22cd80-ab46-11eb-8f55-8b75473b6d4a.png\" alt=\"01 MVC和MVVM的关系图解\"></p>\n<h2 id=\"Vue之-基本的代码结构和插值表达式、v-cloak\"><a href=\"#Vue之-基本的代码结构和插值表达式、v-cloak\" class=\"headerlink\" title=\"Vue之 - 基本的代码结构和插值表达式、v-cloak\"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id=\"Vue指令之v-text和v-html\"><a href=\"#Vue指令之v-text和v-html\" class=\"headerlink\" title=\"Vue指令之v-text和v-html\"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id=\"Vue指令之v-bind的三种用法\"><a href=\"#Vue指令之v-bind的三种用法\" class=\"headerlink\" title=\"Vue指令之v-bind的三种用法\"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol>\n<li><p>直接使用指令<code>v-bind</code></p>\n</li>\n<li><p>使用简化指令<code>:</code></p>\n</li>\n<li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class=\"line\">    &lt;!-- &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        &#x2F;* 默认加入v-cloak的元素 隐藏 *&#x2F;</span><br><span class=\"line\">        [v-cloak] &#123;</span><br><span class=\"line\">            display: none;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 使用v-cloak能够解决插值表达式闪烁的问题 --&gt;</span><br><span class=\"line\">        &lt;p v-cloak&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">        &lt;!-- 默认v-text是没有闪烁问题的</span><br><span class=\"line\">            v-text 会覆盖元素中原本的内容，但是插值表达式 只会替换自己的这个占位符 不会吧扎鞥个元素内容清空</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;h4 v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;h4&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- v-html会解析html格式字符串 --&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;msg2&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div v-text&#x3D;&quot;msg2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;div v-html&#x3D;&quot;msg2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- v-bind 是vue中提供用于绑定属性的指令 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; title&#x3D;&quot;123&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; title&#x3D;&quot;mytitle&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle+&#39;123&#39;&quot;&gt;</span><br><span class=\"line\">         &lt;!-- 简化写 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;mytitle+&#39;456&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">         &lt;!-- vue中 提供了v-on 事件绑定机制 --&gt;</span><br><span class=\"line\">         &lt;!-- 这样写会报错 未定义alert方法 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;mytitle+&#39; v-on&#39;&quot; v-on:click&#x3D;&quot;alert(&#39;报警&#39;)&quot;&gt;</span><br><span class=\"line\">         &lt;!-- 貌似v-bind:title不生效 --&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; v-on:click&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; v-on:mouseover&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\">         &lt;!-- v-on缩写 用@代替 v-on:--&gt;</span><br><span class=\"line\">         &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; :title&#x3D;&quot;show_title&quot; @mouseover&#x3D;&quot;show&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- vue.js放在这里时 如果网速过慢 会导致 &#123;&#123;msg&#125;&#125; 展现在页面</span><br><span class=\"line\">        需要加v-cloak 设置样式为none 这样在网速慢的时候加载出来不会出现&#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">        而是当msg数据返回时才会展示信息</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">            el: &quot;#app&quot;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                msg:123,</span><br><span class=\"line\">                msg2:&#39;&lt;h1&gt;哈哈 我是一个大大的H1&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">                mytitle:&quot;这是一个自己定义的title&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123; &#x2F;&#x2F; 这个methods 属性中国定义了当前vue实例所有可用的方法</span><br><span class=\"line\">                show: function () &#123;</span><br><span class=\"line\">                    alert(&quot;报警&quot;)</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vue指令之v-on和跑马灯效果\"><a href=\"#Vue指令之v-on和跑马灯效果\" class=\"headerlink\" title=\"Vue指令之v-on和跑马灯效果\"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id=\"跑马灯效果\"><a href=\"#跑马灯效果\" class=\"headerlink\" title=\"跑马灯效果\"></a>跑马灯效果</h3><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;开启&quot; v-on:click&#x3D;&quot;go&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;停止&quot; v-on:click&#x3D;&quot;stop&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       info: &#39;猥琐发育，别浪~！&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">       intervalId: null</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       go() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 如果当前有定时器在运行，则直接return</span><br><span class=\"line\"></span><br><span class=\"line\">         if (this.intervalId !&#x3D; null) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           return;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#x2F;&#x2F; 开始定时器</span><br><span class=\"line\"></span><br><span class=\"line\">         this.intervalId &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           this.info &#x3D; this.info.substring(1) + this.info.substring(0, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;, 500);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">       stop() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         clearInterval(this.intervalId);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue指令之v-on的缩写和事件修饰符\"><a href=\"#Vue指令之v-on的缩写和事件修饰符\" class=\"headerlink\" title=\"Vue指令之v-on的缩写和事件修饰符\"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h3><ul>\n<li><p>.stop       阻止冒泡</p>\n</li>\n<li><p>.prevent    阻止默认事件</p>\n</li>\n<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>\n</li>\n<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>\n</li>\n<li><p>.once       事件只触发一次</p>\n</li>\n</ul>\n<h2 id=\"Vue指令之v-model和双向数据绑定\"><a href=\"#Vue指令之v-model和双向数据绑定\" class=\"headerlink\" title=\"Vue指令之v-model和双向数据绑定\"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id=\"简易计算器案例\"><a href=\"#简易计算器案例\" class=\"headerlink\" title=\"简易计算器案例\"></a>简易计算器案例</h2><ol>\n<li>HTML 代码结构</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;select v-model&#x3D;&quot;opt&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;0&quot;&gt;+&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;1&quot;&gt;-&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;2&quot;&gt;*&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;option value&#x3D;&quot;3&quot;&gt;÷&lt;&#x2F;option&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;n2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;&#x3D;&quot; v-on:click&#x3D;&quot;getResult&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;result&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\"></span><br><span class=\"line\">   var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: &#39;#app&#39;,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       n1: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       n2: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       result: 0,</span><br><span class=\"line\"></span><br><span class=\"line\">       opt: &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       getResult() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         switch (this.opt) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;0&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) + parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;1&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) - parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;2&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) * parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">           case &#39;3&#39;:</span><br><span class=\"line\"></span><br><span class=\"line\">             this.result &#x3D; parseInt(this.n1) &#x2F; parseInt(this.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             break;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"在Vue中使用样式\"><a href=\"#在Vue中使用样式\" class=\"headerlink\" title=\"在Vue中使用样式\"></a>在Vue中使用样式</h2><h3 id=\"使用class样式\"><a href=\"#使用class样式\" class=\"headerlink\" title=\"使用class样式\"></a>使用class样式</h3><ol>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>数组中使用三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用内联样式\"><a href=\"#使用内联样式\" class=\"headerlink\" title=\"使用内联样式\"></a>使用内联样式</h3><ol>\n<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>\n</li>\n</ol>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</li>\n</ol>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class=\"line\">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Vue指令之v-for和key属性\"><a href=\"#Vue指令之v-for和key属性\" class=\"headerlink\" title=\"Vue指令之v-for和key属性\"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol>\n<li>迭代数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代对象中的属性</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>迭代数字</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>\n</blockquote>\n<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>\n<h2 id=\"Vue指令之v-if和v-show\"><a href=\"#Vue指令之v-if和v-show\" class=\"headerlink\" title=\"Vue指令之v-if和v-show\"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote>\n<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>\n</blockquote>\n<h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"http://www.cnblogs.com/kidney/p/6052935.html\">Vue.js双向绑定的实现原理</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day2","url":"/2021/05/02/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day2\"><a href=\"#Vue-js-Day2\" class=\"headerlink\" title=\"Vue.js - Day2\"></a>Vue.js - Day2</h1><h2 id=\"品牌管理案例\"><a href=\"#品牌管理案例\" class=\"headerlink\" title=\"品牌管理案例\"></a>品牌管理案例</h2><h3 id=\"添加新品牌\"><a href=\"#添加新品牌\" class=\"headerlink\" title=\"添加新品牌\"></a>添加新品牌</h3><h3 id=\"删除品牌\"><a href=\"#删除品牌\" class=\"headerlink\" title=\"删除品牌\"></a>删除品牌</h3><h3 id=\"根据条件筛选品牌\"><a href=\"#根据条件筛选品牌\" class=\"headerlink\" title=\"根据条件筛选品牌\"></a>根据条件筛选品牌</h3><ol>\n<li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li>\n</ol>\n<p><a href=\"https://v1-cn.vuejs.org/api/#filterBy\">filterBy - 指令</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tr v-for&#x3D;&quot;item in list | filterBy searchName in &#39;name&#39;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\">手动实现筛选的方式</a>：</li>\n</ol>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  return this.list.filter(x &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return x.name.indexOf(name) !&#x3D; -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"Vue调试工具vue-devtools的安装步骤和使用\"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"私有过滤器\"><a href=\"#私有过滤器\" class=\"headerlink\" title=\"私有过滤器\"></a>私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; &#x2F;&#x2F; 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern &#x3D; &quot;&quot;) &#123; &#x2F;&#x2F; 在参数列表中 通过 pattern&#x3D;&quot;&quot; 来指定形参默认值，防止报错</span><br><span class=\"line\"></span><br><span class=\"line\">      var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">      var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">      var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">      if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">        var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">        var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"全局过滤器\"><a href=\"#全局过滤器\" class=\"headerlink\" title=\"全局过滤器\"></a>全局过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个全局过滤器</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(&#39;dataFormat&#39;, function (input, pattern &#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var dt &#x3D; new Date(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 获取年月日</span><br><span class=\"line\"></span><br><span class=\"line\">  var y &#x3D; dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  var m &#x3D; (dt.getMonth() + 1).toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  var d &#x3D; dt.getDate().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 否则，就返回  年-月-日 时：分：秒</span><br><span class=\"line\"></span><br><span class=\"line\">  if (pattern.toLowerCase() &#x3D;&#x3D;&#x3D; &#39;yyyy-mm-dd&#39;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取时分秒</span><br><span class=\"line\"></span><br><span class=\"line\">    var hh &#x3D; dt.getHours().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mm &#x3D; dt.getMinutes().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var ss &#x3D; dt.getSeconds().toString().padStart(2, &#39;0&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return &#96;$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"键盘修饰符以及自定义键盘修饰符\"><a href=\"#键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"键盘修饰符以及自定义键盘修饰符\"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"1-x中自定义键盘修饰符【了解即可】\"><a href=\"#1-x中自定义键盘修饰符【了解即可】\" class=\"headerlink\" title=\"1.x中自定义键盘修饰符【了解即可】\"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;on&#39;).keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-x中自定义键盘修饰符\"><a href=\"#2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"2.x中自定义键盘修饰符\"></a><a href=\"https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a><a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: function (el) &#123; &#x2F;&#x2F; inserted 表示被绑定元素插入父节点时调用</span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; &#x2F;&#x2F; 为元素设置指定的字体颜色</span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color &#x3D; binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#39;font-weight&#39;: function (el, binding2) &#123; &#x2F;&#x2F; 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight &#x3D; binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot; v-focus v-color&#x3D;&quot;&#39;red&#39;&quot; v-font-weight&#x3D;&quot;900&quot;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue-1-x-中-自定义元素指令【已废弃-了解即可】\"><a href=\"#Vue-1-x-中-自定义元素指令【已废弃-了解即可】\" class=\"headerlink\" title=\"Vue 1.x 中 自定义元素指令【已废弃,了解即可】\"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.elementDirective(&#39;red-color&#39;, &#123;</span><br><span class=\"line\">  bind: function () &#123;</span><br><span class=\"line\">    this.el.style.color &#x3D; &#39;red&#39;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;red-color&gt;1232&lt;&#x2F;red-color&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"vue实例的生命周期\"><a href=\"#vue实例的生命周期\" class=\"headerlink\" title=\"vue实例的生命周期\"></a><a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">vue实例的生命周期</a></h2><ul>\n<li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li>\n<li><a href=\"https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\">生命周期钩子</a>：就是生命周期事件的别名而已；</li>\n<li>生命周期钩子 = 生命周期函数 = 生命周期事件</li>\n<li>主要的生命周期函数分类：</li>\n</ul>\n<ul>\n<li>创建期间的生命周期函数：<ul>\n<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>\n<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>\n<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>\n<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>\n</ul>\n</li>\n<li>运行期间的生命周期函数：<ul>\n<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>\n<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>\n</ul>\n</li>\n<li>销毁期间的生命周期函数：<ul>\n<li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li>\n<li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br><img src=\"https://user-images.githubusercontent.com/28568478/116815239-3b63c780-ab8f-11eb-9453-11e40b354c4e.png\" alt=\"lifecycle\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-resource-实现-get-post-jsonp请求\"><a href=\"#vue-resource-实现-get-post-jsonp请求\" class=\"headerlink\" title=\"vue-resource 实现 get, post, jsonp请求\"></a><a href=\"https://github.com/pagekit/vue-resource\">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p>\n<ol>\n<li>之前的学习中，如何发起数据请求？</li>\n<li>常见的数据请求类型？  get  post jsonp</li>\n<li>测试的URL请求资源地址：</li>\n</ol>\n<ul>\n<li>get请求地址： <a href=\"http://vue.studyit.io/api/getlunbo\">http://vue.studyit.io/api/getlunbo</a></li>\n<li>post请求地址：<a href=\"http://vue.studyit.io/api/post\">http://vue.studyit.io/api/post</a></li>\n<li>jsonp请求地址：<a href=\"http://vue.studyit.io/api/jsonp\">http://vue.studyit.io/api/jsonp</a></li>\n</ul>\n<ol start=\"4\">\n<li>JSONP的实现原理</li>\n</ol>\n<ul>\n<li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li>\n<li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li>\n<li>具体实现过程：<ul>\n<li>先在客户端定义一个回调方法，预定义对数据的操作；</li>\n<li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li>\n<li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li>\n<li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li>\n</ul>\n</li>\n<li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 导入解析 URL 地址的核心模块</span><br><span class=\"line\">const urlModule &#x3D; require(&#39;url&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">const server &#x3D; http.createServer();</span><br><span class=\"line\">&#x2F;&#x2F; 监听 服务器的 request 请求事件，处理每个请求</span><br><span class=\"line\">server.on(&#39;request&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const url &#x3D; req.url;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 解析客户端请求的URL地址</span><br><span class=\"line\">  var info &#x3D; urlModule.parse(url, true);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 如果请求的 URL 地址是 &#x2F;getjsonp ，则表示要获取JSONP类型的数据</span><br><span class=\"line\">  if (info.pathname &#x3D;&#x3D;&#x3D; &#39;&#x2F;getjsonp&#39;) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取客户端指定的回调函数的名称</span><br><span class=\"line\">    var cbName &#x3D; info.query.callback;</span><br><span class=\"line\">    &#x2F;&#x2F; 手动拼接要返回给客户端的数据对象</span><br><span class=\"line\">    var data &#x3D; &#123;</span><br><span class=\"line\">      name: &#39;zs&#39;,</span><br><span class=\"line\">      age: 22,</span><br><span class=\"line\">      gender: &#39;男&#39;,</span><br><span class=\"line\">      hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br><span class=\"line\">    var result &#x3D; &#96;$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)&#96;;</span><br><span class=\"line\">    &#x2F;&#x2F; 将拼接好的方法的调用，返回给客户端去解析执行</span><br><span class=\"line\">    res.end(result);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    res.end(&#39;404&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;server running at http:&#x2F;&#x2F;127.0.0.1:3000&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>vue-resource 的配置步骤：</li>\n</ol>\n<ul>\n<li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li>\n<li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li>\n</ul>\n<ol start=\"6\">\n<li>发送get请求：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getInfo() &#123; &#x2F;&#x2F; get 方式获取数据</span><br><span class=\"line\">  this.$http.get(&#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;getlunbo&#39;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送post请求：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">postInfo() &#123;</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;post&#39;;</span><br><span class=\"line\">  &#x2F;&#x2F; post 方法接收三个参数：</span><br><span class=\"line\">  &#x2F;&#x2F; 参数1： 要请求的URL地址</span><br><span class=\"line\">  &#x2F;&#x2F; 参数2： 要发送的数据对象</span><br><span class=\"line\">  &#x2F;&#x2F; 参数3： 指定post提交的编码类型为 application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>发送JSONP请求获取数据：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsonpInfo() &#123; &#x2F;&#x2F; JSONP形式从服务器获取数据</span><br><span class=\"line\">  var url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8899&#x2F;api&#x2F;jsonp&#39;;</span><br><span class=\"line\">  this.$http.jsonp(url).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res.body);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置本地数据库和数据接口API\"><a href=\"#配置本地数据库和数据接口API\" class=\"headerlink\" title=\"配置本地数据库和数据接口API\"></a>配置本地数据库和数据接口API</h2><ol>\n<li>先解压安装 <code>PHPStudy</code>;</li>\n<li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li>\n<li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li>\n<li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li>\n<li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li>\n<li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li>\n<li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li>\n</ol>\n<h2 id=\"品牌管理改造\"><a href=\"#品牌管理改造\" class=\"headerlink\" title=\"品牌管理改造\"></a>品牌管理改造</h2><h3 id=\"展示品牌列表\"><a href=\"#展示品牌列表\" class=\"headerlink\" title=\"展示品牌列表\"></a>展示品牌列表</h3><h3 id=\"添加品牌数据\"><a href=\"#添加品牌数据\" class=\"headerlink\" title=\"添加品牌数据\"></a>添加品牌数据</h3><h3 id=\"删除品牌数据\"><a href=\"#删除品牌数据\" class=\"headerlink\" title=\"删除品牌数据\"></a>删除品牌数据</h3><h2 id=\"Vue中的动画\"><a href=\"#Vue中的动画\" class=\"headerlink\" title=\"Vue中的动画\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\">Vue中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>\n<h3 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h3><ol>\n<li>HTML结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class=\"line\">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class=\"line\">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>VM 实例：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isshow: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    myAnimate() &#123;</span><br><span class=\"line\">      this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>定义两组类样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter-active,</span><br><span class=\"line\">    .fade-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.2s ease;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter,</span><br><span class=\"line\">    .fade-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateX(100px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用第三方-CSS-动画库\"><a href=\"#使用第三方-CSS-动画库\" class=\"headerlink\" title=\"使用第三方 CSS 动画库\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D\">使用第三方 CSS 动画库</a></h3><ol>\n<li>导入动画类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 transition 及属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">\tenter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class=\"line\">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class=\"line\">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">  \t&lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h3><ol>\n<li>定义 transition 组件以及三个钩子函数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class=\"line\">    &lt;transition</span><br><span class=\"line\">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">    @enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class=\"line\">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义三个 methods 钩子方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class=\"line\">          el.offsetWidth;</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class=\"line\">          this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n<li>定义动画过渡时长和样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.show&#123;</span><br><span class=\"line\">      transition: all 0.4s ease;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1\">v-for 的列表过渡</a></h3><ol>\n<li>定义过渡样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .list-enter,</span><br><span class=\"line\">    .list-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateY(10px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .list-enter-active,</span><br><span class=\"line\">    .list-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.3s ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义 VM中的结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    txt: &#39;&#39;,</span><br><span class=\"line\">    list: [1, 2, 3, 4]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      this.list.push(this.txt);</span><br><span class=\"line\">      this.txt &#x3D; &#39;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"列表的排序过渡\"><a href=\"#列表的排序过渡\" class=\"headerlink\" title=\"列表的排序过渡\"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>\n<ul>\n<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.v-move&#123;</span><br><span class=\"line\">  transition: all 0.8s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\">pagekit/vue-resource</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html\">navicat如何导入sql文件和导出sql文件</a></li>\n<li><a href=\"http://cubic-bezier.com/#.4,-0.3,1,.33\">贝塞尔在线生成器</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day3","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day4\"><a href=\"#Vue-js-Day4\" class=\"headerlink\" title=\"Vue.js - Day4\"></a>Vue.js - Day4</h1><h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"组件中data和props的区别\"><a href=\"#组件中data和props的区别\" class=\"headerlink\" title=\"组件中data和props的区别\"></a>组件中data和props的区别</h2><h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p><strong>后端路由：</strong>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p><strong>前端路由：</strong>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用tag属性指定router-link渲染的标签类型\"><a href=\"#使用tag属性指定router-link渲染的标签类型\" class=\"headerlink\" title=\"使用tag属性指定router-link渲染的标签类型\"></a>使用tag属性指定router-link渲染的标签类型</h2><h2 id=\"设置路由重定向\"><a href=\"#设置路由重定向\" class=\"headerlink\" title=\"设置路由重定向\"></a>设置路由重定向</h2><h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; |</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\">URL中的hash（井号）</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]},{"title":"Vue.js - Day3","url":"/2021/05/04/vue/vue2.0%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B/day3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1 id=\"Vue-js-Day3\"><a href=\"#Vue-js-Day3\" class=\"headerlink\" title=\"Vue.js - Day3\"></a>Vue.js - Day3</h1><h2 id=\"定义Vue组件\"><a href=\"#定义Vue组件\" class=\"headerlink\" title=\"定义Vue组件\"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>\n<ul>\n<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>\n<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id=\"全局组件定义的三种方式\"><a href=\"#全局组件定义的三种方式\" class=\"headerlink\" title=\"全局组件定义的三种方式\"></a>全局组件定义的三种方式</h3></li>\n</ul>\n<ol>\n<li>使用 Vue.extend 配合 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li>\n<li>直接使用 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;register&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>将模板字符串，定义到script标签种：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script id&#x3D;&quot;tmpl&quot; type&#x3D;&quot;x-template&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;&lt;a href&#x3D;&quot;#&quot;&gt;登录&lt;&#x2F;a&gt; | &lt;a href&#x3D;&quot;#&quot;&gt;注册&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n同时，需要使用 Vue.component 来定义组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>\n</blockquote>\n<h3 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h3><ol>\n<li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;,</span><br><span class=\"line\">      data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          msg: &#39;大家好！&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">          alert(&#39;点击了登录按钮&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>\n</ol>\n<h3 id=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"><a href=\"#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象\"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol>\n<li>通过计数器案例演示</li>\n</ol>\n<h3 id=\"使用components属性定义局部子组件\"><a href=\"#使用components属性定义局部子组件\" class=\"headerlink\" title=\"使用components属性定义局部子组件\"></a>使用<code>components</code>属性定义局部子组件</h3><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class=\"line\">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class=\"line\">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class=\"line\">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class=\"line\">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class=\"line\">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引用组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用flag标识符结合v-if和v-else切换组件\"><a href=\"#使用flag标识符结合v-if和v-else切换组件\" class=\"headerlink\" title=\"使用flag标识符结合v-if和v-else切换组件\"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>\n<li>页面结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class=\"line\">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class=\"line\">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Vue实例定义：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        flag: true</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-is属性来切换不同的子组件-并添加切换动画\"><a href=\"#使用-is属性来切换不同的子组件-并添加切换动画\" class=\"headerlink\" title=\"使用:is属性来切换不同的子组件,并添加切换动画\"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 登录组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;login&#39;, login);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 注册组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;register&#39;, register);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>添加切换样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .v-enter,</span><br><span class=\"line\">  .v-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .v-enter-active,</span><br><span class=\"line\">  .v-leave-active &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    transition: all 0.3s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"评论列表案例\"><a href=\"#评论列表案例\" class=\"headerlink\" title=\"评论列表案例\"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p>\n<h2 id=\"使用-this-refs-来获取元素和组件\"><a href=\"#使用-this-refs-来获取元素和组件\" class=\"headerlink\" title=\"使用 this.$refs 来获取元素和组件\"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h2><ol>\n<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"在-vue-中使用-vue-router\"><a href=\"#在-vue-中使用-vue-router\" class=\"headerlink\" title=\"在 vue 中使用 vue-router\"></a>在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"设置路由高亮\"><a href=\"#设置路由高亮\" class=\"headerlink\" title=\"设置路由高亮\"></a>设置路由高亮</h2><h2 id=\"设置路由切换动效\"><a href=\"#设置路由切换动效\" class=\"headerlink\" title=\"设置路由切换动效\"></a>设置路由切换动效</h2><h2 id=\"在路由规则中定义参数\"><a href=\"#在路由规则中定义参数\" class=\"headerlink\" title=\"在路由规则中定义参数\"></a>在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用-children-属性实现路由嵌套\"><a href=\"#使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"使用 children 属性实现路由嵌套\"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; |</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名视图实现经典布局\"><a href=\"#命名视图实现经典布局\" class=\"headerlink\" title=\"命名视图实现经典布局\"></a>命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch属性的使用\"><a href=\"#watch属性的使用\" class=\"headerlink\" title=\"watch属性的使用\"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"computed计算属性的使用\"><a href=\"#computed计算属性的使用\" class=\"headerlink\" title=\"computed计算属性的使用\"></a><code>computed</code>计算属性的使用</h2><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"watch、computed和methods之间的对比\"><a href=\"#watch、computed和methods之间的对比\" class=\"headerlink\" title=\"watch、computed和methods之间的对比\"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h2 id=\"nrm的安装使用\"><a href=\"#nrm的安装使用\" class=\"headerlink\" title=\"nrm的安装使用\"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\">URL中的hash（井号）</a></li>\n</ol>\n","categories":["vue2.0基础课程"],"tags":["vue","vue2.0基础课程"]}]